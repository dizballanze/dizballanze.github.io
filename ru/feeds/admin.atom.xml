<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tech blog by @dizballanze - Admin</title><link href="/ru/" rel="alternate"></link><link href="http://dizballanze.com/feeds/admin.atom.xml" rel="self"></link><id>/ru/</id><updated>2017-06-21T15:08:00+03:00</updated><entry><title>Middleware для обеспечения безопасности в Django</title><link href="/ru/django-security-middleware/" rel="alternate"></link><published>2017-06-21T15:08:00+03:00</published><updated>2017-06-21T15:08:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2017-06-21:/ru/django-security-middleware/</id><summary type="html">&lt;p&gt;Django предоставляет защитные механизмы от различных атак, но не все они включены по-умолчанию. В этом посте
я хочу рассмотреть какие возможности по защите предоставляет Django и как их использовать.&lt;/p&gt;
&lt;h1 id="djangomiddlewaresecuritysecuritymiddleware"&gt;django.middleware.security.SecurityMiddleware&lt;/h1&gt;
&lt;p&gt;Этот middleware включен по-умолчанию и должен быть самым первым в списке, для того чтобы злонамеренные запросы
блокировались …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django предоставляет защитные механизмы от различных атак, но не все они включены по-умолчанию. В этом посте
я хочу рассмотреть какие возможности по защите предоставляет Django и как их использовать.&lt;/p&gt;
&lt;h1 id="djangomiddlewaresecuritysecuritymiddleware"&gt;django.middleware.security.SecurityMiddleware&lt;/h1&gt;
&lt;p&gt;Этот middleware включен по-умолчанию и должен быть самым первым в списке, для того чтобы злонамеренные запросы
блокировались до обработки другими middleware.&lt;/p&gt;
&lt;p&gt;Он защищает сразу от многих атак и каждую из этих защит можно включить/отключить отдельно используя переменные в
&lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SECURE_BROWSER_XSS_FILTER&lt;/code&gt; - по-умолчанию отключен, при включении добавляет заголовок &lt;code&gt;x-xss-protection:1; mode=block&lt;/code&gt;,
заставляющий, поддерживающие этот заголовок браузеры, блокировать потенциально опасные запросы содержащие javascript 
код в POST или GET параметрах.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SECURE_CONTENT_TYPE_NOSNIFF&lt;/code&gt; - по-умолчанию отключен, при включении добавляет заголовок
&lt;code&gt;x-content-type-options:nosniff&lt;/code&gt;, запрещающий браузерам угадывать Content-Type ответа сервера, что блокирует возможность
неправильно интерпретировать загруженные пользователем файлы. Если у вас загруженные файлы отдаются напрямую
web-сервером (например, Nginx, см. ниже), то также нужно настроить чтобы сервер отдавал этот заголовок.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/media/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
        &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;X-Content-Type-Options&lt;/span&gt; &lt;span class="s"&gt;nosniff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; по-умолчанию отключен, добавляет заголовок &lt;code&gt;Strict-Transport-Security&lt;/code&gt;, который запрещает браузерам открывать сайт по
нешифрованному HTTP на заданное количество секунд. Заголовок действует на весь домен, по-этому его можно включать, только если весь контент
отдается по HTTPS. Этот заголовок позволяется защититься от некоторых man-in-the-middle атак.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt; - по-умолчанию отключен, нужно включить при добавлении сайта в
&lt;a href="https://hstspreload.org/"&gt;захардкоженный список&lt;/a&gt; &lt;code&gt;HTTPS-only&lt;/code&gt; сайтов, который поставляется вместе с Google Chrome.
Будет работать только если задан параметр &lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; &amp;gt; 0.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SECURE_HSTS_INCLUDE_SUBDOMAINS&lt;/code&gt; - по-умолчанию отключен, при включении запрещает браузерам открывать по нешифрованному
HTTP также и все поддомены сайта.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; - по-умолчанию отключен, при включении редиректит все HTTP запросы на HTTPS. Вероятно вам
захочется делать этот редирект средствами web-сервера (например, Nginx):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt;  &lt;span class="s"&gt;example.org&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;rewrite&lt;/span&gt; &lt;span class="s"&gt;^&lt;/span&gt; &lt;span class="s"&gt;http://example.org&lt;/span&gt;&lt;span class="nv"&gt;$request_uri?&lt;/span&gt; &lt;span class="s"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt; - по-умолчанию пустой список. URL адреса, соответствующие заданным в списке регулярным
выражениям, не будут перенаправляться с HTTP на HTTPS, при включении &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SECURE_SSL_HOST&lt;/code&gt; - по-умолчанию не задан. Если задать строку (домен), то при включенном &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; все
запросы будут перенаправляться на этот домен.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Если при включении HSTS настроек заголовки не добавляются, возможно Django не распознает, что запросы зашифрованные
из-за того, что располагается за реверс-прокси. Для того, чтобы Django понимал какие запросы были зашифрованными нужно
добавить параметр &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; в &lt;code&gt;settings.py&lt;/code&gt;, который содержит кортеж &lt;code&gt;("header-name", "header-value")&lt;/code&gt;.
Получив такой заголовок от прокси сервера Django будет считать что запрос был получен по протоколу HTTPS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="djangomiddlewarecsrfcsrfviewmiddleware"&gt;django.middleware.csrf.CsrfViewMiddleware&lt;/h2&gt;
&lt;p&gt;Middleware защищает от &lt;a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D0%B6%D1%81%D0%B0%D0%B9%D1%82%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D0%BB%D0%BA%D0%B0_%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81%D0%B0"&gt;межсайтовой подделки запроса&lt;/a&gt;.
При отправке любых небезопасных (POST, PUT, DELETE) запросов middleware будет проверять наличие csrf токена и если
этот токен не найден или не корректен запрос будет фильтроваться. Для отправки токена существуют разные способы.
Для обычных форм можно добавлять скрытое поле используя тег &lt;code&gt;{% csrf_token %}&lt;/code&gt; в форме. Для ajax запросов можно
добавлять заголовок &lt;code&gt;X-CSRFToken&lt;/code&gt; со значением &lt;a href="https://docs.djangoproject.com/en/1.11/ref/csrf/#ajax"&gt;полученным из cookie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Если у вас SPA и вы не используете &lt;code&gt;{% csrf_token %}&lt;/code&gt;, то вам нужно заставить Django выдать клиенту cookie с токеном.
Для этого можно использовать view decorator &lt;a href="https://docs.djangoproject.com/en/1.11/ref/csrf/#django.views.decorators.csrf.ensure_csrf_cookie"&gt;ensure_csrf_cookie&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="djangomiddlewareclickjackingxframeoptionsmiddleware"&gt;django.middleware.clickjacking.XFrameOptionsMiddleware&lt;/h2&gt;
&lt;p&gt;При включении данный middleware добавляет заголовок &lt;code&gt;X-Frame-Options: SAMEORIGIN&lt;/code&gt;, который запрещает современным браузерам
загружать сайт в (i)frame на сайтах с другим доменом. Также можно запретить подключение сайта со всех доменов используя
переменную &lt;code&gt;X_FRAME_OPTIONS = 'DENY'&lt;/code&gt;.&lt;/p&gt;</content></entry><entry><title>Оптимизация производительности Django проектов (часть 1)</title><link href="/ru/django-project-optimization-part-1/" rel="alternate"></link><published>2017-06-14T16:47:00+03:00</published><updated>2017-06-14T16:47:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2017-06-14:/ru/django-project-optimization-part-1/</id><summary type="html">&lt;p&gt;Остальные статьи цикла:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Часть 1. Профилирование и настройки Django&lt;/li&gt;
&lt;li&gt;&lt;a href="/ru/django-project-optimization-part-2/"&gt;Часть 2. Работа с базой данных&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ru/django-project-optimization-part-3/"&gt;Часть 3. Кэширование&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Django это мощный фреймворк используемый в множестве отличных проектов. Из коробки в нем включено много полезных
батареек, которые значительно ускоряют разработку и соответственно уменьшают ее стоимость. Однако, когда проект
растет и набирает …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Остальные статьи цикла:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Часть 1. Профилирование и настройки Django&lt;/li&gt;
&lt;li&gt;&lt;a href="/ru/django-project-optimization-part-2/"&gt;Часть 2. Работа с базой данных&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ru/django-project-optimization-part-3/"&gt;Часть 3. Кэширование&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Django это мощный фреймворк используемый в множестве отличных проектов. Из коробки в нем включено много полезных
батареек, которые значительно ускоряют разработку и соответственно уменьшают ее стоимость. Однако, когда проект
растет и набирает аудиторию, вы неизбежно столкнетесь с проблемами производительности. В этом посте я попробую
рассказать о том с какими проблемами вы можете столкнуться и как их решить.&lt;/p&gt;
&lt;p&gt;Это первая статья из серии, здесь будут рассмотрено профилирование и настройки Django.&lt;/p&gt;
&lt;h2 id="profilirovanie"&gt;Профилирование&lt;/h2&gt;
&lt;p&gt;Перед тем выполнять оптимизацию необходимо измерить текущую производительность, чтобы после оптимизации можно было сравнить
результаты. Такие измерения нужно будет делать часто, после каждого изменения, так что процесс должен быть автоматизированным.&lt;/p&gt;
&lt;p&gt;Профилирование - это процесс измерения метрик проекта. Таких как: время ответа сервера, использование CPU,
использование памяти и тд. Python предоставляет &lt;a href="https://docs.python.org/3/library/profile.html"&gt;профайлер&lt;/a&gt; в стандартной
библиотеке, который вполне удобно использовать для измерения производительности кусков кода.
Но для профилирования целового проекта существуют более удобные решения.&lt;/p&gt;
&lt;h3 id="logirovanie"&gt;Логирование&lt;/h3&gt;
&lt;p&gt;Самая частая проблема производительности это лишние и/или не эффективные запросы к БД. Можно настроить логирование,
для просмотра всех SQL запросов, которые выполняются в процессе обработки запроса. Добавьте в &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'disable_existing_loggers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'console'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'logging.StreamHandler'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;'loggers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'django.db.backends'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'level'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'console'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Убедитесь, что &lt;code&gt;DEBUG = True&lt;/code&gt; и перезагрузите сервер. Теперь в консоли должны выводится все SQL запросы и длительность
выполнения каждого из них.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;002&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="ss"&gt;"handbooks_size"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"size_type_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"size_id"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt; &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;OUTER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="ss"&gt;"handbooks_size"&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"size_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;"handbooks_size"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"size_id"&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"color_id"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"color_id"&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="ss"&gt;"handbooks_size"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"row"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;"handbooks_size"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"size_type_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"size_id"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt; &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;OUTER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="ss"&gt;"handbooks_size"&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"size_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;"handbooks_size"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"size_id"&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"season"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"season"&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"state"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"state"&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;002&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"__col1"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;MIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"__col2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"id"&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;Col1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;"x_order"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"price_sell"&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;"__col1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"price_sell"&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;"__col2"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;subquery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"id"&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;Col1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;"x_order"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="ss"&gt;"goods_goods"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"status"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;subquery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'reserved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'approved'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Jun&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;"GET /goods HTTP/1.0"&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;32583&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="django-debug-toolbar"&gt;Django Debug Toolbar&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://django-debug-toolbar.readthedocs.io/en/stable/"&gt;Это&lt;/a&gt; Django приложение, которые предоставляет набор панелей,
некоторые из которых удобно использовать для профилирование. По умолчанию включена SQL панель, которая предоставляет
даже больше информации чем стандартное логирование Django. Некоторые дополнительные возможности: временная диаграмма
запросов, traceback, просмотр результатов и &lt;code&gt;EXPLAIN&lt;/code&gt; каждого запроса.&lt;/p&gt;
&lt;p&gt;&lt;img alt="DDT" src="/media/2017/6/ddt.png"/&gt;&lt;/p&gt;
&lt;p&gt;DDT также поставляется с отключенной по умолчанию панелью для профилирования. Эта панель отображает результаты профилирования
в удобном web-интерфейсе. Для включения панели добавьте &lt;code&gt;debug_toolbar.panels.profiling.ProfilingPanel&lt;/code&gt; в
список &lt;code&gt;DEBUG_TOOLBAR_PANELS&lt;/code&gt; в &lt;code&gt;settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="DDT profiling panel" src="/media/2017/6/ddt-profiling-panel.png"/&gt;&lt;/p&gt;
&lt;h3 id="silk"&gt;Silk&lt;/h3&gt;
&lt;p&gt;Еще один отличный пакет, который особенно пригодится если у вас API и соответственно DDT нельзя использовать.
Как установить и настроить пакет можно посмотреть на &lt;a href="https://github.com/django-silk/silk#installation"&gt;github проекта&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="silky-screenshot.png" src="/media/2017/6/silky-screenshot.png"/&gt;&lt;/p&gt;
&lt;p&gt;После установки и настройки перезагрузите сервер и перейдите по URL: &lt;code&gt;/silk/&lt;/code&gt;. По этому адресу должен быть доступен
web-интерфейс, который показывает:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Статистику по запросам (в разрезе метод/URL с возможностью просмотра отдельных запросов),&lt;/li&gt;
&lt;li&gt;просмотр SQL запросов,&lt;/li&gt;
&lt;li&gt;просмотр результатов профилирования.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Профайлер можно включить для всего проекта установив &lt;code&gt;SILKY_PYTHON_PROFILER = True&lt;/code&gt; в &lt;code&gt;settings.py&lt;/code&gt;. Или использовать
только в определенных местах, заключив профилируемый код в декоратор или контекст процессор:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;silk.profiling.profiler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;silk_profile&lt;/span&gt;


&lt;span class="nd"&gt;@silk_profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'View Blog Post'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;silk_profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'View Blog Post #&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="testovye-dannye"&gt;Тестовые данные&lt;/h3&gt;
&lt;p&gt;Очень важно использовать для профилирования данные похожие на те, что используются в production. В идеале нужно взять бекап
с production сервера, развернуть его на локальной машине и использовать эти данные для профилирования проекта. Если вы
попробуете профилировать проект на пустой/маленькой базе данных, вероятно, вы получите некорректный результат, который
не будет соответствовать реальным проблемам на боевом окружении, что не поможет выполнить нужные оптимизации.&lt;/p&gt;
&lt;h2 id="nagruzochnoe-testirovanie_1"&gt;Нагрузочное тестирование&lt;/h2&gt;
&lt;p&gt;После оптимизации хорошей идеей будет провести нагрузочное тестирование, чтобы убедится, что уровень производительности
приложения соответствует реальной (или ожидаемой) нагрузке или SLA. Для этого типа тестирования вам потребуется окружение
аналогичное используемому на production. К счастью облачные сервисы и автоматизированная сборка проектов позволяют
разворачивать такое окружение за считанные минуты.&lt;/p&gt;
&lt;p&gt;Рекомендую использовать &lt;a href="http://locust.io/"&gt;Locust&lt;/a&gt; для нагрузочного тестирования. Главное преимущество Locust,
что тесты описываются в виде Python кода. Можно настраивать сложные сценарии тестирования, чтобы максимально
приблизить нагрузку к той, которую генерируют реальные пользователи. Пример &lt;code&gt;locustfile.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locust&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserBehavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;""" on_start is called when a Locust start before any task is scheduled """&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"ellen_key"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"education"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/profile"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebsiteUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserBehavior&lt;/span&gt;
    &lt;span class="n"&gt;min_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Также Locust предоставляет web-интерфейс для запуска тестов и просмотра результатов:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Locust web interface" src="/media/2017/6/locust-screenshot.png"/&gt;&lt;/p&gt;
&lt;p&gt;Лучше всего то, что можно настроить Locust один раз и использовать для тестирования производительности после каждого
вносимого изменения. Возможно вы даже сможете добавить его в ваш CI/CD pipeline.&lt;/p&gt;
&lt;h2 id="nastroiki-django"&gt;Настройки Django&lt;/h2&gt;
&lt;p&gt;В этом разделе мы рассмотрим настройки Django, которые могут повлиять на производительность.&lt;/p&gt;
&lt;h3 id="ttl-soedineniia-s-bd"&gt;TTL соединения с БД&lt;/h3&gt;
&lt;p&gt;По умолчанию Django закрывает соединение с БД после завершения каждого запроса. Можно настроить TTL соединения с БД,
изменив значение параметра &lt;a href="https://docs.djangoproject.com/en/1.11/ref/settings/#conn-max-age"&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; - закрывать соединение после выполнения каждого запроса&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; 0&lt;/code&gt; - TTL в секундах,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt; - неограниченное TTL.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mydatabase',
        'USER': 'mydatabaseuser',
        'PASSWORD': 'mypassword',
        'HOST': '127.0.0.1',
        'PORT': '5432',
        'CONN_MAX_AGE': 60 * 10,  # 10 minutes
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="keshirovanie-shablonov"&gt;Кэширование шаблонов&lt;/h3&gt;
&lt;p&gt;Если вам приходится использовать Django версии меньше чем 1.11, то вы можете рассмотреть включение кэширования шаблонов.
По умолчанию, Django (&amp;lt;1.11) считывает и компилирует шаблоны каждый раз, когда они рендерятся. Можно использовать
загрузчик &lt;code&gt;django.template.loaders.cached.Loader&lt;/code&gt; для включения кэширования шаблонов в памяти. Отредактируйте в 
&lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'foo', 'bar'), ],
        'OPTIONS': {
            # ...
            'loaders': [
                ('django.template.loaders.cached.Loader', [
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ]),
            ],
        },
    },
]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="redis-kak-khranilishche-kesha"&gt;Redis как хранилище кэша&lt;/h3&gt;
&lt;p&gt;Django предоставляет несколько вариантов хранилищ для кэша, например, БД, файловая система и тд. Рекомендую хранить кэш
в Redis - популярное хранилище объектов в памяти, с большой вероятностью вы уже используете его в своем проекте.
Для настройки Redis, как хранилища кэша нам нужно будет установить сторонний пакет, например &lt;code&gt;django-redis&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Устанавливаем django-redis при помощи pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django-redis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Добавьте настройки кэша в &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Читайте полную документацию &lt;a href="http://niwinz.github.io/django-redis/latest/"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="khranilishche-sessii"&gt;Хранилище сессий&lt;/h3&gt;
&lt;p&gt;По умолчанию Django хранит сессии в БД. Для ускорения не помешает хранить сессии в кэше. Добавьте следующее
в &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="udalenie-nenuzhnykh-middleware"&gt;Удаление ненужных middleware&lt;/h3&gt;
&lt;p&gt;Проверьте список используемых middleware (&lt;code&gt;MIDDLEWARE&lt;/code&gt; в &lt;code&gt;settings.py&lt;/code&gt;). Убедитесь, что там нет ничего не нужного.
Django вызывает каждый middleware для каждого обрабатываемого запроса, так что накладные расходы могут быть значительными.&lt;/p&gt;
&lt;p&gt;Если у вас есть какой-либо кастомный middleware, который используется не для всех запросов, попробуйте вынести его
функциональность в mixin для view или декоратор. Это позволит избавится от задержек при обработке остальных запросов,
которые не требуют такой функциональности.&lt;/p&gt;</content><category term="python"></category><category term="django"></category><category term="performance"></category><category term="load testing"></category></entry><entry><title>Применение Nginx + Lua для обработки контактной формы</title><link href="/ru/primenenie-nginx-lua-dlia-obrabotki-prostykh-form/" rel="alternate"></link><published>2015-06-08T18:25:00+03:00</published><updated>2015-06-08T18:25:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2015-06-08:/ru/primenenie-nginx-lua-dlia-obrabotki-prostykh-form/</id><summary type="html">&lt;p&gt;&lt;img alt="lua" src="/media/2015/6/lua.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Бывает, что нужно развернуть простой, почти полностью статический сайт. И все что мешает ограничится одним Nginx - это 
простая контактная форма, которая должна только отправлять полученные данные по почте. Конечно можно прикрутить стороннее 
решение, вроде Google Forms, но такие сторонние решения не всегда хорошо кастомизируются. Разворачивать какой-то свой бекенд 
отдельно тоже …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="lua" src="/media/2015/6/lua.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Бывает, что нужно развернуть простой, почти полностью статический сайт. И все что мешает ограничится одним Nginx - это 
простая контактная форма, которая должна только отправлять полученные данные по почте. Конечно можно прикрутить стороннее 
решение, вроде Google Forms, но такие сторонние решения не всегда хорошо кастомизируются. Разворачивать какой-то свой бекенд 
отдельно тоже не очень хочется, придется следить за тем, чтобы он всегда был запущен, усложняется деплой и тд.&lt;/p&gt;
&lt;p&gt;Возможным решением  будет использовать nginx модуль &lt;a href="http://wiki.nginx.org/HttpLuaModule"&gt;ngx_lua&lt;/a&gt; и использовать 
встраиваемый lua в Nginx. Это позволит нам ограничится Nginx и при этом реализовать кастомный обработчик формы прямо в 
конфиге Nginx, который будет работать эффективно и который проще поддерживать чем отдельный бекенд.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Пару слов о Lua. Простой, скриптовый язык, чем-то напоминает javascript, но с более мощными конструкциями и без многих 
недостатоков последнего. Хорошо зарекомендовал себя, как встраиваемый язык, из-за удобства встраивания и высокой скорости 
исполнения. Широко применяется в gamedev (напр. используется в WoW).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="ustanovka"&gt;Установка&lt;/h2&gt;
&lt;p&gt;Нам понадобится установить несколько пакетов (в примерах показывается для debian/ubuntu систем):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nginx-extras - пакет содержащий Nginx с кучей предустановленных модулей (в том числе ngx_lua)&lt;/li&gt;
&lt;li&gt;lua5.1 - интерпретатор lua, просто для того, чтобы можно было что-то проверить в REPL (для ngx_lua он не нужен)&lt;/li&gt;
&lt;li&gt;luarocks - менеджер модулей lua&lt;/li&gt;
&lt;li&gt;git-core - для того, чтобы установить smtp модуль из GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install nginx-extras lua5.1 luarocks git-core
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь воспользуемся luarocks для установки модуля &lt;a href="https://github.com/duhoobo/lua-resty-smtp"&gt;lua-resty-smtp&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo luarocks install https://raw.githubusercontent.com/duhoobo/lua-resty-smtp/master/rockspec/resty.smtp-0.0.3-1.rockspec
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Вобщем-то это все, можно приступать к разработке.&lt;/p&gt;
&lt;h2 id="0-hello-world"&gt;0: Hello world&lt;/h2&gt;
&lt;p&gt;Сначала напишем классический hello world пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;    &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/hi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;content_by_lua&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;
            &lt;span class="s"&gt;ngx.header["Content-Type"]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"text/plain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;charset=utf-8"&lt;/span&gt;
            &lt;span class="s"&gt;ngx.say("Hello&lt;/span&gt; &lt;span class="s"&gt;world!")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После перезапуска проверяем:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  ~  curl http://10.1.1.97/hi
Hello world!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для обработки запроса мы используем директиву &lt;code&gt;content_by_lua&lt;/code&gt;, которая принимает строку lua кода и ожидает, что этот код 
сгенерирует и вернет ответ используя Nginx API. Встраивать lua код в конфиг Nginx не обязательно, вместо этого можно использовать 
директиву &lt;code&gt;content_by_lua_file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Nginx предоставляет &lt;a href="http://wiki.nginx.org/HttpLuaModule#Nginx_API_for_Lua"&gt;полнофункциональный API&lt;/a&gt; с методами на все 
случаи жизни. Все методы, с которыми мы будем работать в примерах данного поста, предоставляются через модуль &lt;code&gt;ngx&lt;/code&gt;, 
который автоматически становится доступен нашим lua скриптам при запуске в Nginx.&lt;/p&gt;
&lt;h2 id="1-smtp"&gt;1: SMTP&lt;/h2&gt;
&lt;p&gt;Теперь попробуем выполнить отправку какого-либо тестового письма, просто чтобы убедиться, что это работает. Для отправки 
письма будем использовать установленную нами ранее библиотеку lua-resty-smtp. Примерный код скрипта отправка письма через
внешний SMTP будет выглядить так (используем &lt;a href="https://debugmail.io/"&gt;debugmail.io&lt;/a&gt; для тестирования):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Загружаем библиотеку для работы с SMTP&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;smtp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"resty.smtp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;test@example.org&amp;gt;"&lt;/span&gt;
&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;rcpt@example.org&amp;gt;"&lt;/span&gt;

&lt;span class="c1"&gt;-- Формируем данные письма&lt;/span&gt;
&lt;span class="n"&gt;mesgt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Mail from Nginx and Lua"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello from Nginx and Lua!"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mesgt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;-- Выполняем отправку письма&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rcpt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"dizballanze@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;wow-very-secret&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"debugmail.io"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;-- Формируем ответ сервера&lt;/span&gt;
&lt;span class="n"&gt;ngx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"text/plain;charset=utf-8"&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
    &lt;span class="n"&gt;ngx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Success!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;else&lt;/span&gt;
    &lt;span class="c1"&gt;-- Статус 500 в случае ошибки&lt;/span&gt;
    &lt;span class="n"&gt;ngx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ngx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_INTERNAL_SERVER_ERROR&lt;/span&gt;
    &lt;span class="n"&gt;ngx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Error while send mail"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ngx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Размещаем этот код в директиве &lt;code&gt;content_by_lua&lt;/code&gt; (или через внешний файл в &lt;code&gt;content_by_lua_file&lt;/code&gt;) в
 и добавляем директиву resolver, чтобы nginx мог определить ip адрес debugmail.io:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
    listen 80;

    location /send-mail {
        resolver 8.8.8.8;
        content_by_lua '...';
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Проверяем:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  ~  curl http://10.1.1.97/send-mail
Success!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Проверяем, что письмо пришло и содержит корректные данные на &lt;a href="http://bit.ly/1FNrev5"&gt;debugmail (смотреть письмо)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Меняем пароль на неправильный и проверяем, выводится ли ошибка (не забываем перезапускать Nginx после изменений):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  ~  curl http://10.1.1.97/send-mail
Error while send mail
535 5.7.0 Invalid login or password
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="2-form-handling"&gt;2: Form Handling&lt;/h2&gt;
&lt;p&gt;Для того, чтобы обработать обычную форму нужно добавить директиву &lt;code&gt;lua_need_request_body on;&lt;/code&gt;, чтобы 
Nginx подготовил для нас тело запроса и lua мог его распарсить. Далее мы используем метод &lt;code&gt;ngx.req.get_post_args&lt;/code&gt;, который возвращает таблицу содержащую все параметры запроса.&lt;/p&gt;
&lt;p&gt;Дальше дело техники, при помощи &lt;code&gt;string.format&lt;/code&gt; формируем тело письма и отправляем также, как мы делали 
это в предыдущем примере.&lt;/p&gt;
&lt;h2 id="zakliuchenie"&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Полный пример обработчика формы с настроенным Vagrant, который можно легко запустить самому и потыкать, 
можно найти на &lt;a href="https://github.com/dizballanze/nginx-lua-contact"&gt;гитхаб&lt;/a&gt;.&lt;/p&gt;</content><category term="http"></category><category term="nginx"></category><category term="lua"></category></entry><entry><title>Эффективная совместная работа backend и frontend команд</title><link href="/ru/frontend-and-backend-collaboration/" rel="alternate"></link><published>2015-03-23T16:51:00+03:00</published><updated>2015-03-23T16:51:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2015-03-23:/ru/frontend-and-backend-collaboration/</id><summary type="html">&lt;p&gt;&lt;img alt="teamwork" src="/media/2015/3/teamwork.jpg" title="Team work!"/&gt;&lt;/p&gt;
&lt;p&gt;В &lt;a href="http://wbtech.ru/"&gt;WB&amp;ndash;Tech&lt;/a&gt; мы любим разрабатывать проекты полного цикла, начиная от прототипов на салфетке и
заканчивая деплоем на продакшн сервер и дальнейшей поддержкой. Часть этапов разработки проекта идет последовательно, 
например, до тех пор пока не будут собраны все требования и готово ТЗ, мы не начинаем писать код. Основная же часть …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="teamwork" src="/media/2015/3/teamwork.jpg" title="Team work!"/&gt;&lt;/p&gt;
&lt;p&gt;В &lt;a href="http://wbtech.ru/"&gt;WB&amp;ndash;Tech&lt;/a&gt; мы любим разрабатывать проекты полного цикла, начиная от прототипов на салфетке и
заканчивая деплоем на продакшн сервер и дальнейшей поддержкой. Часть этапов разработки проекта идет последовательно, 
например, до тех пор пока не будут собраны все требования и готово ТЗ, мы не начинаем писать код. Основная же часть 
процесса работы над проектом (непосредственно разработка) ведется параллельно backend и frontend командами. Такое 
распараллеливание значительно уменьшает календарный срок разработки проекта и увеличивает качество конечного результата. 
Но также как в программировании, в управления проектами распараллеливание создает определенные трудности. 
Тому как мы решаем эти трудности и посвящен этот пост.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wbtech.ru/blog/frontend-and-backend-collaboration/"&gt;Читать пост в блоге WB&amp;ndash;Tech&lt;/a&gt;.&lt;/p&gt;</content><category term="collaboration"></category><category term="vagrant"></category><category term="git"></category><category term="REST"></category></entry><entry><title>Python wheels для быстрой установки зависимостей</title><link href="/ru/python-wheels-dlia-bystroi-ustanovki-zavisimostei/" rel="alternate"></link><published>2015-01-16T23:30:00+03:00</published><updated>2015-01-16T23:30:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2015-01-16:/ru/python-wheels-dlia-bystroi-ustanovki-zavisimostei/</id><summary type="html">&lt;p&gt;Часто все зависимые python пакеты устанавливаются при помощи pip из PyPI и/или VCS. Такой подход имеет ряд недостатков:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;производительность - каждый раз необходима скачивать и собирать пакеты что занимает большое количество времени&lt;/li&gt;
&lt;li&gt;работа в оффлайн режиме - без подключения к интернету не получится установить зависимости&lt;/li&gt;
&lt;li&gt;стабильность - установка зависимостей невозможна в случае …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Часто все зависимые python пакеты устанавливаются при помощи pip из PyPI и/или VCS. Такой подход имеет ряд недостатков:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;производительность - каждый раз необходима скачивать и собирать пакеты что занимает большое количество времени&lt;/li&gt;
&lt;li&gt;работа в оффлайн режиме - без подключения к интернету не получится установить зависимости&lt;/li&gt;
&lt;li&gt;стабильность - установка зависимостей невозможна в случае:&lt;ul&gt;
&lt;li&gt;неполадок на стороне PyPI&lt;/li&gt;
&lt;li&gt;неполадок на стороне VCS (GitHub, Bitbucket, etc)&lt;/li&gt;
&lt;li&gt;нарушения зависимостей (удаление репозитория с Github, удаление пакета из PyPI и тд)&lt;/li&gt;
&lt;li&gt;неполадок у хостинг провайдера, которые могут привести к недоступности необходимых сетевых ресурсов (PyPI, VSC, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для решения этой проблемы предлагается использование заранее подготовленных пакетов wheel для всех зависимостей и хранение их в репозитории системы.&lt;/p&gt;
&lt;h2 id="sozdaem-arkhiv-wheel-paketov"&gt;Создаем архив wheel пакетов&lt;/h2&gt;
&lt;p&gt;Wheel - это современный формат распространения пакетов в Python среде, который пришел на замену eggs. Рассмотрим процесс создания архива wheel для всех зависимостей системы. &lt;/p&gt;
&lt;p&gt;Представим типичный Python проект с файлом requirements.txt содержащим зависимости. Пример файла &lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;svgwrite&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.1.6&lt;/span&gt;
&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;
&lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.10.1&lt;/span&gt;
&lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mongoengine&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.7.1&lt;/span&gt;
&lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;uploads&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.1.3&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="nl"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/Samael500/flask-principal.git@dab7f391f0eeb76a25fa1b3dae7308a0924c8a12#egg=flask-principal&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="nl"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/Samael500/flask-security.git@f1042b5db67147b8ddaa8b767b2dfe063bb56ffa#egg=flask-security&lt;/span&gt;
&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Admin&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.0.8&lt;/span&gt;
&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.1.1&lt;/span&gt;
&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Script&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;2.0.5&lt;/span&gt;
&lt;span class="n"&gt;gunicorn&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;19.1.1&lt;/span&gt;
&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.4.2&lt;/span&gt;
&lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;4.0.2&lt;/span&gt;
&lt;span class="n"&gt;nose&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.3.4&lt;/span&gt;
&lt;span class="n"&gt;pep8&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.5.7&lt;/span&gt;
&lt;span class="n"&gt;Pillow&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;2.6.1&lt;/span&gt;
&lt;span class="n"&gt;pyflakes&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.8.1&lt;/span&gt;
&lt;span class="n"&gt;pylama&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;6.1.1&lt;/span&gt;
&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.11.1&lt;/span&gt;
&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;
&lt;span class="n"&gt;WTForms&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.0.4&lt;/span&gt;
&lt;span class="n"&gt;blessings&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.6&lt;/span&gt;
&lt;span class="n"&gt;beautifulsoup4&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;4.3.2&lt;/span&gt;
&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;3.4.1&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="nl"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/Samael500/jinja-assets-compressor.git@8e1639cec6f8b347794fe1334519daacc6b763b0#egg=jac&lt;/span&gt;
&lt;span class="n"&gt;PyYAML&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;3.10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В нашем файле &lt;code&gt;requirements.txt&lt;/code&gt; есть зависимости из внешних ресурсов (не PyPI), которые предполагают загрузку пакетов из VCS (в данном случае из git репозиториев на Github). Скопируем старый &lt;code&gt;requirements.txt&lt;/code&gt; в &lt;code&gt;requirements-remote.txt&lt;/code&gt;, а в &lt;code&gt;requirements.txt&lt;/code&gt; заменим внешние ресурсы на обычные пакеты из PyPI и получим:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;svgwrite==1.1.6
ipython==2.3.0
flask==0.10.1
flask-mongoengine==0.7.1
flask-uploads==0.1.3
flask-principal
flask-security
Flask-Admin==1.0.8
Flask-Session==0.1.1
Flask-Script==2.0.5
gunicorn==19.1.1
Flask-Testing==0.4.2
tornado==4.0.2
nose==1.3.4
pep8==1.5.7
Pillow==2.6.1
pyflakes==0.8.1
pylama==6.1.1
spec==0.11.1
py-bcrypt==0.4
WTForms==1.0.4
blessings==1.6
beautifulsoup4==4.3.2
lxml==3.4.1
jac
PyYAML==3.10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Это делается для того, чтобы при установке из архива wheel пакетов не происходили запросы к внешним VCS, а брались локальные wheel, которые мы сейчас будем генерировать.&lt;/p&gt;
&lt;p&gt;Cоздаем и активируем &lt;code&gt;venv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyvenv venv
. venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Устанавливаем все пакеты как обычно, но из &lt;code&gt;requirements-remote.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements-remote.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Сгенерируем архив всех пакетов PyPI, всех их зависимостей и всех зависимостей внешних пакетов (VCS). Для этого нам потребуется свежая версия &lt;code&gt;pip&lt;/code&gt; и пакет &lt;code&gt;wheel&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -U pip
pip install wheel
mkdir wheels
pip wheel -w wheels/ -r requirements-remote.txt --pre --allow-all-external
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После этого получаем архив wheel пакетов для всех зависимостей кроме внешних (VCS). Для внешних пакетов устанавливаемых из исходников необходимо сгенерировать пакеты вручную при помощи &lt;code&gt;setup.py bdist_wheel&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd venv/src/flask-principal
python setup.py bdist_wheel --dist-dir ../../../wheels/
cd ../flask-security
python setup.py bdist_wheel --dist-dir ../../../wheels/
cd ../jac
python setup.py bdist_wheel --dist-dir ../../../wheels/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь в директории &lt;code&gt;wheels&lt;/code&gt; есть все необходимые пакеты для установки всех зависимостей системы. Процесс уставновки зависимостей из локального архива пакетов выполняется так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --no-index -f wheels/ -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;обратите внимание, что используется файл &lt;code&gt;requirements.txt&lt;/code&gt;, а не &lt;code&gt;requirements-remote.txt&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="testirovanie-skorosti-ustanovki"&gt;Тестирование скорости установки&lt;/h2&gt;
&lt;p&gt;Обычная установка со скачиванием пакетов из PyPI и VCS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time pip install -r requirements-remote.txt
real    4m20.655s
user    1m31.242s
sys 0m55.539s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Установка из локального архива wheels:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time pip install --no-index -f wheels/ -r requirements.txt
real    1m3.412s
user    0m4.808s
sys 0m31.210s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Из результатов можно сделать вывод, что время установки пакетов из локального архива в нашем случае меньше в 4 раза.
Что логично, т.к. пакеты заново не скачиваются из интернета и не компилируются.&lt;/p&gt;
&lt;h2 id="bonus"&gt;Бонус&lt;/h2&gt;
&lt;p&gt;Для удобства написал &lt;a href="https://gist.github.com/dizballanze/070434f4eb3b5febae39"&gt;небольшой скрипт&lt;/a&gt;, автоматизирующий сборку пакетов установленных из исходников.&lt;/p&gt;
&lt;script src="https://gist.github.com/dizballanze/070434f4eb3b5febae39.js"&gt;&lt;/script&gt;
&lt;p&gt;Пример использования скрипта:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python build_wheels --sources-dir venv/src/ --wheels-dir wheels/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Скрипт пройдется по всем поддиректориям &lt;code&gt;venv/src/&lt;/code&gt; и в каждой из них попробует собрать пакет в директорию &lt;code&gt;wheels/&lt;/code&gt;.&lt;/p&gt;</content><category term="pip"></category><category term="wheels"></category><category term="dev tools"></category></entry><entry><title>Nginx как SMTP proxy-сервер</title><link href="/ru/nginx-kak-smtp-proxy-server/" rel="alternate"></link><published>2014-04-17T01:15:00+04:00</published><updated>2014-04-17T01:15:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2014-04-17:/ru/nginx-kak-smtp-proxy-server/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Данный пост прежде всего будет интересен разработчикам, системные администраторы врятле вынесут из него что-то полезное.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="nginx-logo" src="/media/2014/4/nginx.jpg" title="Nginx"/&gt;&lt;/p&gt;
&lt;h2 id="zachem-nuzhen-proxy-dlia-smtp-i-pochemu-imenno-nginx"&gt;Зачем нужен proxy для SMTP и почему именно Nginx&lt;/h2&gt;
&lt;p&gt;Если в вашем приложении нужно реализовать кастомный SMTP-сервер, (например, наш &lt;a href="http://debugmail.io/"&gt;Debug Mail&lt;/a&gt; или сервисы вроде Mailjet, Mailgun и тд.), то для вас SMTP proxy-сервер будет полезен …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Данный пост прежде всего будет интересен разработчикам, системные администраторы врятле вынесут из него что-то полезное.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="nginx-logo" src="/media/2014/4/nginx.jpg" title="Nginx"/&gt;&lt;/p&gt;
&lt;h2 id="zachem-nuzhen-proxy-dlia-smtp-i-pochemu-imenno-nginx"&gt;Зачем нужен proxy для SMTP и почему именно Nginx&lt;/h2&gt;
&lt;p&gt;Если в вашем приложении нужно реализовать кастомный SMTP-сервер, (например, наш &lt;a href="http://debugmail.io/"&gt;Debug Mail&lt;/a&gt; или сервисы вроде Mailjet, Mailgun и тд.), то для вас SMTP proxy-сервер будет полезен для следующих целей:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;отсев несанкционированных попыток отправки писем до попадания писем в кастомный бекенд,&lt;/li&gt;
&lt;li&gt;фильтрация флуда,&lt;/li&gt;
&lt;li&gt;балансировка - можно выбирать на какой сервер целесообразнее отправить обработку письма.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nginx из коробки предоставляет полнофункциональный smtp proxy с свойственной для него отличной производительностью. В моем случае в проекте уже использовался Nginx для проксирования запросов к Node.js приложению и для отдачи статики, по-этому выбор в его пользу был очевиден.&lt;/p&gt;
&lt;p&gt;Далее мы рассмотрим процесс настройки proxy-сервера и способы его взаимодействия с приложением.&lt;/p&gt;
&lt;h2 id="nastroika"&gt;Настройка&lt;/h2&gt;
&lt;p&gt;Пример конфигурации SMTP proxy-сервера (должен быть определен или подключен в корне nginx.conf):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;mail&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;auth_http&lt;/span&gt;  &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="s"&gt;/auth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;starttls&lt;/span&gt;        &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/cert.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/key.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;auth_http_header&lt;/span&gt; &lt;span class="s"&gt;X-Auth-Key&lt;/span&gt; &lt;span class="s"&gt;wow_so_secret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Generic port&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;server_name&lt;/span&gt;     &lt;span class="s"&gt;debugmail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt;          &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;protocol&lt;/span&gt;        &lt;span class="s"&gt;smtp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy&lt;/span&gt;           &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass_error_message&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;smtp_auth&lt;/span&gt;       &lt;span class="s"&gt;login&lt;/span&gt; &lt;span class="s"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;xclient&lt;/span&gt;         &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Рассмотрим некоторые параметры:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server_name&lt;/code&gt; - имя сервера, которое используется в приветствии SMTP-сервера,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listen&lt;/code&gt; - задает адрес и порт который будет слушать proxy,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protocol&lt;/code&gt; - smtp, также поддерживается imap и pop3, но их описание выходит за рамки данного поста,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proxy_pass_error_message&lt;/code&gt; - задает необходимость передачи сообщений об ошибке клиенту от проксируемого SMTP-сервера.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Остальные параметры рассмотрим в следующих разделах.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Вы наверное заметили, что нигде не задается адрес проксируемого сервера.
Чтобы узнать откуда Nginx узнает его адрес см. следующий раздел.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="autentifikatsiia"&gt;Аутентификация&lt;/h3&gt;
&lt;p&gt;Nginx поддерживает 3 метода аутентификации SMTP: &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;plaint&lt;/code&gt; и &lt;code&gt;cram-md5&lt;/code&gt;. Для задания активных методов необходимо использовать параметр &lt;code&gt;smtp_auth&lt;/code&gt; значением которого является список методов через пробел. Также можно полностью отключить аутентификацию задав значение &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="http-auth-server"&gt;HTTP Auth сервер&lt;/h4&gt;
&lt;p&gt;Для проверки аутентификации необходимо реализовать сервер, который будет принимать по HTTP запросы от proxy сервера и возвращать результат проверки. Адрес такого сервера задается при помощи параметра &lt;code&gt;auth_http&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Логин и пароль для проверки отправляются на сервер аутентификации через заголовки &lt;code&gt;Auth-User&lt;/code&gt; и &lt;code&gt;Auth-Pass&lt;/code&gt; соответственно. В заголовке &lt;code&gt;Auth-Login-Attempt&lt;/code&gt; proxy сервер передает номер попытки аутентификации. После проверки в зависимости от результата сервер должен вернуть в ответе следующие заголовки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Если проверка выполнена успешно:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Auth-Status: OK&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Auth-Server: &amp;lt;host&amp;gt;&lt;/code&gt; - хост проксируемого сервера, на который нужно отправить письмо,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Auth-Port: &amp;lt;port&amp;gt;&lt;/code&gt; - порт проксируемого сервера,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Если возникла ошибка:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Auth-Status: &amp;lt;error-message&amp;gt;&lt;/code&gt; - сообщение об ошибке, которое будет возвращено пользователю,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Auth-Wait: &amp;lt;count&amp;gt;&lt;/code&gt; - количество оставшихся попыток аутентифкации, если данный заголовок не возвращать, то соединение будет закрыто.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Независимо от результата proxy сервер ждет ответ со статусом &lt;code&gt;HTTP/1.0 200 OK&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Как вы видите адрес проксируемого сервера возвращает сервер аутентификации, что дает широкие возможности в плане балансировки нагрузки/логгирования/фильтрации и тд. Например, в зависимости от ip-адреса клиента (который передается в заголовке &lt;code&gt;Client-IP&lt;/code&gt;), можно направить письмо на сервер, который географически ближе к данному клиенту (GeoIP). Или можно использовать другой способ балансировки, например, в зависимости от домена пользователя, даты его регистрации или любых других данных которые предаставляет proxy сервер или которые хранятся в БД.&lt;/p&gt;
&lt;h4 id="auth_http_header"&gt;auth_http_header&lt;/h4&gt;
&lt;p&gt;Я не рекомендую делать ваш сервер аутентификации доступным из вне, но если у вас есть веские причины для этого, то Nginx предоставляет возможность простой способ проверки запроса при помощи &lt;code&gt;shared secret&lt;/code&gt;. Для настройки используется параметр &lt;code&gt;auth_http_header &amp;lt;header-name&amp;gt; &amp;lt;shared-secret-key&amp;gt;&lt;/code&gt;. При отправки запроса на аутентификацию proxy также будет отправлять заголовок с именем &lt;code&gt;&amp;lt;header-name&amp;gt;&lt;/code&gt; и значением &lt;code&gt;&amp;lt;shared-secret-key&amp;gt;&lt;/code&gt;. На сервере аутентификации соответственно нужно выполнять проверку данного значения.&lt;/p&gt;
&lt;p&gt;Как альтернативный или дополнительный вариант, можно выполнять проверку по IP-адресу proxy сервера, который вероятно является фиксированным.&lt;/p&gt;
&lt;h4 id="xclient"&gt;XCLIENT&lt;/h4&gt;
&lt;p&gt;Nginx поддерживает &lt;a href="http://www.postfix.org/XCLIENT_README.html"&gt;расширение XCLIENT&lt;/a&gt;. Для активации данной возможности используется параметр &lt;code&gt;xclient: on&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;После активации xclient на бекенд (SMTP-сервер) будет приходить команда примерно следующего вида: &lt;code&gt;XCLIENT &amp;lt;attr1=value1&amp;gt; &amp;lt;attr2=value2&amp;gt;&lt;/code&gt;. Среди атрибутов команды можно выделить &lt;code&gt;LOGIN&lt;/code&gt;, который (как вы наверное догадались) передает логин при помощи которого пользователь аутентифицировался.&lt;/p&gt;
&lt;p&gt;В &lt;a href="http://debugmail.io/"&gt;Debug Mail&lt;/a&gt; у нас пароль является идентификатором проекта, к которому нужно в итоге прикрепить письмо. Соответственно одного логина нам было недостаточно, для того, чтобы понять куда сохранять email. К счастью Nginx позволяет переопределить значение атрибута &lt;code&gt;LOGIN&lt;/code&gt; передаваемого на бекенд. Для этого необходимо (в случае успешной проверки) возвращать дополнительный заголовок &lt;code&gt;Auth-User&lt;/code&gt; от сервера аутентификации, например так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="s"&gt;"Auth-Status"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"OK"&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="s"&gt;"Auth-Server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smtp_host&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="s"&gt;"Auth-Port"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smtp_port&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="s"&gt;"Auth-User"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;#&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ssl-tls_1"&gt;SSL / TLS&lt;/h3&gt;
&lt;p&gt;Если вам нужно добавить поддержку ssl или tls, то в Nginx есть всё для этого. Для включения ssl необходимо задать параметр &lt;code&gt;ssl: on&lt;/code&gt;. Если же вы предпочитаете TLS, то необходимо использовать параметр &lt;code&gt;starttls: on&lt;/code&gt;, при этом использование TLS будет опциональным и будет зависеть от клиента. Чтобы сделать использование TLS обязательным нужно вместо &lt;code&gt;on&lt;/code&gt; задать значение &lt;code&gt;only&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Для дальнейшей настройки нам потребуется сертификат и секретный ключ в формате PEM. Для примера сгенерируем self-signed сертификат (для реального проекта вам вероятно потребуется купить сертификат выданный сертификационным центром):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 50 -nodes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Далее задаем пути к сертификату и ключу в настройках Nginx (параметры &lt;code&gt;ssl_certificate&lt;/code&gt; и &lt;code&gt;ssl_certificate_key&lt;/code&gt; соответственно).&lt;/p&gt;
&lt;h3 id="ps"&gt;P.S.&lt;/h3&gt;
&lt;p&gt;Полная документация по всем параметрам смотрите на &lt;a href="http://nginx.org/ru/docs/"&gt;официальном сайте Nginx&lt;/a&gt;.&lt;/p&gt;</content><category term="nginx"></category><category term="smtp"></category><category term="debugmail"></category></entry><entry><title>Серверная архитектура DebugMail</title><link href="/ru/servernaia-arkhitektura-debugmail/" rel="alternate"></link><published>2014-03-15T23:46:00+04:00</published><updated>2014-03-15T23:46:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2014-03-15:/ru/servernaia-arkhitektura-debugmail/</id><summary type="html">&lt;p&gt;&lt;img alt="debugmail-logo" src="/media/2014/3/debugmail.jpg" title="DebugMail"/&gt;&lt;/p&gt;
&lt;p&gt;На днях &lt;a href="http://wbtech.ru"&gt;мы&lt;/a&gt; запустили &lt;a href="http://debugmail.io/"&gt;DebugMail&lt;/a&gt; - сервис, который помогает упростить тестирование email-рассылок на этапе разработки сайта/приложения/etc. Сервис позволяет сразу после регистрации получить свой виртуальный smtp-сервер, просматривать отправляемые письма, совместно работать над рассылками вместе с коллегами. В этом посте я расскажу про то, как разрабатывался backend сервиса, какие технологии использовались …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="debugmail-logo" src="/media/2014/3/debugmail.jpg" title="DebugMail"/&gt;&lt;/p&gt;
&lt;p&gt;На днях &lt;a href="http://wbtech.ru"&gt;мы&lt;/a&gt; запустили &lt;a href="http://debugmail.io/"&gt;DebugMail&lt;/a&gt; - сервис, который помогает упростить тестирование email-рассылок на этапе разработки сайта/приложения/etc. Сервис позволяет сразу после регистрации получить свой виртуальный smtp-сервер, просматривать отправляемые письма, совместно работать над рассылками вместе с коллегами. В этом посте я расскажу про то, как разрабатывался backend сервиса, какие технологии использовались и какие проблемы приходилось решать. Думаю пост будет интересен прежде всего тем, кто работает с Node.js. &lt;/p&gt;
&lt;p&gt;Основные используемые технологии:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nodejs.org/"&gt;Node.js&lt;/a&gt; для запуска нашего js на сервере.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt;, чтобы добавить немного сахара к нашему js.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.org/"&gt;MongoDB&lt;/a&gt; для хранения всех перманентных данных. &lt;a href="http://mongoosejs.com/"&gt;Mongoose&lt;/a&gt; - ODM для работы с MongoDB из под Node.js.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://redis.io/"&gt;Redis&lt;/a&gt;, как хранилище для сессий, кэш и для поддержки работы сервера real-time обновлений (&lt;a href="http://redis.io/topics/pubsub"&gt;pub/sub&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://faye.jcoglan.com/"&gt;Faye&lt;/a&gt; система для обмена real-time сообщениями между клиентом и сервером при помощи паттерна pub/sub.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Backend сервиса состоит 3 основных компонентов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SMTP-сервер, который сохраняет все полученные письма и умеет отличать проект к которому относится письмо.&lt;/li&gt;
&lt;li&gt;REST Api который позволяет выполнять операции по работе с проектами, пользователями и письмами.&lt;/li&gt;
&lt;li&gt;Сервер для поддержки real-time обновлений при получении новых писем.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для того, чтобы сервис было легче масштабировать, каждый из описанных выше компонентов разрабатывался с учетом того, что он может быть запущен отдельно, в том числе на другом сервере. Взаимодействие между компонентами в основном происходит через базу данных и систему обмена сообщениями Faye (для real-time обновлений).&lt;/p&gt;
&lt;p&gt;&lt;img alt="debugmail-design" src="/media/2014/3/debugmail-design.png" title="DebugMail design"/&gt;&lt;/p&gt;
&lt;h2 id="smtp-server"&gt;SMTP-сервер&lt;/h2&gt;
&lt;p&gt;Необходимо было разработать SMTP-север, который бы не осуществлял доставку письма на целевой хост, а только сохранял его в базе данных. В этом нам отлично помогли модули &lt;a href="https://github.com/andris9/simplesmtp"&gt;simplesmtp&lt;/a&gt; и &lt;a href="https://github.com/andris9/mailparser"&gt;mailparser&lt;/a&gt;, которые покрывали все базовые функции необходимые для работы smtp-сервера и парсинга писем. Оставалось только прописать нужные обработчики событий и другой специфичный для задачи код.&lt;/p&gt;
&lt;p&gt;В сервисе предполагается, что все письма относятся к определенному проекту. При создании проекта пользователь получает параметры подключения к smtp-серверу среди которых есть пара login-password. На основе этих данных smtp-сервер определяет к какому проекту относится то или иное полученное письмо.&lt;/p&gt;
&lt;h2 id="rest-api"&gt;REST API&lt;/h2&gt;
&lt;p&gt;Для взаимодействия клиентского приложения (см. скоро пост про клиентскую часть) с backend было разработано REST API на базе фреймворка &lt;a href="http://expressjs.com/"&gt;express&lt;/a&gt;. Выбран был именно этот фреймворк из-за его простоты, скорости работы и гибкости. При помощи поддержки middleware, которые пришли из &lt;a href="http://www.senchalabs.org/connect/"&gt;connect&lt;/a&gt;, можно очень просто встраиваться в процесс обработки запросов. Несколько примеров разработанных middleware:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;контроль доступа,&lt;/li&gt;
&lt;li&gt;content negotiation,&lt;/li&gt;
&lt;li&gt;защита от CSRF,&lt;/li&gt;
&lt;li&gt;инициализация сессии и тд.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="content-negotiation"&gt;Content negotiation&lt;/h3&gt;
&lt;p&gt;Для того, чтобы максимально распараллелить работу с front-end разработчиком, было принято решение реализовывать сервис в виде SPA (single page application) и REST API. Далее возник вопрос, как различать запросы, которые отправляет клиентское приложение, от запросов, которые генерируются браузером автоматически (при загрузке страниц) при том, то URL-адреса REST API и клиентского приложения пересекаются. Самым корректным решением нам показалось использование content negotiation. При поступлении запроса срабатывает middleware, который проверяет какой формат ответа является предпочтительным для клиента, на основании значения из заголовка запроса &lt;code&gt;Accept&lt;/code&gt;. Клиентское приложение отправляет значение данного заголовка как &lt;code&gt;application/json&lt;/code&gt;, что сообщает серверу о том, что нужно обрабатывать запрос, как запрос к REST API и вернуть результат в виде JSON-документа. Во всех остальных случаях предполагается, что запрос приходит от браузера и происходит рендеринг основного шаблона с подключенным клиентским приложением.&lt;/p&gt;
&lt;h3 id="marshrutizatsiia"&gt;Маршрутизация&lt;/h3&gt;
&lt;p&gt;Изначально было принято решение использовать модуль &lt;a href="https://github.com/visionmedia/express-resource"&gt;express-resource&lt;/a&gt;, но он оказался недостаточно гибким. Например, нельзя задавать кастомные middleware для определенных маршрутов. &lt;a href="https://github.com/visionmedia/express-resource/pull/66"&gt;Pull Request&lt;/a&gt; для решения описанной проблемы висит уже больше года, в итоге от &lt;code&gt;express-resource&lt;/code&gt; пришлось отказаться в пользу стандартного способа задания маршрутов в express.&lt;/p&gt;
&lt;h2 id="real-time-updates_1"&gt;Real-time updates&lt;/h2&gt;
&lt;p&gt;Одна из фич сервиса предполагает, что при получении нового письма оно должна сразу появляться в интерфейсе. Для реализации таких real-time обновлений существует несколько популярных решений:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://socket.io"&gt;socket.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sockjs.org"&gt;sockjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://faye.jcoglan.com/"&gt;faye&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Мы остановились на Faye, т.к. он:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;имеет достаточно удобное и простое API,&lt;/li&gt;
&lt;li&gt;из коробки поддерживаются server-side clients, что важно, т.к. сообщения генерируются из SMTP-сервера,&lt;/li&gt;
&lt;li&gt;достаточно активно разрабатывается.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="autentifikatsiia-polzovatelei"&gt;Аутентификация пользователей&lt;/h3&gt;
&lt;p&gt;Основной сложностью было реализовать аутентификацию клиентов, т.к. сессии, которые используются в основном приложении и REST API, здесь не доступны. Для решения этой проблемы была введена аутентификация при подписке на обновления проекта. Предпологается, что при инициализации подписки на уведомления клиент передает &lt;code&gt;user id&lt;/code&gt;, &lt;code&gt;session id&lt;/code&gt; и &lt;code&gt;token&lt;/code&gt;. &lt;code&gt;token&lt;/code&gt; является результатом выполнения хэш-функции к параметрам &lt;code&gt;user id&lt;/code&gt;, &lt;code&gt;session id&lt;/code&gt; и некоторого закрытого ключа. Чтобы реализовать такой механизм отлично подходят, т.н. &lt;a href="http://faye.jcoglan.com/browser/extensions.html"&gt;extensions&lt;/a&gt;, которые позволяют перехватывать сообщения и выполнять дополнительные действия (проверки, дополнительную обработку данных и тд.). В итоге получается примерно такой код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addExtension&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;outgoing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;'/meta/subscribe'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;USER_ID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SESSION_ID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PRIVATE_TOKEN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Аналогичная система расширений на стороне сервера позволяет выполнять проверку и разрешать подписываться на обновления по проектам только тем пользователям, которые действительно имеют к ним доступ.&lt;/p&gt;
&lt;h2 id="avtomaticheskoe-testirovanie_1"&gt;Автоматическое тестирование&lt;/h2&gt;
&lt;p&gt;Зачем нужно писать тесты я думаю объяснять не нужно. В данном проекте мы хотели добиться максимального покрытия кода тестами. Для этого практически весь код тестируется сразу на 2х уровнях, на функциональном и на модульном.&lt;/p&gt;
&lt;p&gt;Писать тесты на node.js - одно удовольствие. В основном это так благодаря большому количеству удобных инструментов и модулей в &lt;a href="https://npmjs.org/"&gt;npm&lt;/a&gt;. Также помогают особенностям javascript и node.js, которые предоставляют все необходимые возможности для удобного создания &lt;a href="http://en.wikipedia.org/wiki/Mock_object"&gt;моков&lt;/a&gt;. Рассмотрим, какие модули использовались и с какой целью:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://visionmedia.github.io/mocha/"&gt;mocha&lt;/a&gt; - многофункциональный тестовый фреймворк, содержит все необходимые функции для структурирования, поиска, запуска, подсчета метрик, просмотра результатов выполнения тестов и тд. Поддерживает как синхронные так и асинхронные тесты и имеет широкие возможности для кастомизации процесса тестирования.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/visionmedia/supertest"&gt;supertest&lt;/a&gt; - модуль для выполнения функционального тестирования. Все что нужно для начала работы с supertest - передать ему экземпляр приложения express, после этого можно выполнять запросы к приложению и тестировать полученные ответы. Также supertest предоставляет удобный chaining api, типичный тест выглядит так:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/user'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Accept'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// ... check something here ...&lt;/span&gt;

    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/visionmedia/should.js/"&gt;should.js&lt;/a&gt; - это библиотека для удобного выполнения assertions. При инициализации библиотека перегружает встроенные объекты javascript, что позволяет использовать красивые конструкции вроде &lt;code&gt;user.should.have.property('company', 'wbtech')&lt;/code&gt;. Предоставляет большое количество полезных фич, что делает написание тестов более приятным и быстрым процессом.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/felixge/node-sandboxed-module"&gt;sandboxed-module&lt;/a&gt; - модуль для &lt;a href="http://en.wikipedia.org/wiki/Dependency_injection"&gt;dependency injection&lt;/a&gt;. Позволяет загрузить модуль с подменой указанных модулей, а также локальных и глобальных переменных.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pgte/nock"&gt;nock&lt;/a&gt; - позволяет перехватывать запросы, которые делает код, через http протокол. Можно переопределять все запросы или по определенным признакам (например, url запроса, заголовки или тело запроса) и задавать ответ, который будет возвращаться в вызываемый код. Есть много дополнительных плюшек, вроде задания задержек, chaining api и тд.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Стоит отметить, что тесты выполняются очень быстро. На данный момент 320 тестов выполняются примерно за 17с (в один поток).&lt;/p&gt;
&lt;h2 id="nekotorye-ispolzuemye-moduli"&gt;Некоторые используемые модули&lt;/h2&gt;
&lt;p&gt;Список некоторых полезных модулей, о которых не упоминал выше:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/caolan/async"&gt;async&lt;/a&gt;, &lt;a href="http://lodash.com/"&gt;lodash&lt;/a&gt; - незаменимые модули, полезны практически в каждом проекте.&lt;ul&gt;
&lt;li&gt;async предоставляет очень простой способ для выполнения асинхронного кода.&lt;/li&gt;
&lt;li&gt;lodash модуль для упрощения работы с различными структурами данных, также содержит методы для упрощения функционального программирования и &lt;a href="http://lodash.com/docs"&gt;многое другое&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ectjs.com/"&gt;ect&lt;/a&gt; - очень быстрый и в тоже время гибкий шаблонизатор, который работает с синтаксисом CoffeeScript.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nodemailer.com/"&gt;nodemailer&lt;/a&gt; - для отправки писем, есть все что нужно, кастомизируется.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://passportjs.org/"&gt;passport&lt;/a&gt; - все что нужно для аутентификации через сторонние ресурсы. Поддерживает &lt;a href="https://github.com/jaredhanson/passport/wiki/Strategies#providers"&gt;множество провайдеров&lt;/a&gt; через сторонние модули.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mattrobenolt/raven-node"&gt;raven-node&lt;/a&gt; - node.js клент к &lt;a href="https://getsentry.com/"&gt;Sentry&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="node.js"></category><category term="mongodb"></category><category term="faye"></category><category term="debugmail"></category></entry><entry><title>Используем сессию express в socket.io</title><link href="/ru/ispolzuem-sessiiu-express-v-socketio/" rel="alternate"></link><published>2013-04-19T13:33:00+04:00</published><updated>2013-04-19T13:33:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2013-04-19:/ru/ispolzuem-sessiiu-express-v-socketio/</id><summary type="html">&lt;p&gt;При разработке приложения с использованием socket.io + express часто возникает задача использования сессии express в socket.io. Рассмотрим, как можно решить эту задачу.&lt;/p&gt;
&lt;h2 id="ispolzuemye-pakety"&gt;Используемые пакеты&lt;/h2&gt;
&lt;p&gt;Нам нужно установить несколько пакетов, которые пригодятся для решения поставленной задачи (предполагается что express и soket.io уже установлены):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install cookie express-session-mongo
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cookie&lt;/code&gt; - модуль …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;При разработке приложения с использованием socket.io + express часто возникает задача использования сессии express в socket.io. Рассмотрим, как можно решить эту задачу.&lt;/p&gt;
&lt;h2 id="ispolzuemye-pakety"&gt;Используемые пакеты&lt;/h2&gt;
&lt;p&gt;Нам нужно установить несколько пакетов, которые пригодятся для решения поставленной задачи (предполагается что express и soket.io уже установлены):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install cookie express-session-mongo
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cookie&lt;/code&gt; - модуль для удобного парсинга cookie&lt;/li&gt;
&lt;li&gt;&lt;code&gt;express-session-mongo&lt;/code&gt; - back-end для хранения сессий express в MongoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="nastraivaem-express"&gt;Настраиваем express&lt;/h2&gt;
&lt;p&gt;Настроим сессии в express:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;DB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;'ip'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'port'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'db'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MongoSessionStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'express-session-mongo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session_storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MongoSessionStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

  &lt;span class="cm"&gt;/* .... */&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookieParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'secret'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;session_storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'secret'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'sid'&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В данном примере мы используем MongoDB для хранения сессий, но данный приём будет работать и для других хранилищ.&lt;/p&gt;
&lt;h2 id="poluchaem-sessionnye-dannye-v-soketio"&gt;Получаем сессионные данные в soket.io&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Запускаем web-сервер&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'port'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Express server listening on port "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'port'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;socketio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Настраиваем socket.io&lt;/span&gt;
&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Аутентификация пользователей&lt;/span&gt;
  &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'authorization'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Проверяем переданы ли cookie&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'No cookie transmitted.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Парсим cookie&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Получаем идентификатор сессии&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sid'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sessionID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Добавляем метод для чтения сессии&lt;/span&gt;
    &lt;span class="c1"&gt;// в handshakeData&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Запрашиваем сессию из хранилища&lt;/span&gt;
      &lt;span class="nx"&gt;session_storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;


&lt;span class="c1"&gt;// Пример использования&lt;/span&gt;
&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sockets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'chat'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handshake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sockets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'chat'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для чтения сессии в обработчиках socket.io нужно использовать &lt;code&gt;socket.handshake.getSession&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="zakliuchenie"&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Стоит отметить, что если socket.io у вас слушает другой хост/порт, отличный от express, то необходимо предусмотреть другой способ передачи идентификатора сессии.&lt;/p&gt;
&lt;p&gt;Полный пример можно посмотреть на &lt;a href="https://github.com/dizballanze/express-socketio-session-example/"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="node.js"></category><category term="express"></category><category term="socket.io"></category></entry><entry><title>Масштабирование Node.js приложений</title><link href="/ru/masshtabirovanie-nodejs-prilozhenii/" rel="alternate"></link><published>2013-02-17T01:17:00+04:00</published><updated>2013-02-17T01:17:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2013-02-17:/ru/masshtabirovanie-nodejs-prilozhenii/</id><summary type="html">&lt;p&gt;Все мы знаем, что node.js так популярен благодаря своей производительности. Он работает быстро благодаря разным факторам, таким как использование движка Google V8 и асинхронному i/o. Именно такая высокая производительность позволяет достаточно долго не задумываться о масштабировании приложения, т.к. даже один запущенный Node.js процесс может обслуживать сотни …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Все мы знаем, что node.js так популярен благодаря своей производительности. Он работает быстро благодаря разным факторам, таким как использование движка Google V8 и асинхронному i/o. Именно такая высокая производительность позволяет достаточно долго не задумываться о масштабировании приложения, т.к. даже один запущенный Node.js процесс может обслуживать сотни или даже тысячи запросов в секунду.&lt;/p&gt;
&lt;p&gt;&lt;img alt="postlogo" src="/media/2013/02/node-cluster.png"/&gt;&lt;/p&gt;
&lt;p&gt;Изначально Node.js приложение работает в одном потоке и, соответственно, для обработки запросов используется только одно ядро процессора. Чтобы использовать весь потенциал многоядерных процессоров, необходимо запускать сразу несколько экземпляров приложения, а операционная система позаботится о том, чтобы каждый из них получил вычислительные ресурсы.&lt;/p&gt;
&lt;p&gt;Количество потоков лучше всего подбирать опытным путём. Изменяя количество потоков и проводя тестирование производительности. Чаще всего берут количество потоков равное количеству ядер процессора (или количество_ядер + 1).&lt;/p&gt;
&lt;p&gt;Сегодня мы рассмотрим: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;каким требованиям должно соответствовать приложение, чтобы успешно масштабироваться&lt;/li&gt;
&lt;li&gt;существующие npm-модули для масштабирования&lt;/li&gt;
&lt;li&gt;сторонние программные решения&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="podgotovka-k-masshtabirovaniiu"&gt;Подготовка к масштабированию&lt;/h2&gt;
&lt;p&gt;Перед тем как приложение будет иметь возможность работать в несколько потоков, нужно решить одну очень важную проблему. А именно, проблему хранения сессий и других, зависимых от клиента, данных в промежутках между запросами.&lt;/p&gt;
&lt;p&gt;Когда приложение работает в одном потоке, всё предельно просто. Данные можно хранить в переменных процесса и они будут доступны при каждом запросе. Многие так и поступают в начале разработки и, например, используют массивы для хранения сессионных данных пользователей. &lt;/p&gt;
&lt;p&gt;Однако для работы приложения в многопоточном режиме, необходимо убедится в том что каждый процесс может обслужить любой пользовательский запрос. Т.е. все процессы должны быть равноправны и иметь доступ ко всей необходимой информации о пользователях и сессиях.&lt;/p&gt;
&lt;p&gt;Одним из простых способов решения данной проблемы является вынесение сессионных данных во внешнее хранилище (например: Memcached, Redis и тд.) и запрос необходимых данных в начале обработки каждого запроса. Эту схему можно изобразить следующим образом:&lt;/p&gt;
&lt;p&gt;&lt;img alt="loadbalancing" src="/media/2013/02/load-balancing.png"/&gt;&lt;/p&gt;
&lt;h2 id="resheniia-na-nodejs"&gt;Решения на Node.js&lt;/h2&gt;
&lt;h3 id="cluster"&gt;cluster&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://nodejs.org/api/cluster.html"&gt;Cluster&lt;/a&gt; - это built-in модуль, позволяющий с лёгкостью запускать несколько процессов, которые делят между собой один порт. В данном случае балансировкой нагрузки занимается операционная система. На момент написания данного поста, модуль является экспериментальным, но мы всё же протестируем его в работе.&lt;/p&gt;
&lt;p&gt;В данном случае при запуске приложения необходимо сначала запустить master-процесс, который в свою очередь, запустит необходимое количество дочерних процессов:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cluster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cluster'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setupMaster&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/worker.js'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'exit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'worker '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' died'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Метод &lt;code&gt;setupMaster&lt;/code&gt; принимает параметры в виде объекта. Например, параметр &lt;code&gt;exec&lt;/code&gt; задаёт путь к файлу worker'а, который затем будет запускаться на выполнение.&lt;/p&gt;
&lt;p&gt;После начальной конфигурации master-север должен запустить необходимое количество рабочих процессов. Для этого используется метод &lt;code&gt;fork&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cluster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cluster'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello world\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Worker listen on 127.0.0.1:7000"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Создание worker'а мало чем отличается от создания обычного web-сервера. В данном случае мы просто создаём http-сервер и заставляем его слушать 7000 порт.&lt;/p&gt;
&lt;h3 id="cluster2"&gt;cluster2&lt;/h3&gt;
&lt;p&gt;Cluster2 - модуль от сторонних разработчиков, расширяющий возможности стандартного модуля cluster. Модуль добавляет функции, которые позволяют использовать cluster в production окружении. Среди таких функций:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;перезапуск рабочих процессов&lt;/li&gt;
&lt;li&gt;таймаут простоя&lt;/li&gt;
&lt;li&gt;события для логирования&lt;/li&gt;
&lt;li&gt;осторожное завершение процессов и др&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Подробнее ознакомится с модулем можно на &lt;a href="https://github.com/ql-io/cluster2"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="etc"&gt;etc&lt;/h3&gt;
&lt;p&gt;Ещё несколько модулей:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fent/clusterhub"&gt;clusterhub&lt;/a&gt; - an attempt at giving multi process node programs a simple and efficient way to share data&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/isaacs/cluster-master"&gt;cluster-master&lt;/a&gt; - take advantage of node built-in cluster module behavior&lt;/li&gt;
&lt;li&gt;&lt;a href="https://npmjs.org/package/amino"&gt;amino&lt;/a&gt; - clustering framework for Node.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="storonnie-programmnye-resheniia_1"&gt;Сторонние программные решения&lt;/h2&gt;
&lt;h3 id="haproxy"&gt;HAProxy&lt;/h3&gt;
&lt;p&gt;HAProxy - это специализированное решение для балансировки нагрузок. Содержит огромное количество функций и используется во многих highload проектах. Рассмотрим пример простейшей конфигурации системы на HAProxy.&lt;/p&gt;
&lt;p&gt;Для начала необходимо скачать и установить HAProxy, например &lt;a href="http://haproxy.1wt.eu/"&gt;с официального сайта&lt;/a&gt;. После этого нужно создать конфигурационный файл:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;global
daemon
maxconn 10000

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

frontend http-in
    bind *:80
    default_backend servers

backend servers
    balance roundrobin
    server server1 127.0.0.1:8000
    server server2 127.0.0.1:8001
    server server3 127.0.0.1:8002
    server server4 127.0.0.1:8003
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Если коротко, то данный конфигурационный файл описывает, что HAProxy должен прослушивать 80 порт и перенаправлять каждый запрос на один из серверов, указанны в секции backend. При этом, какой именно сервер получит запрос определяется по алгоритму &lt;a href="http://ru.wikipedia.org/wiki/Round-robin_(%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC)"&gt;round-robin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Node.js приложение необходимо запустить на каждом из указанных портов. При этом какой-то особенной конфигурации приложения не требуется.&lt;/p&gt;
&lt;p&gt;HAProxy достаточно сложное решение и больше подходит для очень крупных проектов, где необходимо распределять нагрузку между большим количеством физических серверов или между целыми кластерами.&lt;/p&gt;
&lt;h3 id="nginx"&gt;Nginx&lt;/h3&gt;
&lt;p&gt;Nginx позволяет описывать группы серверов в конфигурационных файлах и затем балансировать нагрузку между ними при помощи одного из нескольких алгоритмов. Есть возможность задания "веса" сервера, выделение отдельных серверов как резервных и др. &lt;/p&gt;
&lt;p&gt;Предположим у нас запущены 8 процессов нашего приложения. Каждый процесс слушает порт, первый процесс - 8000, второй - 8001, и тд. Рассмотрим простой пример конфигурации Nginx для балансировки нагрузки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;least_conn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8002&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8003&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8004&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8005&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8006&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8007&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;0.0.0.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь Nginx будет принимать запросы на 80 порт и балансировать их между процессами приложения. При этом он будет стараться отдавать запрос тому процессу, который в данный момент меньше всего нагружен.&lt;/p&gt;
&lt;h3 id="etc_1"&gt;etc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Round-robin_DNS"&gt;Round-robin DNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.apsis.ch/pound/"&gt;Pound&lt;/a&gt; - reverse proxy, load balancer and HTTPS front-end for Web server(s)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/perlbal/Perlbal"&gt;Perlbal&lt;/a&gt; - Perl HTTP Load Balancer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="zakliuchenie_1"&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Какой именно способ выбрать зависит от конкретного случая. Мне кажется, для масштабирования в рамках одного сервера, лучше использовать модуль cluster (или его производные), т.к. это упрощает контроль за запущенными рабочими процессами. В случае если приложение требует вынести на несколько серверов, нужно просто создать несколько таких кластеров и настроить балансировку между ними при помощи Nginx или HAProxy.&lt;/p&gt;</content><category term="cluster"></category><category term="load balancing"></category><category term="clustering"></category><category term="scaling"></category></entry><entry><title>CoffeeScript &amp; node.js dev-сервер</title><link href="/ru/coffeescript-nodejs-dev-server/" rel="alternate"></link><published>2013-01-19T22:10:00+04:00</published><updated>2013-01-19T22:10:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2013-01-19:/ru/coffeescript-nodejs-dev-server/</id><summary type="html">&lt;p&gt;CoffeeScript - язык программирования, компилируемый в javascript. Используя &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; для разработки на &lt;a href="/tag/nodejs/"&gt;node.js&lt;/a&gt; мы можем избавиться от некоторых, не очень приятных, особенностей javascript.
&lt;img alt="node.js and coffee-script" src="/media/2013/01/nodejs-and-coffeescript.png" title="node.js and coffee-script"/&gt;
Сегодня мы рассмотрим, как автоматизировать процесс компиляции CoffeeScript в javascript. Также настроим автоматическую перезагрузку приложения, после каждой новой компиляции.&lt;/p&gt;
&lt;h1 id="ustanavlivaem-pakety"&gt;Устанавливаем пакеты&lt;/h1&gt;
&lt;p&gt;Для выполнения нашей цели необходимо установить …&lt;/p&gt;</summary><content type="html">&lt;p&gt;CoffeeScript - язык программирования, компилируемый в javascript. Используя &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; для разработки на &lt;a href="/tag/nodejs/"&gt;node.js&lt;/a&gt; мы можем избавиться от некоторых, не очень приятных, особенностей javascript.
&lt;img alt="node.js and coffee-script" src="/media/2013/01/nodejs-and-coffeescript.png" title="node.js and coffee-script"/&gt;
Сегодня мы рассмотрим, как автоматизировать процесс компиляции CoffeeScript в javascript. Также настроим автоматическую перезагрузку приложения, после каждой новой компиляции.&lt;/p&gt;
&lt;h1 id="ustanavlivaem-pakety"&gt;Устанавливаем пакеты&lt;/h1&gt;
&lt;p&gt;Для выполнения нашей цели необходимо установить несколько пакетов:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install coffee-script forever
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Мы установили следующие пакеты&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;coffee-script&lt;/code&gt; - cli-утилита для компиляции CoffeeScript&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forever&lt;/code&gt; - утилита для удобного запуска node.js процессов&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="failovaia-struktura"&gt;Файловая структура&lt;/h1&gt;
&lt;p&gt;Всё приложение (файлы с расширением *.coffee) располагаем в отдельной поддиректории. Для скомпилированных файлов создаём дополнительную поддиректорию в корне проекта. Также важно чтобы временные файлы, файлы загруженные пользователями и т.д. находились в отдельной от приложения поддиректории. Т.е. получаем примерно следующую файловую структуру:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -1
app
compiled
node_modules
package.json
README.md
uploads
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Где,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app/&lt;/code&gt; - приложение (файлы *.coffee)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compiled/&lt;/code&gt; - скопмилированные js файлы&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uploads/&lt;/code&gt; - загрузки пользователей&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="kompiliruem-coffeescript"&gt;Компилируем CoffeeScript&lt;/h1&gt;
&lt;p&gt;Для того чтобы компилировать CoffeeScript в javascript необходимо использовать утилиту &lt;code&gt;coffee&lt;/code&gt;. Она принимает ряд параметров, можете ознакомится с ней подробнее прочитав справочную информацию &lt;code&gt;coffee --help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Утилита &lt;code&gt;coffee&lt;/code&gt; позволяет следить за файловой системой и автоматически перекомпилировать изменённые файлы CoffeeScript. Для этого необходимо вызвать её со следующими параметрами:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; coffee -w -o compiled/ app/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Где, флаг &lt;code&gt;-w&lt;/code&gt; включает режим отслеживания, -o задаёт директорию, в которую сохраняются скомпилированные файлы, а последний параметр определяет целевую директорию приложения.&lt;/p&gt;
&lt;h1 id="nastraivaem-avtomaticheskii-perezapusk-prilozheniia"&gt;Настраиваем автоматический перезапуск приложения&lt;/h1&gt;
&lt;p&gt;Для того чтобы автоматически перезапускать приложения, после перекомпиляции, воспользуемся утилитой &lt;code&gt;forever&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;forever -w --watchDirectory compiled/ --sourceDiDir compiled/ compiled/app.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Рассмотрим параметры:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt; - включаем режим отслеживания&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--watchDirectory&lt;/code&gt; - задаем директорию, изменения в которой необходимо отслеживать&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--sourceDir&lt;/code&gt; - задаем базовую директорию для запускаемого приложения&lt;/li&gt;
&lt;li&gt;и файл который необходимо запустить&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Теперь после каждого изменения в *.coffee файлах приложения будет автоматически запускаться перекомпиляция изменённых файлов. После этого изменения в скомпилированных файлах будет замечено утилитой &lt;code&gt;forever&lt;/code&gt;, что приведет к перезапуску приложения.&lt;/p&gt;</content><category term="coffeescript"></category><category term="forever"></category><category term="node.js"></category></entry><entry><title>Используем npm для управления зависимостями</title><link href="/ru/ispolzuem-npm-dlia-upravleniia-zavisimostiami/" rel="alternate"></link><published>2013-01-04T20:10:00+04:00</published><updated>2013-01-04T20:10:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2013-01-04:/ru/ispolzuem-npm-dlia-upravleniia-zavisimostiami/</id><summary type="html">&lt;p&gt;npm - пакетный менеджер для node.js. Сегодня мы рассмотрим как использовать npm для управления зависимостями и автоматизации деплоймента.&lt;/p&gt;
&lt;p&gt;&lt;img alt="npm package management" src="/media/2013/01/npm.png" title="node packaged modules"/&gt;&lt;/p&gt;
&lt;h1 id="ustanovka-npm"&gt;Установка npm&lt;/h1&gt;
&lt;p&gt;Если у вас не установлен &lt;code&gt;npm&lt;/code&gt;, то сделать это можно выполнив следующую команду:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://npmjs.org/install.sh &lt;span class="p"&gt;|&lt;/span&gt; sh
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="ustanovka-paketov"&gt;Установка пакетов&lt;/h1&gt;
&lt;p&gt;Для того чтобы установить пакет при помощи &lt;code&gt;npm …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;npm - пакетный менеджер для node.js. Сегодня мы рассмотрим как использовать npm для управления зависимостями и автоматизации деплоймента.&lt;/p&gt;
&lt;p&gt;&lt;img alt="npm package management" src="/media/2013/01/npm.png" title="node packaged modules"/&gt;&lt;/p&gt;
&lt;h1 id="ustanovka-npm"&gt;Установка npm&lt;/h1&gt;
&lt;p&gt;Если у вас не установлен &lt;code&gt;npm&lt;/code&gt;, то сделать это можно выполнив следующую команду:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://npmjs.org/install.sh &lt;span class="p"&gt;|&lt;/span&gt; sh
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="ustanovka-paketov"&gt;Установка пакетов&lt;/h1&gt;
&lt;p&gt;Для того чтобы установить пакет при помощи &lt;code&gt;npm&lt;/code&gt; нужно использовать команду &lt;code&gt;npm install &amp;lt;package&amp;gt;&lt;/code&gt;.
Где &lt;code&gt;package&lt;/code&gt; может быть:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Путь к директории содержащей пакет описываемый файлом &lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Архив в формате gzipped tarball&lt;/li&gt;
&lt;li&gt;URL для скачивания архива в формате gzipped tarball&lt;/li&gt;
&lt;li&gt;Название пакета в &lt;a href="https://npmjs.org/" title="Реестр пакетов npm"&gt;реестре пакетов&lt;/a&gt; с возможностью указания версии после знака &lt;code&gt;@&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;URL удаленного репозитория git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;По-умолчания, установка будет произведена локально, в текущую директорию. Для того чтобы выполнить установку глобально
необходимо вызывать &lt;code&gt;npm&lt;/code&gt; с флагом &lt;code&gt;-g&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="upravlenie-zavisimostiami"&gt;Управление зависимостями&lt;/h1&gt;
&lt;p&gt;При разработке приложений на &lt;a href="/tag/nodejs/" title="Node.js"&gt;node.js&lt;/a&gt; я использую множество различных модулей. Соответственно,
при разворачивании приложения необходимо быть уверенным, что в системе установлены все требуемые пакеты. Рассмотрим, как npm
помогает нам решить эту проблему.&lt;/p&gt;
&lt;p&gt;Для описания пакета npm использует файл &lt;code&gt;package.json&lt;/code&gt;, который размещается в корневой директории пакета. В файле содержится
большое количество разной информации о пакете, рекомендую вам ознакомиться с &lt;a href="https://npmjs.org/doc/json.html"&gt;форматом файла&lt;/a&gt;. Нас на данный момент интересует раздел &lt;a href="https://npmjs.org/doc/json.html#dependencies"&gt;dependencies&lt;/a&gt;, который содержит
список пакетов от которых зависит приложение. К счастью вручную заполнять этот список не придётся, т.к npm умеет генерировать
его самостоятельно. Для того, чтобы сгенерировать &lt;code&gt;package.json&lt;/code&gt; выполните команду &lt;code&gt;npm init&lt;/code&gt;, после чего вам необходимо будет ответить на несколько вопросов, вроде названия и версии пакета.&lt;/p&gt;
&lt;p&gt;Для того чтобы установить, содержащийся в &lt;code&gt;package.json&lt;/code&gt;, список пакетов необходимо выполнить команду &lt;code&gt;npm install&lt;/code&gt; без указания дополнительных аргументов. Соответственно, для того чтобы автоматизировать процесс установки зависимостей, нужно
поддерживать список зависимостей в &lt;code&gt;package.json&lt;/code&gt; в актуальном состоянии и при каждом обновлении/разворачивании приложения
выполнять команду &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;</content><category term="npm"></category><category term="package.json"></category></entry><entry><title>Наследование свойств моделей в Mongoose</title><link href="/ru/nasledovanie-svoistv-modelei-v-mongoose/" rel="alternate"></link><published>2013-01-02T02:41:00+04:00</published><updated>2013-01-02T02:41:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2013-01-02:/ru/nasledovanie-svoistv-modelei-v-mongoose/</id><summary type="html">&lt;p&gt;Всех с прошедшим Новым Годом! Сегодня я покажу как наследовать свойства
моделей в &lt;a href="http://mongoosejs.com/" title="Mongoose ODM"&gt;ODM Mongoose&lt;/a&gt;. Для тех, кто не знает mongoose - это 
ODM (object document mapper) для node.js и &lt;a href="http://www.mongodb.org/" title="MongoDB"&gt;MongoDB&lt;/a&gt;. &lt;/p&gt;
&lt;h2 id="primenenie"&gt;Применение&lt;/h2&gt;
&lt;p&gt;Часто бывает необходимо в рамках одной коллекции объектов выделить несколько
типов с некоторыми различиями в наборе свойств. Т …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Всех с прошедшим Новым Годом! Сегодня я покажу как наследовать свойства
моделей в &lt;a href="http://mongoosejs.com/" title="Mongoose ODM"&gt;ODM Mongoose&lt;/a&gt;. Для тех, кто не знает mongoose - это 
ODM (object document mapper) для node.js и &lt;a href="http://www.mongodb.org/" title="MongoDB"&gt;MongoDB&lt;/a&gt;. &lt;/p&gt;
&lt;h2 id="primenenie"&gt;Применение&lt;/h2&gt;
&lt;p&gt;Часто бывает необходимо в рамках одной коллекции объектов выделить несколько
типов с некоторыми различиями в наборе свойств. Т.к. MongoDB реализует schema-less дизайн, 
мы не ограничены базой данных и не обязаны следовать какому-то строгому набору
полей в наших коллекциях. Однако, удобнее использовать ODM, которые реализовывают
дополнительные плюшки, такие как валидация, фильтрация, методы модели и т.д.
Соответственно описание данных на уровне исходного кода модели все же остаётся.
Для того, чтобы решить проблему с типами объектов в рамках одной коллекции можно
наследовать базовые свойства и дополнять их специфическими для каждого типа объектов.&lt;/p&gt;
&lt;p&gt;Рассмотрим простой пример. У нас есть два типа пользователей: юридическое лицо и физическое
лицо. Каждый тип имеет общие и специфические поля. Чтобы выделить общие поля создадим объект
с набором полей, которые встречаются в каждом из типов:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;BaseUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;inn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;inn_validator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email_validator&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;phone_validator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;username_validator&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;password_validator&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Далее для каждого из типов пользователей создаём объект со специфическими полями:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Физическое лицо&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;IndividualPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;first_name_validator&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;valdiate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;last_name_validator&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;patronymic&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;patronymic_validator&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'individual'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Юридическое лицо&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;LegalPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;full_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;full_name_validator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;short_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;short_name_validator&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'legal'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Также мы добавили поле &lt;code&gt;type&lt;/code&gt; для дифференциации записей, т.к. они будут храниться в одной коллекции.
Далее необходимо просто при создании схемы модели выполнять слияние (merge) значений из &lt;code&gt;BaseUser&lt;/code&gt; и
соответствующего объекта типа:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;IndividualUserSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BaseUser&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;IndividualPerson&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;LegalUserSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BaseUser&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LegalPerson&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Здесь я использую &lt;a href="http://sugarjs.com/" title="Sugar.js"&gt;sugar.js&lt;/a&gt;, но при необходимости это можно реализовать
и вручную.&lt;/p&gt;
&lt;p&gt;Затем модели необходимо создавать таким образом, чтобы они использовали одну и ту же коллекцию в базе данных:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LegalUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'LegalUser'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LegalUserSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IndividualUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'IndividualUser'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IndividualUserSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zakliuchenie"&gt;Заключение&lt;/h2&gt;
&lt;p&gt;В итоге мы получили две модели со своими наборами полей/валидаторов и при этом остались
преимущества использования одной коллекции - поиск записей по одной коллекции, уникальные
значения &lt;code&gt;username&lt;/code&gt; и &lt;code&gt;email&lt;/code&gt; через индексы и т.д.
При желании можно реализовать что-то вроде фабрики, чтобы при поиске в зависимости от значения
в поле &lt;code&gt;type&lt;/code&gt; создавался объект соответствующей модели.&lt;/p&gt;</content><category term="mongoose"></category><category term="mongodb"></category><category term="node.js"></category><category term="sugar.js"></category></entry><entry><title>Настраиваем dev-сервер для удобной разработки на django</title><link href="/ru/nastraivaem-dev-server-dlia-udobnoi-razrabotki-na-django/" rel="alternate"></link><published>2012-12-22T22:55:00+04:00</published><updated>2012-12-22T22:55:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2012-12-22:/ru/nastraivaem-dev-server-dlia-udobnoi-razrabotki-na-django/</id><summary type="html">&lt;p&gt;При разработке не хочется тратить время, которого и так не хватает, на
рутинные действия. После каждой отправки изменений в репозиторий,
необходимо выполнить обновление кода на dev-сервере, применить миграции
и тд. Сегодня мы рассмотрим, как быстро настроить автоматический deploy
django-приложения на dev-сервер. Я рассмотрю максимально простое
решение, которое подойдет для небольших …&lt;/p&gt;</summary><content type="html">&lt;p&gt;При разработке не хочется тратить время, которого и так не хватает, на
рутинные действия. После каждой отправки изменений в репозиторий,
необходимо выполнить обновление кода на dev-сервере, применить миграции
и тд. Сегодня мы рассмотрим, как быстро настроить автоматический deploy
django-приложения на dev-сервер. Я рассмотрю максимально простое
решение, которое подойдет для небольших проектов.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/media/2012/12/FotoFlexer_Photo.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="trebovaniia-k-protsessu"&gt;Требования к процессу&lt;/h2&gt;
&lt;p&gt;Итак, давайте определимся какие именно действия необходимо
автоматизировать:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;подгрузка изменений из репозитория&lt;/li&gt;
&lt;li&gt;Установка зависимостей&lt;/li&gt;
&lt;li&gt;Применение миграций&lt;/li&gt;
&lt;li&gt;Перезагрузка web-сервера&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="post-receive-hooks"&gt;Post-Receive Hooks&lt;/h2&gt;
&lt;p&gt;Необходимо каким-то образом отлавливать событие, когда пользователь
выполняет git push и запускать git pull на dev-сервере. Чаще всего я
использую github в качестве хостинга для git-репозиториев. Github
предоставляет возможность отправки POST-запроса на удаленный сервер,
после того как был получен push-запрос. Для этого необходимо прописать
url в настройках репозитория:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/post-receive-hooks"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://confluence.atlassian.com/display/BITBUCKET/POST+Service+Management"&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="obrabotchik-zaprosov"&gt;Обработчик запросов&lt;/h3&gt;
&lt;p&gt;Как настроить отправку запросов мы узнали, теперь необходимо реализовать
обработчик запросов. Можно обрабатывать запросы в самом приложении или
отдельно, вот небольшой пример на node.js:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'child_process'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'text/plain'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/path/to/project/deploy.sh'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'0.0.0.0'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Git monitor server is running at 0.0.0.0:8000'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Здесь, при поступлении любого запроса, просто выполняется bash скрипт.
При желании можно добавить дополнительные действия, например логировать
запросы или добавить валидацию, чтобы запрос мог поступать только с
определенных серверов.&lt;/p&gt;
&lt;p&gt;Далее просто нужно добавить адрес, на котором весит наш демон, в
настройках github/bitbucket.&lt;/p&gt;
&lt;h2 id="primeniaem-izmeneniia_1"&gt;Применяем изменения&lt;/h2&gt;
&lt;p&gt;В обработчике запросов мы выполняем bash скрипт. Рассмотрим пример того,
что может содержать такой скрипт:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/project/dir
&lt;span class="c1"&gt;# update code&lt;/span&gt;
git pull
&lt;span class="c1"&gt;# activate virtualenv&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ../bin/activate
&lt;span class="c1"&gt;# install new packages with pip&lt;/span&gt;
pip install -r ./requirements.txt
&lt;span class="c1"&gt;# Sync db changes&lt;/span&gt;
app/manage.py syncdb
app/manage.py migrate --all --merge
&lt;span class="c1"&gt;# kill runserver&lt;/span&gt;
killall python
nohup app/manage.py 
runserver &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:9000 &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Итак, что здесь происходит:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Переходим в директорию проекта&lt;/li&gt;
&lt;li&gt;Выполняем загрузку изменений с репозитория&lt;/li&gt;
&lt;li&gt;Активируем virtualenv (я надеюсь вы его используете :))&lt;/li&gt;
&lt;li&gt;Устанавливаем новые пакеты&lt;/li&gt;
&lt;li&gt;Применяем миграции south&lt;/li&gt;
&lt;li&gt;Перезапускаем web-сервер&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Здесь все достаточно просто, рассмотрим только как осуществляется
управление пакетами. При установке нового пакета необходимо добавить его
в текстовый файл. Создать такой файл можно автоматически при помощи
следующей команды:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Данная команда сформирует список всех установленных пакетов и также
укажет их версии. Вот пример сгенерированного файла:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Django==1.4.2
PIL==1.1.7
South==0.7.6
argparse==1.2.1
lxml==3.0.1
....
mongoengine==0.7.5
psycopg2==2.4.5
pymongo==2.3
python-dateutil==2.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;При выполнении нашего bash-скрипта будет вызвана команда:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r ./requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Это приведет к установке всех пакетов, из списка в файле, которые ещё
небыли установлены.&lt;/p&gt;
&lt;p&gt;Конечно, в зависимости от ваших потребностей, могут понадобится
дополнительные действия, например трансляция CoffeeScript, Compass или
выполнение тестов. Добавить новые команды в скрипт, я думаю, не составит
трудностей :)&lt;/p&gt;
&lt;h2 id="nastroika-nginx"&gt;Настройка Nginx&lt;/h2&gt;
&lt;p&gt;Для того, чтобы перенаправлять запросы с 80 порта на runserver я
использую nginx (ну не запускать же runserver от root'а :)). Пример
конфигурации nginx:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;worker_processes&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;pid&lt;/span&gt; &lt;span class="s"&gt;/var/run/nginx.pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;worker_connections&lt;/span&gt; &lt;span class="mi"&gt;768&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;##&lt;/span&gt;
    &lt;span class="c1"&gt;# Basic Settings&lt;/span&gt;
    &lt;span class="c1"&gt;##&lt;/span&gt;

    &lt;span class="kn"&gt;sendfile&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;tcp_nopush&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;tcp_nodelay&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;keepalive_timeout&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;types_hash_max_size&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;default_type&lt;/span&gt; &lt;span class="s"&gt;application/octet-stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;##&lt;/span&gt;
    &lt;span class="c1"&gt;# Logging Settings&lt;/span&gt;
    &lt;span class="c1"&gt;##&lt;/span&gt;

    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;error_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;##&lt;/span&gt;
    &lt;span class="c1"&gt;# Proxy Settings&lt;/span&gt;
    &lt;span class="c1"&gt;##&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;*:80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_pass&lt;/span&gt;  &lt;span class="s"&gt;http://localhost:9000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt;    &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;На этом все, пишите в комментариях, если я что-то упустил.&lt;/p&gt;</content><category term="bitbucket"></category><category term="django"></category><category term="git"></category><category term="github"></category><category term="nginx"></category><category term="nodejs"></category><category term="pip"></category><category term="python"></category><category term="south"></category></entry><entry><title>Python 2.7 в Debian 6 Squeeze</title><link href="/ru/python-27-v-debian-6-squeeze/" rel="alternate"></link><published>2012-07-22T09:26:00+04:00</published><updated>2012-07-22T09:26:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2012-07-22:/ru/python-27-v-debian-6-squeeze/</id><summary type="html">&lt;p&gt;&lt;img alt="python logo" src="/media/2012/07/python-logo-master-v3-TM.png" title="python logo"/&gt;&lt;/p&gt;
&lt;p&gt;Приветствую! На данный момент в stable репозитарии Debian squeeze лежит
python 2.6.6. Однако, последней (на момент написания поста) стабильной
версией ветки 2.x является 2.7.3. Далее рассмотрим, как установить
несколько версий python и использовать их независимо.&lt;/p&gt;
&lt;h2 id="ustanavlivaem-python-273"&gt;Устанавливаем Python 2.7.3&lt;/h2&gt;
&lt;p&gt;Скомпилируем python 2.7.3 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="python logo" src="/media/2012/07/python-logo-master-v3-TM.png" title="python logo"/&gt;&lt;/p&gt;
&lt;p&gt;Приветствую! На данный момент в stable репозитарии Debian squeeze лежит
python 2.6.6. Однако, последней (на момент написания поста) стабильной
версией ветки 2.x является 2.7.3. Далее рассмотрим, как установить
несколько версий python и использовать их независимо.&lt;/p&gt;
&lt;h2 id="ustanavlivaem-python-273"&gt;Устанавливаем Python 2.7.3&lt;/h2&gt;
&lt;p&gt;Скомпилируем python 2.7.3 из исходников. Стянуть последнюю версию можно
&lt;a href="http://www.python.org/download/releases/"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz
tar xvzf Python-2.7.3.tgz
&lt;span class="nb"&gt;cd&lt;/span&gt; Python-2.7.3
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/python-2.7.3
make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
ln -s /usr/local/python-2.7.3/bin/python2.7 /usr/bin/python2.7.3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После этого можем проверить что все работает:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python2.7.3 
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.3 &lt;span class="o"&gt;(&lt;/span&gt;default, Jul &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;2012&lt;/span&gt;, &lt;span class="m"&gt;10&lt;/span&gt;:05:02&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.4.5&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;"help"&lt;/span&gt;, &lt;span class="s2"&gt;"copyright"&lt;/span&gt;, &lt;span class="s2"&gt;"credits"&lt;/span&gt; or &lt;span class="s2"&gt;"license"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ispolzuem-virtualenv"&gt;Используем virtualenv&lt;/h2&gt;
&lt;p&gt;Для того чтобы обеспечить удобную работу с несколькими версиями python
воспользуемся утилитой virtualenv. Сначала скачиваем скрипт:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /home/dizballanze
mkdir apps
&lt;span class="nb"&gt;cd&lt;/span&gt; apps
wget https://raw.github.com/pypa/virtualenv/master/virtualenv.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь нам нужно выполнить скрипт с использованием нужной версии python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir test_app
&lt;span class="nb"&gt;cd&lt;/span&gt; test_app
python2.7.3 ../virtualenv.py venv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Таким образом мы успешно добавили виртуальное окружение. В текущей
директории должна появится директория с названием venv (второй
параметр). Для того чтобы активировать окружение выполните:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Сразу после этого должна изменится строка ввода в терминале следующим
образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;dizballanze@dizballanze-desktop:~/apps/test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Что означает, что мы находимся в окружении с названием venv. Проверим
версию python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python --version
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Таким образом можно установить любое количество версий Python на одной
машине и при этом использовать их независимо. Более того, активировав
virtualenv все устанавливаемые через pip пакеты будут хранится в
директории с файлами venv и не будут взаимодействовать с другими
проектами, которые находятся в других окружениях.&lt;/p&gt;</content><category term="python"></category><category term="virtualenv"></category></entry><entry><title>Функциональное тестирование Yii приложений с Selenium</title><link href="/ru/funktsionalnoe-testirovanie-yii-prilozhenii-s-selenium/" rel="alternate"></link><published>2012-04-04T02:31:00+04:00</published><updated>2012-04-04T02:31:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2012-04-04:/ru/funktsionalnoe-testirovanie-yii-prilozhenii-s-selenium/</id><summary type="html">&lt;p&gt;&lt;img alt="selenium" src="/media/2012/04/big-logo.png" title="selenium-logo"/&gt;&lt;/p&gt;
&lt;p&gt;В последних проектах активно использую Selenium для функционального
тестирования. В процессе написания тестов столкнулся с несколькими
подводными камнями и в данном посте хочу рассказать о том как с ними
бороться. Я думаю пост будет полезен тем, кто только начал использовать
Selenium, в том числе для тестирования Yii приложений. Итак, поехали …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="selenium" src="/media/2012/04/big-logo.png" title="selenium-logo"/&gt;&lt;/p&gt;
&lt;p&gt;В последних проектах активно использую Selenium для функционального
тестирования. В процессе написания тестов столкнулся с несколькими
подводными камнями и в данном посте хочу рассказать о том как с ними
бороться. Я думаю пост будет полезен тем, кто только начал использовать
Selenium, в том числе для тестирования Yii приложений. Итак, поехали...&lt;/p&gt;
&lt;h2 id="nastraivaem-url-manager"&gt;Настраиваем Url Manager&lt;/h2&gt;
&lt;p&gt;Перед тем как начать написание тестов, нужно настроить приложение. Я
заметил что на старте чаще всего сталкиваются с проблемой формирования
корректных url для того, чтобы тесты работали правильно. Важным здесь
является, то что все запросы должны идти через &lt;code&gt;index-test.php&lt;/code&gt;. Таким
образом мы добиваемся корректной инициализации тестового окружения,
вместо config/main.php подгружается &lt;code&gt;config/test.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Если вы скрыли index.php в url, то нужно снова включить его отображение
для тестового окружения. Для этого добавим в &lt;code&gt;config/test.php&lt;/code&gt; в
components следующие строки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;'urlManager' =&amp;gt; array(&lt;/span&gt;
&lt;span class="x"&gt;    'urlFormat' =&amp;gt; 'path',&lt;/span&gt;
&lt;span class="x"&gt;    'showScriptName' =&amp;gt; true,&lt;/span&gt;
&lt;span class="x"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;При этом стоит отметить, что дублировать здесь все маршруты нет
необходимости, т.к. yii сам корректным образом объединяет тестовые
параметры с "боевыми" и все маршруты описанные в main.php останутся
доступными в тестовом окружении.&lt;/p&gt;
&lt;p&gt;Для получения корректного uri нужно всегда использовать метод
&lt;code&gt;Yii::app()-&amp;gt;createUrl()&lt;/code&gt;. Важно не забывать генерировать uri через
данный метод для задания атрибута action форм, иначе вы рискуете
провести много времени в борьбе с призраками в непонимании почему данные
сохраняются не в тестовую БД, а в боевую.&lt;/p&gt;
&lt;p&gt;В тестах, для того чтобы всегда открывать правильный url, нужно также
пользоваться &lt;code&gt;Yii::app()-&amp;gt;createUrl()&lt;/code&gt;. Например, так:
&lt;code&gt;$this-&amp;gt;open(Yii::app()-&amp;gt;createUrl('/settings'));&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="element-locators"&gt;Element locators&lt;/h2&gt;
&lt;p&gt;Практически во всех методах, которые предоставляет selenium api, первым
аргументом принимается locator - строка, которая позволяет указать
элемент DOM дерева с которым будет работать метод. Рассмотрим виды:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id=:id&lt;/code&gt; - выбираем атрибут с элементом id равным заданному
    значению. Например: &lt;code&gt;$this-&amp;gt;submitAndWait('id=reg-form');&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link=:textPattern&lt;/code&gt; - выбираем ссылку с заданным текстом. Например:
    &lt;code&gt;$this-&amp;gt;clickAndWait('link=Войти');&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;css=cssSelectorSyntax&lt;/code&gt; - часто, наиболее удобный способ. Будет
    знаком всем, кто любит jquery. Например:
    &lt;code&gt;$this-&amp;gt;assertElementContainsText('css=.sidebar-menu .sidebar-menu-sub sup', 'some text');&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для того чтобы &lt;em&gt;проверить значение атрибута элемента&lt;/em&gt;, нужно добавить к
locator название атрибута после знака @, например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;assertAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'css=.sidebar-fb-list li:eq(0) img@alt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="sozdanie-skrinshotov"&gt;Создание скриншотов&lt;/h2&gt;
&lt;p&gt;Часто после каких-то значительных изменений падает много тестов, т.к.
скорость их выполнения не радует для облегчения отладки можно настроить
selenium на создание скриншотов, после того как тест падает. Для этого
достаточно добавить следующие строки в метод &lt;code&gt;WebTestCase::setUp():&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="c1"&gt;// директория в которую будут сохранятся &lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;screenshotPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/var/www/report/'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Url, по которому доступна директория указанная в предыдущей строке&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;screenshotUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://localhost/report"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Включаем создание скриншотов&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;captureScreenshotOnFailure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После этого скриншоты будут сохранятся в указанную директорию, а в
терминале будет выводится ссылка, через которую можно будет быстро
открыть определенный скриншот. Скриншоты можно создавать только в
firefox, к сожалению webkit пока не поддерживается.&lt;/p&gt;
&lt;h2 id="vypolnenie-javascript"&gt;Выполнение javascript&lt;/h2&gt;
&lt;p&gt;Хотя Selenium и дает казалось бы все нужные средства для работы с
браузером, но иногда его возможностей не хватает. В таких случаях можно
подключить всю мощь клиентского javascript к нашим тестам. Например,
так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$items_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getEval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'selenium.browserbot.getCurrentWindow().jQuery(".item").size()'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;PER_PAGE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$items_count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="izbavliaemsia-ot-poiavliaiushchikhsia-okon-brauzera"&gt;Избавляемся от появляющихся окон браузера&lt;/h2&gt;
&lt;p&gt;Для того чтобы избавится от надоедливых всплывающих окон браузера в
linux можно использовать утилиту Xvfb. В интернете можно найти &lt;a href="http://goo.gl/gmkj2"&gt;много
подробных руководств&lt;/a&gt; на эту тему.&lt;/p&gt;
&lt;h2 id="ozhidanie-vypolneniia-ajax-zaprosov"&gt;Ожидание выполнения ajax-запросов&lt;/h2&gt;
&lt;p&gt;Если ваше приложение использует ajax, значит после инициации запроса,
необходимо подождать его завершения, чтобы проверить, например,
изменение какого-то блока на странице. Для этого добавим в класс
WebTestCase метод:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;waitForAjax&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;waitForCondition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'selenium.browserbot.getCurrentWindow().jQuery.active == 0'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Естественно, что данное решение будет работать, только если вы
используете jquery, но для других фреймворков, я думаю, не составит
труда найти аналогичное решение. Пример использования:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id=field'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'css=#ajax-form input[type="submit"]'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;waitForAjax&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;verifyElementPresent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id=result-block '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="boremsia-s-dublirovaniem-koda"&gt;Боремся с дублированием кода&lt;/h2&gt;
&lt;p&gt;Часто будут встречаться повторяющиеся операции, например, аутентификация
пользователя. Для того чтобы избежать дублирования, можно просто вынести
общие для нескольких тестов алгоритмы в родительский класс
(WebTestCase). Наример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Yii&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;createUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'first_user'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id=f_username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id=f_password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'111111'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;submitAndWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id=login-form'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="avtodopolnenie"&gt;Автодополнение&lt;/h2&gt;
&lt;p&gt;У меня автодополнение кода для методов selenium api работает не совсем
корректно. Присутствуют не все методы, а те что присутствуют с
некорректными аргументами. Для того чтобы было удобнее работать я
добавил описание наиболее часто используемых мной методов в описание
WebTestCase. В будущем планирую описать все методы, которые доступны и
выложить здесь в блоге. Вот некоторые методы, может кому-то пригодится:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt; * @method assertTextPresent($pattern)&lt;/span&gt;
&lt;span class="sd"&gt; * @method assertTextNotPresent($pattern)&lt;/span&gt;
&lt;span class="sd"&gt; * @method assertText($locator, $pattern)&lt;/span&gt;
&lt;span class="sd"&gt; * @method assertNotText($locator, $pattern)&lt;/span&gt;
&lt;span class="sd"&gt; * @method assertTitle($pattern)&lt;/span&gt;
&lt;span class="sd"&gt; * @method assertNotTitle($pattern)&lt;/span&gt;
&lt;span class="sd"&gt; * @method verifyElementPresent($locator)&lt;/span&gt;
&lt;span class="sd"&gt; * @method verifyElementNotPresent($locator)&lt;/span&gt;
&lt;span class="sd"&gt; * @method assertVisible($locator)&lt;/span&gt;
&lt;span class="sd"&gt; * @method assertNotVisible($locator)&lt;/span&gt;
&lt;span class="sd"&gt; * @method assertAttribute ($attributeLocator, $pattern)&lt;/span&gt;
&lt;span class="sd"&gt; */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ps"&gt;P.S.&lt;/h2&gt;
&lt;p&gt;Для того чтобы ознакомится со всеми возможностями selenium api,
рекомендую прочитать следующий док - &lt;a href="http://release.seleniumhq.org/selenium-core/1.0.1/reference.html"&gt;selenium reference&lt;/a&gt;. Если есть
какие-то вопросы-дополнения-etc пишите в комментарии, постараюсь
ответить.&lt;/p&gt;</content><category term="functional testing"></category><category term="selenium"></category><category term="testing"></category><category term="yii"></category></entry><entry><title>Используем ab для тестирования производительности web-приложения</title><link href="/ru/ispolzuem-ab-dlia-testirovaniia-proizvoditelnosti-web-prilozheniia/" rel="alternate"></link><published>2012-03-14T01:27:00+04:00</published><updated>2012-03-14T01:27:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2012-03-14:/ru/ispolzuem-ab-dlia-testirovaniia-proizvoditelnosti-web-prilozheniia/</id><summary type="html">&lt;p&gt;Важной частью разработки web-приложения является тестирование
производительности. Часто при постановке задачи заказчик требует чтобы
сервис выдерживал определенную нагрузку. В процессе профилирования и
оптимизации полезно отслеживать, как изменилась скорость работы
приложения при новых условиях. Для этой цели можно использовать Apache
HTTP server benchmarking tool.&lt;/p&gt;
&lt;h2 id="ispolzovanie-ab"&gt;Использование ab&lt;/h2&gt;
&lt;h3 id="ustanovka"&gt;Установка&lt;/h3&gt;
&lt;p&gt;Для того чтобы установить …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Важной частью разработки web-приложения является тестирование
производительности. Часто при постановке задачи заказчик требует чтобы
сервис выдерживал определенную нагрузку. В процессе профилирования и
оптимизации полезно отслеживать, как изменилась скорость работы
приложения при новых условиях. Для этой цели можно использовать Apache
HTTP server benchmarking tool.&lt;/p&gt;
&lt;h2 id="ispolzovanie-ab"&gt;Использование ab&lt;/h2&gt;
&lt;h3 id="ustanovka"&gt;Установка&lt;/h3&gt;
&lt;p&gt;Для того чтобы установить ab в debian необходимо установить пакет
apache2-utils:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install apache2-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="parametry"&gt;Параметры&lt;/h3&gt;
&lt;p&gt;Утилита запускается с помощью команды ab. Далее рассмотрим основные
параметры.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-c&lt;/strong&gt; - очень важный параметр. Определяет количество параллельных
    запросов отправляемых одновременно&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-n&lt;/strong&gt; - количество отправляемых запросов&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-t&lt;/strong&gt; - максимальное количество секунд отведенное на тест. Подходит
    для тестирования приложения в течении определенного временного
    промежутка. При этому необходимо задать большое значение параметру
    -n&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-C&lt;/strong&gt; cookie-name=value - добавляем cookie в каждый запрос к
    серверу&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-H&lt;/strong&gt; - задаем заголовок запроса&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-T&lt;/strong&gt; - Content-type заголовок запроса&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-p&lt;/strong&gt; - файл содержащий тело POST запроса&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Выполнение теста&lt;/p&gt;
&lt;p&gt;Давайте выполним тестирование какого-либо сайта и рассмотрим содержание
отчета, который генерирует ab.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ab -c &lt;span class="m"&gt;10&lt;/span&gt; -n &lt;span class="m"&gt;100&lt;/span&gt; http://google.com/
Benchmarking google.com &lt;span class="o"&gt;(&lt;/span&gt;be patient&lt;span class="o"&gt;)&lt;/span&gt;.....done


Server Software:        gws
Server Hostname:        google.com
Server Port:            &lt;span class="m"&gt;80&lt;/span&gt;

Document Path:          /
Document Length:        &lt;span class="m"&gt;219&lt;/span&gt; bytes

Concurrency Level:      &lt;span class="m"&gt;10&lt;/span&gt;
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   &lt;span class="m"&gt;1&lt;/span&gt;.290 seconds
Complete requests:      &lt;span class="m"&gt;100&lt;/span&gt;
Failed requests:        &lt;span class="m"&gt;0&lt;/span&gt;
Write errors:           &lt;span class="m"&gt;0&lt;/span&gt;
Non-2xx responses:      &lt;span class="m"&gt;100&lt;/span&gt;
Total transferred:      &lt;span class="m"&gt;54000&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;21900&lt;/span&gt; bytes
Requests per second:    &lt;span class="m"&gt;77&lt;/span&gt;.51 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       &lt;span class="m"&gt;129&lt;/span&gt;.018 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       &lt;span class="m"&gt;12&lt;/span&gt;.902 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          &lt;span class="m"&gt;40&lt;/span&gt;.87 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:       &lt;span class="m"&gt;54&lt;/span&gt;   &lt;span class="m"&gt;56&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt;.0     &lt;span class="m"&gt;55&lt;/span&gt;      &lt;span class="m"&gt;63&lt;/span&gt;
Processing:    &lt;span class="m"&gt;70&lt;/span&gt;   &lt;span class="m"&gt;72&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt;.4     &lt;span class="m"&gt;72&lt;/span&gt;      &lt;span class="m"&gt;82&lt;/span&gt;
Waiting:       &lt;span class="m"&gt;70&lt;/span&gt;   &lt;span class="m"&gt;72&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt;.3     &lt;span class="m"&gt;72&lt;/span&gt;      &lt;span class="m"&gt;82&lt;/span&gt;
Total:        &lt;span class="m"&gt;124&lt;/span&gt;  &lt;span class="m"&gt;128&lt;/span&gt;   &lt;span class="m"&gt;3&lt;/span&gt;.4    &lt;span class="m"&gt;127&lt;/span&gt;     &lt;span class="m"&gt;140&lt;/span&gt;

Percentage of the requests served within a certain &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="m"&gt;50&lt;/span&gt;%    &lt;span class="m"&gt;127&lt;/span&gt;
  &lt;span class="m"&gt;66&lt;/span&gt;%    &lt;span class="m"&gt;128&lt;/span&gt;
  &lt;span class="m"&gt;75&lt;/span&gt;%    &lt;span class="m"&gt;129&lt;/span&gt;
  &lt;span class="m"&gt;80&lt;/span&gt;%    &lt;span class="m"&gt;130&lt;/span&gt;
  &lt;span class="m"&gt;90&lt;/span&gt;%    &lt;span class="m"&gt;133&lt;/span&gt;
  &lt;span class="m"&gt;95&lt;/span&gt;%    &lt;span class="m"&gt;134&lt;/span&gt;
  &lt;span class="m"&gt;98&lt;/span&gt;%    &lt;span class="m"&gt;138&lt;/span&gt;
  &lt;span class="m"&gt;99&lt;/span&gt;%    &lt;span class="m"&gt;140&lt;/span&gt;
 &lt;span class="m"&gt;100&lt;/span&gt;%    &lt;span class="m"&gt;140&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;longest request&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Сначала выводится различная информация о проводимом тесте, такая как
типа серверного ПО, хост, порт, путь и тд. Дальше идут более интересные
характеристики. Рассмотрим наиболее важные из них:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Time taken for tests&lt;/strong&gt; - суммарное время потраченное на весь тест&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complete requests&lt;/strong&gt; - количество выполненных запросов&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failed requests&lt;/strong&gt; - количество запросов завершенных отказом&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Total transferred и HTML transferred&lt;/strong&gt; - суммарный объем и объем
    html переданные во время теста&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Requests per second&lt;/strong&gt; или &lt;strong&gt;rps&lt;/strong&gt; - количество обрабатываемых
    запросов в секунду&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time per request&lt;/strong&gt; - среднее время затраченное на запрос с и без
    учета распараллеливания&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transfer rate&lt;/strong&gt; - скорость передачи данных при прохождении теста&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Далее идет таблица с временем затраченным на подключение, обработку
запроса и ожидание. И после этого таблица которая показывает процент от
количества запросов, которые успели выполнится за определенный
промежуток времени.&lt;/p&gt;
&lt;h2 id="prakticheskoe-primenenie_1"&gt;Практическое применение&lt;/h2&gt;
&lt;p&gt;В зависимости от поставленных перед вами задач необходимо задавать
различные параметры при запуске теста. Рассмотрим несколько примеров.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Нагрузочное тестирование&lt;/strong&gt;. Тестирование системы при заданной
    нагрузке. Здесь все просто - указываем заданные значения для
    параметров -n и -c и запускаем тест. В результате необходимо
    выяснить загруженность аппаратной части приложения, надёжность
    работы (количество отказов за заданное время).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Стресс-тестирование&lt;/strong&gt;. Определение максимальной нагрузки при
    которой сервер остается работоспособным, а также выявление
    последствий нагрузки превышающей ожидаемую. В данном случае вам
    необходимо выполнить несколько итераций запуска тестов, постепенно
    наращивая количество параллельных запросов и количество пакетов.
    Данный цикл необходимо продолжать пока вы не начнете получать
    значительный для вас процент отказов (или не положите сервер ;)).
    Наиболее важными, на мой взгляд, в данном случае являются такие
    показатели, как количество запросов в секунду и время потраченное на
    1 запрос, а также процент отказов.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Тестирование стабильности&lt;/strong&gt;. При данном виде тестирования мы
    производим длительный тест (время задаем при помощи параметра -t, а
    количество запросов -n очень большое) и смотрим количество отказов
    системы. Также полезным будет ознакомится с "разбросом" времени
    обработки запроса, для того чтобы выяснить не ухудшается ли
    производительность со временем. Данное значение можно получить из
    таблицы Connection Times.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dopolnitelno-primer-vypolneniia-post-zaprosa-v-ab"&gt;Дополнительно. Пример выполнения POST-запроса в ab&lt;/h2&gt;
&lt;p&gt;Для выполнения POST-запроса необходимо составить тело запроса и
сохранить его в файл. Для этого напишем небольшой скрипт:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test1'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'test2'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Second test'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;http_build_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/tmp/body'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После этого в файле /tmp/body появится следующее содержимое:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test1=1&amp;amp;test2=Second+test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь можно запускать тестирование:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ab -T application/x-www-form-urlencoded -p /tmp/body -n &lt;span class="m"&gt;10&lt;/span&gt; http://localhost/test/ab/post-handler.php
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="vyvod"&gt;Вывод&lt;/h2&gt;
&lt;p&gt;Apache HTTP server benchmarking tool - полезный инструмент
web-разработчика, который позволяет максимально быстро произвести
тестирование производительности той или иной части приложения. Он
отлично подходит для тестирования критических участков и является
незаменимым при профилировании и оптимизации web-приложения. Однако для
тестирования нескольких функций с учетом различных сценариев и
моделирования действий пользователя, необходимо использовать более
сложные системы тестирования.&lt;/p&gt;
&lt;h3 id="update-1"&gt;UPDATE #1&lt;/h3&gt;
&lt;p&gt;Полезное дополнение от товарища:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ApacheBenchmark выдает много Failed. Сначала было стремно, но все
оказалось не так страшно :) [#apache][]
&lt;a href="http://t.co/tZSKksDl" title="http://stackoverflow.com/questions/579450/load-testing-with-ab-fake-failed-requests-length"&gt;stackoverflow.com/questions/5794&amp;hellip;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;mdash; Pugach Vitaliy (@lionasp) &lt;a href="https://twitter.com/lionasp/status/180726351786020865"&gt;March 16, 2012&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="ab"></category><category term="benchmark"></category><category term="оптимизация"></category><category term="профилирование"></category></entry><entry><title>Yii + Selenium на debian 6</title><link href="/ru/yii-selenium-na-debian-6/" rel="alternate"></link><published>2012-03-08T23:07:00+04:00</published><updated>2012-03-08T23:07:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2012-03-08:/ru/yii-selenium-na-debian-6/</id><summary type="html">&lt;p&gt;Для функционального тестирования в Yii используется Selenium. На debian
и ubuntu при запуске тестов выдается ошибка:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Result is neither "true" nor "false": 'OR Server Exception: sessionId led to start new browser session: Browser not supported
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В попытках решить данную проблему были испробованы чуть меньше чем все
версии selenium и огромное …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Для функционального тестирования в Yii используется Selenium. На debian
и ubuntu при запуске тестов выдается ошибка:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Result is neither "true" nor "false": 'OR Server Exception: sessionId led to start new browser session: Browser not supported
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В попытках решить данную проблему были испробованы чуть меньше чем все
версии selenium и огромное количество браузеров. Однако что бы я не
делал результата это не давало. Как оказалось selenium не получает
настройки от yii (protected/tests/phpunit.xml) и по-этому не знает какой
браузер использовать. Для решения этой проблемы я установил браузер
по-умолчанию при запуске selenium'а следующим образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;:0 java -jar selenium-server-standalone-2.20.0.jar -forcedBrowserMode &lt;span class="s2"&gt;"*googlechrome"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После этого все заработало, но очевидно только в том браузере который
указан параметром forcedBrowserMode. Мне таким образом удалось запустить
firefox и google chrome последних версий, на selenium rc 1.0.3 и
selenium sever 2.20&lt;/p&gt;
&lt;p&gt;Если вы знаете как решить данную проблему без указания стандартного
браузера, поделитесь в комментариях, буду признателен :)&lt;/p&gt;
&lt;h3 id="update-1"&gt;UPDATE #1&lt;/h3&gt;
&lt;p&gt;Возможно проблемы в текущей версии PHPUnit_Selenium&lt;/p&gt;
&lt;h3 id="update-2"&gt;UPDATE #2&lt;/h3&gt;
&lt;p&gt;Проблема решается обновление PHPUnit с &lt;a href="https://github.com/sebastianbergmann/phpunit/"&gt;GitHub'а&lt;/a&gt;.&lt;/p&gt;</content><category term="selenium"></category><category term="yii"></category><category term="магия"></category></entry><entry><title>Codeception проблема с русскими символами в utf-8</title><link href="/ru/codeception-problema-s-russkimi-simvolami-v-utf-8/" rel="alternate"></link><published>2012-02-29T13:57:00+04:00</published><updated>2012-02-29T13:57:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2012-02-29:/ru/codeception-problema-s-russkimi-simvolami-v-utf-8/</id><summary type="html">&lt;p&gt;Разбираюсь с &lt;a href="http://codeception.com/"&gt;codeception&lt;/a&gt;. В acceptance тестах возникла проблема с
распознаванием русских символов в utf-8:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$I&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebGuy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$scenario&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$I&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;wantTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'see right title'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$I&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;amOnPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$I&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;see&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Заголовок на русском'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;При этом тест фейлится, хотя логах можно увидеть, что заголовок
установлен правильно. Для решения этой проблемы необходимо установить
следующий …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Разбираюсь с &lt;a href="http://codeception.com/"&gt;codeception&lt;/a&gt;. В acceptance тестах возникла проблема с
распознаванием русских символов в utf-8:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$I&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebGuy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$scenario&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$I&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;wantTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'see right title'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$I&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;amOnPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$I&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;see&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Заголовок на русском'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;При этом тест фейлится, хотя логах можно увидеть, что заголовок
установлен правильно. Для решения этой проблемы необходимо установить
следующий meta-тэг:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text/html; charset=utf-8"&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Только после этого у меня получилось заставить тест показать зелёный
цвет. Другие способы установки кодировки не сработали (ни через php, ни
через apache), хотя при просмотре заголовков кодировка была установлена
в utf-8. Видимо это какая-то особенность Goutte Web Scrapper'а, который
используется в модуле PHPBrowser.&lt;/p&gt;</content><category term="acceptance"></category><category term="codeception"></category><category term="testing"></category><category term="utf-8"></category></entry><entry><title>Ускоряем обработку изображений</title><link href="/ru/uskoriaem-obrabotku-izobrazhenii/" rel="alternate"></link><published>2012-02-24T00:07:00+04:00</published><updated>2012-02-24T00:07:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2012-02-24:/ru/uskoriaem-obrabotku-izobrazhenii/</id><summary type="html">&lt;p&gt;Всем привет! Сегодняшний пост посвящен производительности при обработке
изображений. Почти в каждом проекте требуется обработка изображений,
например, ресайзинг, поворот, обесцвечивание и т.д. Для этих целей я
использовал широко известное решение, написанное на php и работающее с
расширением GD - &lt;a href="http://www.verot.net/php_class_upload.htm"&gt;class.upload.php&lt;/a&gt;. До тех пор пока в проектах в
основном …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Всем привет! Сегодняшний пост посвящен производительности при обработке
изображений. Почти в каждом проекте требуется обработка изображений,
например, ресайзинг, поворот, обесцвечивание и т.д. Для этих целей я
использовал широко известное решение, написанное на php и работающее с
расширением GD - &lt;a href="http://www.verot.net/php_class_upload.htm"&gt;class.upload.php&lt;/a&gt;. До тех пор пока в проектах в
основном изображения загружались через админку меня это решение
полностью устраивало. Но в одном из последних проектов изображения
являются одним из главных видов контента и загружаются пользователями в
больших объемах. При профилировании я заметил что процесс ресайзинга и
обработки изображений занимает очень много времени. Особенно это
бросалось в глаза при использовании функции "повернуть изображение",
которая должна делать ajax-запрос и отображать повернутое изображение
пользователю. При достаточно большом разрешении изображения скрипт падал
по timeout не успев вложиться в 30 с в других случаях была очень большая
задержка. Далее я опишу каким образом была решена данная проблема и
предоставлю несколько результатов тестов для сравнения.&lt;/p&gt;
&lt;h2 id="vybor-instrumenta"&gt;Выбор инструмента&lt;/h2&gt;
&lt;p&gt;Очевидным решением было перенести данный функционал на консольную
утилиту. Мой выбор пал на &lt;strong&gt;GraphicsMagick&lt;/strong&gt;, т.к. данная утилита
реализует все необходимые мне функции и при этом достаточно проста в
использовании и хорошо документирована. Для установки в debian
необходимо выполнить:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install graphicsmagick
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Запуск выполняется при помощи команды &lt;strong&gt;gm&lt;/strong&gt;. Рассмотрим несколько
примеров использования.&lt;/p&gt;
&lt;h3 id="konvertirovanie-izobrazhenii"&gt;Конвертирование изображений.&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gm convert -quality &lt;span class="m"&gt;80&lt;/span&gt; input.png output.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Утилита выполнит конвертирование файла input.png в формат jpeg и
сохранит как output.jpg. При помощи опции -quality выставляем качество
выходного изображения в стандартной для jpeg форме.&lt;/p&gt;
&lt;h3 id="resaizing"&gt;Ресайзинг&lt;/h3&gt;
&lt;p&gt;Ресайзинг с установленной шириной (300px) и автоматически выбранной
высотой с сохранением соотношения сторон:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gm convert -resize &lt;span class="m"&gt;300&lt;/span&gt; input.jpg output.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ресайзинг с установленной высотой (200px) и автоматически выбранной
шириной:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gm convert -resize x200 input.jpg output.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ресайзинг без сохранения пропорций:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gm convert -resize 300x200! input.jpg output.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ресайзинг с сохранением пропорций и вписыванием в заданный размер по
большей стороне:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gm convert -resize 300x200 input.jpg output.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ресайзинг с сохранением пропорций и вписыванием в заданный размер по
меньшей стороне:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gm convert -resize 300x200^ input.jpg output.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ресайзинг с сохранением пропорций, вписыванием по меньшей стороне и
обрезкой лишнего с центированием:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gm convert -resize 200x300^ -gravity center -crop 200x300+0+0 input.jpg output.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="povorot"&gt;Поворот&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gm convert -rotate &lt;span class="m"&gt;90&lt;/span&gt; input.jpg output.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Поворачиваем изображение на 90 градусов. Также можно задавать
отрицательные значения, чтобы поворачивать против часовой стрелки.&lt;/p&gt;
&lt;p&gt;Параметры можно комбинировать, что значительно упрощает выполнение
сложных операций&lt;/p&gt;
&lt;h2 id="benchmark_1"&gt;Бенчмарк&lt;/h2&gt;
&lt;p&gt;Теперь, как и обещал, немного цифр. Сравним производительность php
решения (class.upload.php) и утилиты GraphicsMagick.&lt;/p&gt;
&lt;h3 id="konvertirovanie-izobrazhenii_1"&gt;Конвертирование изображений&lt;/h3&gt;
&lt;p&gt;Конвертируем 40 Mb изображение из png в jpeg.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th align="left"&gt;Время (с)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;upload.class.php&lt;/td&gt;
&lt;td align="left"&gt;97.150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;GraphicsMagick&lt;/td&gt;
&lt;td align="left"&gt;3.304&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="rotatsiia-izobrazhenii"&gt;Ротация изображений&lt;/h3&gt;
&lt;p&gt;Поворачиваем изображение (jpeg файл 6.4 Mb) на 90 градусов.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th align="left"&gt;Время (с)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;upload.class.php&lt;/td&gt;
&lt;td align="left"&gt;162.750&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;GraphicsMagick&lt;/td&gt;
&lt;td align="left"&gt;2.6597&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="narezka-thumbnails"&gt;Нарезка thumbnails&lt;/h3&gt;
&lt;p&gt;Нарезка 5 thumbnails различной конфигурации из jpeg файла 6.4 Mb.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th align="left"&gt;Время (с)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;upload.class.php&lt;/td&gt;
&lt;td align="left"&gt;12.010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;GraphicsMagick&lt;/td&gt;
&lt;td align="left"&gt;4.594&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="vyvody_1"&gt;Выводы&lt;/h2&gt;
&lt;p&gt;Результаты теста вполне ожидаемы и из них можно сделать выводы, что
обрабатывать изображения средствами php следуют только в крайних случая.
Например, если вы используете shared hosting или если изображения
добавляются не часто и только через админку. Также к плюсам
upload.class.php можно отнести простоту в использовании, т.к. он
предоставляет удобный класс со всеми необходимыми методами, но написать
небольшую объектную обертку для GraphicsMagick я думаю не составит
труда.&lt;/p&gt;</content><category term="benchmark"></category><category term="GraphicsMagick"></category><category term="resizing"></category><category term="upload.class.php"></category></entry><entry><title>Получаем HTTP-заголовки запроса в PHP</title><link href="/ru/poluchaem-http-zagolovki-zaprosa-v-php/" rel="alternate"></link><published>2012-02-08T22:51:00+04:00</published><updated>2012-02-08T22:51:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2012-02-08:/ru/poluchaem-http-zagolovki-zaprosa-v-php/</id><summary type="html">&lt;p&gt;Привет всем! Краткая заметка на тему того, как получить http headers
запроса, который инициировал выполнение скрипта. Также стоит отметить,
что в данном случае я использую php, как fastcgi, по-этому некоторые
функции, которые позволяют решить поставленную задачу, не подходят.&lt;/p&gt;
&lt;p&gt;Как выяснилось все очень просто и все передаваемые http-заголовки
запроса благополучно хранятся …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Привет всем! Краткая заметка на тему того, как получить http headers
запроса, который инициировал выполнение скрипта. Также стоит отметить,
что в данном случае я использую php, как fastcgi, по-этому некоторые
функции, которые позволяют решить поставленную задачу, не подходят.&lt;/p&gt;
&lt;p&gt;Как выяснилось все очень просто и все передаваемые http-заголовки
запроса благополучно хранятся в суперглобальном массиве &lt;code&gt;$_SERVER&lt;/code&gt;.
Пример:&lt;/p&gt;
&lt;p&gt;Для создания запроса я воспользовался расширением для Google Chrome -
&lt;strong&gt;REST Console&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;В скрипте просто выводим значение &lt;code&gt;$_SERVER&lt;/code&gt;. После нажатия кнопки Send
получаем следующий вывод:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(
    ....
    [SERVER_PROTOCOL] =&amp;gt; HTTP/1.1
    [GATEWAY_INTERFACE] =&amp;gt; CGI/1.1
    [SERVER_SOFTWARE] =&amp;gt; nginx/1.0.10
    ....
    [HTTP_CUSTOM_HEADER_2] =&amp;gt; test2
    [HTTP_CUSTOM_HEADER_1] =&amp;gt; test1
    ...
    [PHP_SELF] =&amp;gt; /auth.php
    [REQUEST_TIME] =&amp;gt; 1328733817
)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Как видите заголовки успешно сохранены в &lt;code&gt;$_SERVER&lt;/code&gt; и носят название
начинающееся с префикса "HTTP_" и продолжающееся именем заголовка в
верхнем регистре с замененными знаками "-" на "_".&lt;/p&gt;</content><category term="HTTP headers"></category><category term="PHP"></category><category term="php fcgi"></category></entry><entry><title>Multiple select в PHP</title><link href="/ru/multiple-select-v-php/" rel="alternate"></link><published>2012-01-01T21:39:00+04:00</published><updated>2012-01-01T21:39:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2012-01-01:/ru/multiple-select-v-php/</id><summary type="html">&lt;p&gt;&lt;img alt="php logo" src="/media/2012/01/wordpress-e-gli-script-segreti-per-evitare-lu-L-1-300x182.jpg" title="php logo"/&gt;&lt;/p&gt;
&lt;p&gt;Всех с новым годом! Сегодня решил сделать краткую заметку по работе с
multiple select в php. Думаю кому-нибудь пригодится.&lt;/p&gt;
&lt;p&gt;Для примера возьмем форму содержащую multiple select:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fruits"&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;apples&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;oranges&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;bananas&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="php logo" src="/media/2012/01/wordpress-e-gli-script-segreti-per-evitare-lu-L-1-300x182.jpg" title="php logo"/&gt;&lt;/p&gt;
&lt;p&gt;Всех с новым годом! Сегодня решил сделать краткую заметку по работе с
multiple select в php. Думаю кому-нибудь пригодится.&lt;/p&gt;
&lt;p&gt;Для примера возьмем форму содержащую multiple select:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fruits"&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;apples&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;oranges&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;bananas&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В таком случае при множественном выделении элементов в обрабатывающий
скрипт будет передаваться только один (последний выделенный) элемент.
Для того чтобы получить все элементы достаточно заменить значение
атрибута name тега select на "fruits[]", тогда в &lt;code&gt;$_POST['fruits']&lt;/code&gt; будет
массив значений выделенных элементов.&lt;/p&gt;</content><category term="multiple select"></category><category term="PHP"></category></entry><entry><title>Sphinx - поиск по префиксам</title><link href="/ru/sphinx-%D0%BF%D0%BE%D0%B8%D1%81%D0%BA-%D0%BF%D0%BE-%D0%BF%D1%80%D0%B5%D1%84%D0%B8%D0%BA%D1%81%D0%B0%D0%BC/" rel="alternate"></link><published>2011-11-09T11:37:00+04:00</published><updated>2011-11-09T11:37:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-11-09:/ru/sphinx-поиск-по-префиксам/</id><summary type="html">&lt;p&gt;&lt;img alt="sphinx logo" src="/media/2011/11/sphinx.jpg" title="sphinx logo"/&gt;&lt;/p&gt;
&lt;p&gt;Приветствую вас! Сегодня мы обсудим настройку sphinx для посимвольного
поиска по префиксам слов.&lt;/p&gt;
&lt;h2 id="problema"&gt;Проблема&lt;/h2&gt;
&lt;p&gt;Передо мной была поставлена задача реализовать "живой" поиск, т.е. поиск
с обновлением результатов по мере ввода. Однако, настроив sphinx
привычным образом было замечено что поиск осуществляется не совсем
корректно, а именно ведется по целым словам …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="sphinx logo" src="/media/2011/11/sphinx.jpg" title="sphinx logo"/&gt;&lt;/p&gt;
&lt;p&gt;Приветствую вас! Сегодня мы обсудим настройку sphinx для посимвольного
поиска по префиксам слов.&lt;/p&gt;
&lt;h2 id="problema"&gt;Проблема&lt;/h2&gt;
&lt;p&gt;Передо мной была поставлена задача реализовать "живой" поиск, т.е. поиск
с обновлением результатов по мере ввода. Однако, настроив sphinx
привычным образом было замечено что поиск осуществляется не совсем
корректно, а именно ведется по целым словам или их формам. Например, при
поиске слова "деревья" я начинаю вводить "д" и получаю много
результатов, затем я ввожу вторую букву "е" и результат пропадает.
Только после ввода части "деревь" я получаю необходимый результат.
Давайте решим эту проблему!&lt;/p&gt;
&lt;h2 id="konfiguratsiia-sphinx"&gt;Конфигурация Sphinx&lt;/h2&gt;
&lt;p&gt;Нас интересует блок index конфигурационного файла. Здесь необходимо
добавить две директивы к уже существующим:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;enable_star = 1&lt;/strong&gt; - включает поиск с использованием оператора
    "*", т.е. введя поисковую фразу "дере*" мы получим совпадение с
    словом "деревья"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;min_prefix_len = 1&lt;/strong&gt; - минимальную длину префикса устанавливаем
    в один символ, для живого поиска это необходимое требование, чтобы
    пользователь мог видеть результат уже с первого введенного символа&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;После этих изменений блок index моего конфигурационного файла принял
следующий вид:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;index testIndex
{
        # Источник, который будет хранить данный индекса
        source                  = testSource
        path                    = /var/sphinx

        # Тип хранения аттрибутов
        docinfo                 = extern

        mlock                   = 0

        # Используемые морфологические движки
        morphology              = stem_enru, soundex, metaphone

        # Кодировака данных из источника        
        charset_type            = utf-8

    enable_star         = 1
    min_prefix_len      = 1
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rabota-s-klientom-sphinx"&gt;Работа с клиентом sphinx&lt;/h2&gt;
&lt;p&gt;Далее нам необходимо преобразовывать запрос пришедший от пользователя,
добавляя к каждому слову знак "*" в конце. У меня получилось что-то
вроде этого:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SphinxClient&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// $q - запрос пришедший от пользователя&lt;/span&gt;
&lt;span class="nv"&gt;$words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$words&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="nv"&gt;$word&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'* '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tracksIndex'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После внесения всех этих изменений живой поиск должен работать так, как
ожидается. Если у вас возникнут вопросы - задавайте их в комментариях
ниже.&lt;/p&gt;</content><category term="live search"></category><category term="sphinx"></category></entry><entry><title>GeoIP средствами Nginx</title><link href="/ru/geoip-sredstvami-nginx/" rel="alternate"></link><published>2011-10-21T22:03:00+04:00</published><updated>2011-10-21T22:03:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-10-21:/ru/geoip-sredstvami-nginx/</id><summary type="html">&lt;p&gt;&lt;img alt="nginx logo" src="/media/2011/10/nginx-logo-1.png" title="nginx logo"/&gt;&lt;/p&gt;
&lt;p&gt;Часто при разработке сайтов появляется необходимость определения
местоположения пользователя. Например, таким образом можно выдавать
различные версии сайта для аудитории из разных стран. Также можно
использовать данную возможность для балансировки нагрузки и назначать
пользователю тот сервер, который находится ближе всего. Для реализации
данной функции можно воспользоваться средствами &lt;a href="http://nginx.org/ru/"&gt;Nginx&lt;/a&gt;, прикрутив к
нему …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="nginx logo" src="/media/2011/10/nginx-logo-1.png" title="nginx logo"/&gt;&lt;/p&gt;
&lt;p&gt;Часто при разработке сайтов появляется необходимость определения
местоположения пользователя. Например, таким образом можно выдавать
различные версии сайта для аудитории из разных стран. Также можно
использовать данную возможность для балансировки нагрузки и назначать
пользователю тот сервер, который находится ближе всего. Для реализации
данной функции можно воспользоваться средствами &lt;a href="http://nginx.org/ru/"&gt;Nginx&lt;/a&gt;, прикрутив к
нему одну из доступных в сети баз данных по GeoIP.&lt;/p&gt;
&lt;h2 id="konfiguratsiia-nginx"&gt;Конфигурация Nginx&lt;/h2&gt;
&lt;p&gt;В состав Nginx входит модуль Geo, который позволяет выставлять
переменные в зависимости от попадания ip в определенный диапазон.
Сконфигурируем данный модуль на определение города и страны пользователя
добавив следующий код в секцию http:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;geo&lt;/span&gt; &lt;span class="nv"&gt;$country&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;ranges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="kn"&gt;default&lt;/span&gt; &lt;span class="s"&gt;ETC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;geo-country.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;geo&lt;/span&gt; &lt;span class="nv"&gt;$city&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;ranges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="kn"&gt;default&lt;/span&gt; &lt;span class="s"&gt;ETC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;geo-city.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ETC - значение, которое будет установлено по-умолчанию, если ip на
попадет не в один диапазон адресов. Теперь у нас в распоряжении 2
переменные, которые мы можем, например, передать GET-параметром на
бек-енд:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://127.0.0.1:8080/?city=&lt;/span&gt;&lt;span class="nv"&gt;$city&amp;amp;country=$country&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="baza-dannykh-geoip"&gt;База Данных GeoIP&lt;/h2&gt;
&lt;p&gt;В конфигурации выше подключаются файлы geo-country.conf и geo-city.conf.
Данные файлы содержат наборы диапазонов адресов и некоторые значения им
соответствующие. Такого рода данные можно получить в одной из Баз Данных
GeoIP. В данном примере я буду использовать &lt;a href="http://ipgeobase.ru/"&gt;ipgeobase&lt;/a&gt;. По ссылке вы
можете &lt;a href="http://ipgeobase.ru/cgi-bin/Archive.cgi"&gt;скачать актуальную базу данных GeoIP&lt;/a&gt;. Далее остается только
правильно обработать данные и получить конфигурационные файлы Nginx
корректного формата. Для этих целей я написал два небольших скрипта:
&lt;a href="http://pastebin.com/EHJR2S2P"&gt;парсинг БД городов&lt;/a&gt; и &lt;a href="http://pastebin.com/25dKu9fD"&gt;парсинг БД стран&lt;/a&gt;. На вход данным скриптам
подается БД из ipgeobase, а на выходе получаем готовые файлы
geo-country.conf и geo-city.conf. Стоит учесть что из БД получаются
только диапазоны для Москвы и Санкт-Петербурга. Чтобы получить
конфигурационный файл для других городов необходимо модифицировать
скрипт.&lt;/p&gt;</content><category term="geoip"></category><category term="nginx"></category></entry><entry><title>Zend Framework Day</title><link href="/ru/zend-framework-day/" rel="alternate"></link><published>2011-10-13T17:07:00+04:00</published><updated>2011-10-13T17:07:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-10-13:/ru/zend-framework-day/</id><summary type="html">&lt;p&gt;&lt;img alt="Zend Framework Day" src="http://frameworksdays.com/uploads/events/zend-framework-day.png"/&gt;12 ноября, в Киеве, пройдет конференция "Zend
Framework Day" - посвященная популярному PHP фреймворку Zend Framework.
Среди докладчиков непосредственные разработчики компонент Zend
Framework. Событие соберет лучших PHP и Zend Framework специалистов из
Украины, России, Белоруссии и других стран СНГ.&lt;/p&gt;
&lt;p&gt;С текущим списком тем и докладчиков можно ознакомиться на &lt;a href="http://frameworksdays.com/event/zend-framework-day-2011/speakers"&gt;странице&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Событие будет …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Zend Framework Day" src="http://frameworksdays.com/uploads/events/zend-framework-day.png"/&gt;12 ноября, в Киеве, пройдет конференция "Zend
Framework Day" - посвященная популярному PHP фреймворку Zend Framework.
Среди докладчиков непосредственные разработчики компонент Zend
Framework. Событие соберет лучших PHP и Zend Framework специалистов из
Украины, России, Белоруссии и других стран СНГ.&lt;/p&gt;
&lt;p&gt;С текущим списком тем и докладчиков можно ознакомиться на &lt;a href="http://frameworksdays.com/event/zend-framework-day-2011/speakers"&gt;странице&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Событие будет интересно не только тем, кто использует Zend Framework, но
и всем веб-разработчикам и PHP программистам в частности.&lt;/p&gt;
&lt;p&gt;Место проведения &amp;mdash; отель "Казацкий", г. Киев, ул. Михайловская 1/3
(Площадь Независимости).&lt;/p&gt;
&lt;p&gt;Со стоимостью участия и другой необходимой информацией вы можете
ознакомиться на &lt;a href="http://frameworksdays.com/event/zend-framework-day-2011"&gt;странице&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Для участия в конференции необходимо пройти регистрацию на
&lt;a href="http://frameworksdays.com/register"&gt;странице&lt;/a&gt;, а затем произвести оплату из личного кабинета.&lt;/p&gt;
&lt;p&gt;Сайт конференции -
&lt;a href="http://frameworksdays.com/event/zend-framework-day-2011"&gt;http://frameworksdays.com/event/zend-framework-day-2011&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Наши новости в twitter - &lt;a href="http://twitter.com/fwdays"&gt;http://twitter.com/fwdays&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Наша страница в facebook &amp;ndash; &lt;a href="http://facebook.com/fwdays"&gt;http://facebook.com/fwdays&lt;/a&gt;&lt;/p&gt;</content><category term="events"></category><category term="zend framework"></category><category term="zend framework days"></category></entry><entry><title>Очередь сообщений на node.js и memcacheq</title><link href="/ru/ochered-soobshchenii-na-nodejs-i-memcacheq/" rel="alternate"></link><published>2011-10-07T23:24:00+04:00</published><updated>2011-10-07T23:24:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-10-07:/ru/ochered-soobshchenii-na-nodejs-i-memcacheq/</id><summary type="html">&lt;p&gt;Привет! Столкнулся с необходимостью использования очередей сообщений в
текущем проекте. Знаю что есть готовые решения, но я все же решил
написать свой небольшой велосипед. Итак, поехали...&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;&lt;img alt="scheme" src="/media/2011/10/png"/&gt;&lt;/p&gt;
&lt;p&gt;В поставленной передо мной задаче необходимо выполнять ресурсоемкие
операции (такие как работа с сетью, декодирование mp3-файлов), а также
обращаться к бизнес-логике приложения для …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Привет! Столкнулся с необходимостью использования очередей сообщений в
текущем проекте. Знаю что есть готовые решения, но я все же решил
написать свой небольшой велосипед. Итак, поехали...&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;&lt;img alt="scheme" src="/media/2011/10/png"/&gt;&lt;/p&gt;
&lt;p&gt;В поставленной передо мной задаче необходимо выполнять ресурсоемкие
операции (такие как работа с сетью, декодирование mp3-файлов), а также
обращаться к бизнес-логике приложения для потока входных данных.
Приложение написано на php, поэтому очевидно что удобнее всего писать
worker'ы на этом языке в виде cli скриптов. В моем случае это сделать
очень просто, т.к. в проекте используется yii, а в нем есть
замечательная поддержка написания консольных команд при этом можно
использовать весь код бизнес-логики используемый в основном приложении.&lt;/p&gt;
&lt;p&gt;Для реализации хранения заданий отличным решением стало memcacheq.
Memcacheq - это сервис поддержки очередей с использованием api
memcached. Подробнее узнать о том что это за зверь можете на &lt;a href="http://memcachedb.org/memcacheq/"&gt;офф.
сайте&lt;/a&gt;. Стоит отметить что в связи с использованием BerkleyDB в
memcacheq есть ограничение на размер сообщения в очереди, которое
составляет около 64Кб, если для вас этого мало, то стоит подумать о
другом решении.&lt;/p&gt;
&lt;p&gt;Также потребуется менеджер очереди, который будет контролировать работу
воркеров (порождать, отслеживать статус выполнения, получать
результаты). Очевидно что менеджер должен работать постоянно и
периодически проверять нет ли новых заданий. Для реализации менеджера я
выбрал Node.js, как мне кажется это очень подходящая технология для этих
целей. В основном выбор пал на node из-за его асинхронности, возможности
легко и быстро написать демон, который будет вписываться в архитектуру
проекта и также на меня повлиял предыдущий опыт работы с данной
технологией, который оставил в основном положительные впечатления.&lt;/p&gt;
&lt;h2 id="realizatsiia"&gt;Реализация&lt;/h2&gt;
&lt;p&gt;На данном этапе у вас уже должен быть настроен и запущен memcacheq,
установлен nodejs. Также нам понадобиться модуль nodejs под названием
memcached. Установить его можно следующей командой:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install memcached
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Основные составляющие части менеджера очереди:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Бесконечный цикл опроса очереди на наличие заданий. При этом также в
    цикле должна проводиться проверка на состояние запущенных worker'ов.
    Т.к. мы не можем себе позволить создание worker'ов в таком
    количестве в котором доступны задания, то нам необходимо ввести
    ограничение на количество одновременно обрабатываемых заданий. В
    данном цикле перед созданием новых потоков проверяется наличие
    свободного места, т.е. worker создается только в случае если
    количество текущих worker'ов меньше установленного ограничения.&lt;/li&gt;
&lt;li&gt;Объект worker'а - представляет из себя оболочку над процессом
    worker'а и хранит его состояние.&lt;/li&gt;
&lt;li&gt;Создание worker'а - процесс инициализации объекта worker'а на основе
    данных полученных от memcacheq&lt;/li&gt;
&lt;li&gt;Мониторинг. Для отслеживания состояния выполнения заданий создадим
    web-сервер который будет отвечать информацией о текущем статусе
    выполнения каждого выполняемого worker'а.&lt;/li&gt;
&lt;li&gt;Т.к. в моя задача связанна с передачей большого объема данных, то
    появилось необходимость ввести поправку на возможную ошибку передачи
    данных. Это подразумевает повторное занесение задания в очередь в
    случае если worker вернет ошибку передачи, которая может быть
    определена проверкой контрольной суммы передаваемых данных.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Теперь собственно исходный код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'util'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'child_process'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Memcached&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./lib/memcached.js'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;memcached&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Memcached&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'127.0.0.1:22201'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;maxValue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;65000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reconnect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;retry&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;creating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;workers_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;transmit_error_retry_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;transmit_errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;command_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/path/to/worker/script'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Возможные состояния процесса&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;WORKER_SUCCESS_DONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;WORKER_TRANSMIT_ERROR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;WORKER_CRITICAL_ERROR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;WORKER_IN_WORKING_PROCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Функция выполняемая в бесконечном цикле&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;check_feeds&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;WORKER_SUCCESS_DONE&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transmit_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;transmit_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;WORKER_TRANSMIT_ERROR&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transmit_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;transmit_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="nx"&gt;transmit_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transmit_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;transmit_error_retry_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;transmit_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;WORKER_IN_WORKING_PROCESS&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transmit_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;transmit_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Если есть свободные места вызываем функцию&lt;/span&gt;
    &lt;span class="c1"&gt;// создающую worker'ов&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;creating&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;workers_count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;create_worker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Возвращение задания в очередь&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;memcached&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"tracks"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Функция выполняющая создание новых worker'ов&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;create_worker&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;creating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;memcached&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"tracks"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;creating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;check_feeds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// Если все ещё есть свободные места&lt;/span&gt;
            &lt;span class="c1"&gt;// то делаем рекурсивный вызов&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;workers_count&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;create_worker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;creating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Конструктор объекта worker'а&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WORKER_IN_WORKING_PROCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Здесь можно сформировать &lt;/span&gt;
    &lt;span class="c1"&gt;// параметры командной строки&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command_line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WORKER_CRITICAL_ERROR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;check_feeds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Monitoring server&lt;/span&gt;
&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'text/plain'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;': '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Для того чтобы заработал след. код&lt;/span&gt;
    &lt;span class="c1"&gt;// необходимо внести изменения&lt;/span&gt;
    &lt;span class="c1"&gt;// в модуль memcache (см. ниже)&lt;/span&gt;
    &lt;span class="nx"&gt;memcached&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Queue:'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"127.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Stuff&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;obj_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для того чтобы корректно обрабатывать статусы выполнения задания
worker'ы должны возвращать определенные заранее значения. В моем случае
worker может вернуть одно из 3х состояний обозначенных в начале
исходного кода.&lt;/p&gt;
&lt;p&gt;Также стоит отметить, что для реализации отображения количества задач в
очереди memcacheq необходимо выполнить запрос stats queue, но модуль
memcached по всей видимости его не поддерживает. По-этому я внес
небольшие дополнения чтобы реализовать данный функционал. Исходный код
модуля доступен &lt;a href="http://pastebin.com/MgSFU6Gb"&gt;по ссылке&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="in-the-end"&gt;In the end..&lt;/h2&gt;
&lt;p&gt;Стоит заметить, что при помощи подобной организации системы вы сможете
распараллелить ресурсоемкие вычисления. Особенно это удобно, когда вам
необходимо обращаться к бизнес-логике написанной, например, на PHP. В
завершении хочу добавить что полученная система очереди сообщений сильно
направленная на реализацию поставленной передо мной задачи. Но я считаю,
что вы без проблем сможете доработать код для реализации нужного вам
функционала. Спасибо за внимание, буду рад ответить на возникшие
вопросы.&lt;/p&gt;</content><category term="memcacheq"></category><category term="node.js"></category><category term="PHP"></category><category term="очередь сообщений"></category></entry><entry><title>Хранилища данных в Node.JS. Memcachedb</title><link href="/ru/khranilishcha-dannykh-v-nodejs-memcachedb/" rel="alternate"></link><published>2011-07-02T23:04:00+04:00</published><updated>2011-07-02T23:04:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-07-02:/ru/khranilishcha-dannykh-v-nodejs-memcachedb/</id><summary type="html">&lt;p&gt;&lt;img alt="MemcacheDB" src="/media/2011/07/Снимок-300x204.png"/&gt;&lt;/p&gt;
&lt;p&gt;Сегодня я расскажу, как начать работать с MemcacheDB в Node.JS.&lt;/p&gt;
&lt;h2 id="memcachedb"&gt;Memcachedb&lt;/h2&gt;
&lt;p&gt;Memcachedb - это key-value база данных, основанная на memcached. Для
тех, кто работал с memcached, начало работы с memcachedb не будет
требовать особых усилий, т.к. они используют общее API. Основные
возможности Memcachedb:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Распределенное хранилище пар ключ-значение&lt;/li&gt;
&lt;li&gt;В отличие …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="MemcacheDB" src="/media/2011/07/Снимок-300x204.png"/&gt;&lt;/p&gt;
&lt;p&gt;Сегодня я расскажу, как начать работать с MemcacheDB в Node.JS.&lt;/p&gt;
&lt;h2 id="memcachedb"&gt;Memcachedb&lt;/h2&gt;
&lt;p&gt;Memcachedb - это key-value база данных, основанная на memcached. Для
тех, кто работал с memcached, начало работы с memcachedb не будет
требовать особых усилий, т.к. они используют общее API. Основные
возможности Memcachedb:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Распределенное хранилище пар ключ-значение&lt;/li&gt;
&lt;li&gt;В отличие от memcached не является решением для кеширования, т.к.
    хранит данные на диске&lt;/li&gt;
&lt;li&gt;В качестве движка хранилища используется Berkeley DB&lt;/li&gt;
&lt;li&gt;Поддержка транзакций&lt;/li&gt;
&lt;li&gt;Поддержка репликации&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Api memcachedb включает следующие команды:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get - получения значения по ключу или нескольким ключам&lt;/li&gt;
&lt;li&gt;set, add, replace - установка значения, сохранения значения
    только в случае если оно не было установлено ранее и установка
    значения только если оно было установлено ранее&lt;/li&gt;
&lt;li&gt;append / prepend - добавление данных в после существующего
    значения или перед ним&lt;/li&gt;
&lt;li&gt;incr / decr - инкремент, декремент значения&lt;/li&gt;
&lt;li&gt;delete - удаление значения&lt;/li&gt;
&lt;li&gt;stats - получение статистической информации&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ustanovka-modulia-memcached"&gt;Установка модуля memcached&lt;/h2&gt;
&lt;p&gt;Как я уже упоминал memcacheDB имеет такое же API, как и у memcached
(кроме небольших изменений, например записи не удаляются по истечении
срока), поэтому мы будем использовать модуль предназначенный для работы
с memcached. Модуль имеет название memcached и доступен для установки
через npm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install memcached
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Я подразумеваю, что вы уже установили и запустили memcacheDB, если нет,
то вам &lt;a href="http://memcachedb.googlecode.com/svn/trunk/INSTALL"&gt;сюда&lt;/a&gt;. После установки модуля, мы сразу можем начать
использовать его в наших программах на node.js. Попробуем подключится к
БД:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Memcached&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'memcached'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;memcached&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Memcached&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'127.0.0.1:21201'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pishem-hello-world"&gt;Пишем Hello World&lt;/h2&gt;
&lt;p&gt;Напишем скрипт, который сначала запишет значение в БД и затем считает
его и выведет в консоль:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Memcached&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'memcached'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;memcachedb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Memcached&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'127.0.0.1:21201'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;memcachedb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;memcachedb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello world&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Подробную информацию по функциям api можете получить &lt;a href="https://github.com/3rd-Eden/node-memcached/blob/v0.0.1/README.md"&gt;здесь&lt;/a&gt; и в
&lt;a href="https://github.com/3rd-Eden/node-memcached/tree/v0.0.1/examples"&gt;примерах&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;На этом все. До новых постов!&lt;/p&gt;</content><category term="memcachedb"></category><category term="node.js"></category></entry><entry><title>Определяем поисковый запрос средствами JS</title><link href="/ru/opredeliaem-poiskovyi-zapros-sredstvami-js/" rel="alternate"></link><published>2011-06-28T20:41:00+04:00</published><updated>2011-06-28T20:41:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-06-28:/ru/opredeliaem-poiskovyi-zapros-sredstvami-js/</id><summary type="html">&lt;p&gt;&lt;img alt="searchengines" src="/media/2011/06/441.png" title="searchengines"/&gt;&lt;/p&gt;
&lt;p&gt;Здравствуйте! Сегодня я покажу вам, как можно определить поисковый
запрос и поисковую систему, которые привели пользователя на сайт. Для
этого напишем javascript-функцию, которая бы вытягивала данную
информацию из браузера и позволяла бы легко добавлять новые поисковые
системы. Информация о странице с которой был осуществлен переход
хранится в свойстве объекта Document …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="searchengines" src="/media/2011/06/441.png" title="searchengines"/&gt;&lt;/p&gt;
&lt;p&gt;Здравствуйте! Сегодня я покажу вам, как можно определить поисковый
запрос и поисковую систему, которые привели пользователя на сайт. Для
этого напишем javascript-функцию, которая бы вытягивала данную
информацию из браузера и позволяла бы легко добавлять новые поисковые
системы. Информация о странице с которой был осуществлен переход
хранится в свойстве объекта Document под названием referrer. В нем
хранится все необходимые данные и нам нужно только правильно их
обработать. Для начала нужно определить был ли это переход с поисковой
системы, для этих целей мы будем проверять referrer на наличие ключевых
слов вроде google. После того как мы определим, что это был запрос с
поисковой системы нам нужно получить запрос, который передается как
GET-параметр. Например, для google свойство referrer будет выглядеть
примерно так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.google.com.ua/search?source=ig&amp;amp;hl=ru&amp;amp;q=dizballanze
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Очевидно, что нас интересует значение параметра q. В итоге мы можем
сделать вывод, что для получения информации о запросе нам нужно ключевое
слово (для определения поисковой системы) и GET-параметр (для получения
поискового запроса). Можем приступить к написанию. У меня получилось
следующее:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;referer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;engines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'http://www.google.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'google'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'http://yandex.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'yandex'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'rambler.ru/search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'query'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'rambler'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'http://go.mail.ru/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'mailru'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cp1251&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'http://www.bing.com/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'bing'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'search.yahoo.com/search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'yahoo'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'http://ru.ask.com/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'ask'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'http://search.qip.ru/search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'query'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'qip'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;referrer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cp1251&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'?'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'='&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;amp;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'='&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;cp1251&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cp1251'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;amp;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cp1251&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;win2unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;charmap&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"%u0402%u0403%u201A%u0453%u201E%u2026%u2020%u2021%u20AC%u2030%u0409%u2039%u040A%u040C%u040B%u040F"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s2"&gt;"%u0452%u2018%u2019%u201C%u201D%u2022%u2013%u2014%u0000%u2122%u0459%u203A%u045A%u045C%u045B%u045F"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s2"&gt;"%u00A0%u040E%u045E%u0408%u00A4%u0490%u00A6%u00A7%u0401%u00A9%u0404%u00AB%u00AC%u00AD%u00AE%u0407"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s2"&gt;"%u00B0%u00B1%u0406%u0456%u0491%u00B5%u00B6%u00B7%u0451%u2116%u0454%u00BB%u0458%u0405%u0455%u0457"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code2char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xC0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0xC0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x0410&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x80&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mh"&gt;0xBF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;charmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;code2char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;win2unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/[+]+/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"engine"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"query"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В случае, если страница была загружена переходом по ссылке с одной из
забитых поисковых систем мы получим объект содержащий имя поисковой
системы и запрос. Иначе получим логическое false.&lt;/p&gt;
&lt;p&gt;Спасибо за внимание. Подписывайтесь на RSS и будьте в теме ;)&lt;/p&gt;</content><category term="java script"></category><category term="referrer"></category><category term="поисковые системы"></category></entry><entry><title>Практикум Zend Framework. Часть третья:Zend_Acl</title><link href="/ru/praktikum-zend-framework-chast-tretiazend_acl/" rel="alternate"></link><published>2011-06-22T11:04:00+04:00</published><updated>2011-06-22T11:04:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-06-22:/ru/praktikum-zend-framework-chast-tretiazend_acl/</id><summary type="html">&lt;p&gt;&lt;img alt="ZendFramework" src="/media/2011/06/ZendFramework-logo-640x1691.png" title="ZendFramework"/&gt;&lt;/p&gt;
&lt;p&gt;Сегодня мы рассмотрим пример создания Acl для системы с большим
количеством ролей и ресурсов.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/"&gt;&lt;strong&gt;Часть первая&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/#auth"&gt;&lt;strong&gt;Аутентификация&lt;/strong&gt;&lt;/a&gt; - вход пользователей в систему&lt;/li&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-tretiazend_acl/"&gt;&lt;strong&gt;ACL&lt;/strong&gt;&lt;/a&gt; - распределение прав доступа&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть вторая&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#route"&gt;&lt;strong&gt;Маршрутизация&lt;/strong&gt;&lt;/a&gt; - настройка url для различных компонентов
    системы&lt;/li&gt;
&lt;li&gt;&lt;a href="#registry"&gt;&lt;strong&gt;Registry&lt;/strong&gt;&lt;/a&gt; - быстрый доступ к системным константам&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть третья&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-tretiazend_acl/"&gt;&lt;strong&gt;Acl&lt;/strong&gt;&lt;/a&gt; - расширенный пример&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Хабраюзер &lt;a href="http://anexroid.habrahabr.ru/"&gt;Anexroid&lt;/a&gt; любезно предоставил описание …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="ZendFramework" src="/media/2011/06/ZendFramework-logo-640x1691.png" title="ZendFramework"/&gt;&lt;/p&gt;
&lt;p&gt;Сегодня мы рассмотрим пример создания Acl для системы с большим
количеством ролей и ресурсов.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/"&gt;&lt;strong&gt;Часть первая&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/#auth"&gt;&lt;strong&gt;Аутентификация&lt;/strong&gt;&lt;/a&gt; - вход пользователей в систему&lt;/li&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-tretiazend_acl/"&gt;&lt;strong&gt;ACL&lt;/strong&gt;&lt;/a&gt; - распределение прав доступа&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть вторая&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#route"&gt;&lt;strong&gt;Маршрутизация&lt;/strong&gt;&lt;/a&gt; - настройка url для различных компонентов
    системы&lt;/li&gt;
&lt;li&gt;&lt;a href="#registry"&gt;&lt;strong&gt;Registry&lt;/strong&gt;&lt;/a&gt; - быстрый доступ к системным константам&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть третья&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-tretiazend_acl/"&gt;&lt;strong&gt;Acl&lt;/strong&gt;&lt;/a&gt; - расширенный пример&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Хабраюзер &lt;a href="http://anexroid.habrahabr.ru/"&gt;Anexroid&lt;/a&gt; любезно предоставил описание такого проекта:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Существуют следующие права доступа: Админ, с доступом в админку. Причем в админке порядка 20-30
разделов, 5 админов. У всех доступ разный. То есть у кого-то 2-3 раздела, у кого-то &amp;mdash; все 20. Все
пункты меню храняться в БД. Пользователь &amp;mdash; зарегестированный на сайте. Может создавать фотоальбомы,
комментировать новости без ввода капчи и т.д. + всё то, что может делать гость.Предприятие &amp;mdash; имеет
личную страницу в каталоге, в зависимости от купленного пакета &amp;mdash; различные пункты в личном кабинете.
Ну и гость, который может всё неограниченно просматривать. Комментарии &amp;mdash; с капчей.Еще есть
консультанты &amp;mdash; отвечают на вопросы в консультациях.Причем у предприятий и консультантов &amp;mdash; нет
регистрации, добавляются админом. +опять же, все таблицы в БД отдельные &amp;mdash; отдельно админы, отдельно
пользователи, отдельно &amp;mdash; предприятия, отдельно &amp;mdash; консультанты.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для начала определимся с ролями и ресурсами, составим иерархии
наследования ресурсов и ролей:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Иерархия ролей" src="/media/2011/06/1-1024x537.png" title="Иерархия ролей"/&gt;&lt;/p&gt;
&lt;p&gt;В нашем примере верхняя часть иерархия ресурсов будет совпадать по
структуре с иерархией ролей. Для того чтобы, удобно отобразить иерархию
ресурсов, добавим в наш список прав доступа абстрактные ресурсы для
каждой роли, кроме Admin1-N, CompanyPackage1-N. Это так, потому что
ресурсы для статусов Guest, User и общие ресурсы для всех админов и
компаний имеют простую древовидную структуру, чего нельзя сказать про
нижние узлы дерева в которых будут пересечения. Например Admin1 и Admin2
могут иметь доступ к общему ресурсу "Добавление новостей", а деревья
ресурсов Zend_Acl, к сожалению, не поддерживает множественное
наследование. Поэтому ресурсы для ролей Admin1-N, CompanyPackage1-N
будут распределятся как исключения, явно назначаясь нужным ролям.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Иерархия ресурсов" src="/media/2011/06/bbb.png" title="Иерархия ресурсов"/&gt;&lt;/p&gt;
&lt;p&gt;Итак, мы разобрались с иерархией ресурсов, теперь создадим
непосредственно Acl. Для этого расширим класс Zend_Acl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Acl&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Добавляем роли&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company-package-1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'company'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company-package-2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'company'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company-package-3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'company'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin-1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin-2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin-5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Добавляем ресурсы&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="c1"&gt;// РЕСУРСЫ ГОСТЯ !&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest_res'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;// перечисляем все ресурсы гостя, как дочерние для guest_res&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add-comments-with-captcha'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'guest_res'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// РЕСУРСЫ ПОЛЬЗОВАТЕЛЯ !&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user_res'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;// перечисляем все ресурсы пользователя, как дочерние для user_res&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add-comments'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'user_res'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// РЕСУРСЫ АДМИНА !&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin_res'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;// перечисляем общие ресурсы для всех админов, как дочерние для admin_res&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin-tools-list'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'admin_res'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// РЕСУРСЫ КОМПАНИИ !&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company_res'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;// перечисляем общие ресурсы для пакетов компаний, как дочерние для company_res&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'show-company-statistics'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'company_res'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Специфические ресурсы для админов и компаний, ничего не наследуют&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'advertise'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add-company'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="c1"&gt;//Выставляем права, по-умолчанию всё запрещено&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'guest_res'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'user_res'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'admin_res'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'company_res'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Выставляем ресурсы для пакетов компаний и админов&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company-package-1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'advertise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin-1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'add-company'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;И сразу проверим что все работает как мы ожидали:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$acl&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isAllowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'add-comments-with-captcha'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="s1"&gt;'yes'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'no'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// yes&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$acl&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isAllowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'add-comments'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="s1"&gt;'yes'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'no'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// no&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$acl&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isAllowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin-1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'add-company'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="s1"&gt;'yes'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'no'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// yes&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$acl&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isAllowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company-package-2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'advertise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="s1"&gt;'yes'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'no'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// no&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В данном примере я разрешил себе сделать упрощение и ввел одну
привилегию show, которая соответствует возможности просмотра
определённой страницы. Однако вы можете расширить этот пример и добавить
различные привилегии, если это потребуется.&lt;/p&gt;
&lt;p&gt;Также, очевидно, что данный код не соответствует тому, что пакеты
компании и администраторы будут добавляться, а права других ролей могут
меняться со временем. Поэтому вам нужно будет хранить данные в базе
данных и, либо строить объект по требованию, извлекая необходимые
данные, или хранить сериализованный экземпляр класса Acl в каком либо
хранилище (например memcached). Этот выбор за вами, лично мне больше
нравится второй вариант.&lt;/p&gt;
&lt;p&gt;В &lt;a href="/PHP/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/"&gt;первом посте&lt;/a&gt; данного цикла я рассматривал как
можно создать Acl используя в качестве ресурсов строки типа
"controller/action", что очень удобно в небольших проектах.&lt;/p&gt;</content><category term="acl"></category><category term="zend_acl"></category></entry><entry><title>Практикум Zend Framework. Часть вторая: Route и Registry</title><link href="/ru/praktikum-zend-framework-chast-vtoraia-route-i-registry/" rel="alternate"></link><published>2011-06-12T20:17:00+04:00</published><updated>2011-06-12T20:17:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-06-12:/ru/praktikum-zend-framework-chast-vtoraia-route-i-registry/</id><summary type="html">&lt;p&gt;&lt;img alt="ZendFramework logo" src="/media/2011/06/ZendFramework-logo-640x169.png" title="ZendFramework logo"/&gt;&lt;/p&gt;
&lt;p&gt;Продолжим рассмотрение практического использования Zend Framework. Во
второй части речь пойдет о маршрутизации, что позволит вам создавать
url-адреса любой необходимой для вас формы. Также мы рассмотрим пример
организации удобного доступа к системным константам.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/"&gt;&lt;strong&gt;Часть первая&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/#auth"&gt;&lt;strong&gt;Аутентификация&lt;/strong&gt;&lt;/a&gt; - вход пользователей в систему&lt;/li&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-tretiazend_acl/"&gt;&lt;strong&gt;ACL&lt;/strong&gt;&lt;/a&gt; - распределение прав доступа&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть вторая&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#route"&gt;&lt;strong&gt;Маршрутизация&lt;/strong&gt;&lt;/a&gt; - настройка url для …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="ZendFramework logo" src="/media/2011/06/ZendFramework-logo-640x169.png" title="ZendFramework logo"/&gt;&lt;/p&gt;
&lt;p&gt;Продолжим рассмотрение практического использования Zend Framework. Во
второй части речь пойдет о маршрутизации, что позволит вам создавать
url-адреса любой необходимой для вас формы. Также мы рассмотрим пример
организации удобного доступа к системным константам.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/"&gt;&lt;strong&gt;Часть первая&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/#auth"&gt;&lt;strong&gt;Аутентификация&lt;/strong&gt;&lt;/a&gt; - вход пользователей в систему&lt;/li&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-tretiazend_acl/"&gt;&lt;strong&gt;ACL&lt;/strong&gt;&lt;/a&gt; - распределение прав доступа&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть вторая&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#route"&gt;&lt;strong&gt;Маршрутизация&lt;/strong&gt;&lt;/a&gt; - настройка url для различных компонентов
    системы&lt;/li&gt;
&lt;li&gt;&lt;a href="#registry"&gt;&lt;strong&gt;Registry&lt;/strong&gt;&lt;/a&gt; - быстрый доступ к системным константам&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть третья&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-tretiazend_acl/"&gt;&lt;strong&gt;Acl&lt;/strong&gt;&lt;/a&gt; - расширенный пример&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="marshrutizatsiia"&gt;Маршрутизация&lt;/h2&gt;
&lt;p&gt;Маршрутизация - очень важная тема. Как вы знаете, по-умолчанию, в Zend
Framework используются url формата -
controller/action/param1/value1/param2/value2. Именно благодаря
средствам маршрутизации мы можем организовывать url такого формата,
который требуется в проекте. К примеру, вы можете организовать простой
доступ к статическим страницам через url вида - site.com/static-page или
реализовать доступ к товарам через ссылки вида -
site.com/catalog/category/good-name. В особенности это полезно для нужд
seo, но также помогает пользователям при получении ссылок, сразу понять
что находится на странице сайта.&lt;/p&gt;
&lt;p&gt;Рассмотрим пример создания маршрутов для ссылок форматов указанных выше.
Для начала нужно сформировать маршруты, для этого напишем метод в файле
bootstrap.php:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;_initRoute&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// Получаем маршрут, по-умолчанию&lt;/span&gt;
    &lt;span class="nv"&gt;$router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Controller_Front&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// создаем пользовательские маршруты&lt;/span&gt;
    &lt;span class="c1"&gt;// маршрут для статических страниц&lt;/span&gt;
    &lt;span class="nv"&gt;$route_static&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Controller_Router_Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;'/:page'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'controller'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'action'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'page'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'default-page-name'&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt; 
            &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'page'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'[\w\-]+'&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$route_static&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// маршрут для товаров&lt;/span&gt;
    &lt;span class="nv"&gt;$route_goods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Controller_Router_Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;'/catalog/:category/:good/*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'controller'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'goods'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'action'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt; 
            &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'category'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'[\w\-]+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'good'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'[\w\-]+'&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'goods'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$route_goods&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Сначала мы получаем стандартный маршрутизатор и добавляем к нему
пользовательские маршруты. В данном случае мы используем
перезаписывающий маршрутизатор Zend_Controller_Router_Route. Первым
параметром конструктору маршрутизатора передается строка описывающая
формат url. Для задания динамических частей используются идентификаторы
вида ":variable". Такие динамические части удобно рассматривать как
переменные, значения которых подставляются из определенного участка url.
Вторым параметром передается массив стандартных значений маршрутизатора.
В данном массиве нужно указать значения названия контроллера и экшена
который будет обрабатывать запрос по данному маршруту, а также значения
переменных по-умолчанию, которые будут использоваться в случае если
соответствующее значение url пропущено. Также удобным бывает задать
требования к переменным. Для этого третьим параметром необходимо
передать паттерн, который описывает формат допустимого значения
переменной. Я рекомендую указывать данный параметр всегда, когда это
возможно. Это полезно в целях безопасности, т.к. в случае не совпадения
шаблона со значением переменной, будет инициирована ошибка и код экшена
не получит потенциально опасного значения.&lt;/p&gt;
&lt;p&gt;После создания маршрутизатора, нам необходимо добавить его в стандартный
маршрутизатор при помощи метода addRoute. Каждому маршруту должна
соответствовать уникальная строка-идентификатор, которая будет
использована нами в дальнейшем.&lt;/p&gt;
&lt;p&gt;Далее в коде действия для того чтобы получить значение переменной нам
необходимо выполнить следующий код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'page'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Также нам может потребоваться создание ссылок с использованием данного
маршрутизатора. Для этого воспользуемся стандартным помощником вида url.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'page'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'about'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;О проекте&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Мы рассмотрели только один из маршрутизаторов используемых в Zend
Framework. Подробнее можете прочитать в документации &lt;a href="http://framework.zend.com/manual/ru/zend.controller.router.html"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="registry"&gt;Registry&lt;/h2&gt;
&lt;p&gt;Сейчас мы рассмотрим, как в ZF можно организовать удобный и быстрый
доступ к константам из секции файла application.ini. Для начала зададим
несколько констант:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;[constants]paths.photo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/photo/"paths.uploads = "/uploads/"paths.video = "/video/"secret_code = "key_for_check"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Код выше необходимо разместить в файле application.ini. Далее
воспользуемся компонентом Zend_Registry, который реализует паттерн
Registry, для того чтобы сделать наши константы доступными во всем
проекте:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;_initConfig&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;Zend_Registry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'constants'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Config_Ini&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;APPLICATION_PATH&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/configs/application.ini'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'constants'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Метод представленный выше нужно добавить в bootstrap.php. Далее, чтобы
обратится к константе используем следующий код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$path_photo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Registry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'constants'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="registry"></category><category term="route"></category></entry><entry><title>Практикум Zend Framework. Часть первая: Аутентификация и Acl</title><link href="/ru/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/" rel="alternate"></link><published>2011-06-10T17:09:00+04:00</published><updated>2011-06-10T17:09:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-06-10:/ru/praktikum-zend-framework-chast-pervaia-autentifikatsiia-i-acl/</id><summary type="html">&lt;p&gt;&lt;img alt="Zend Framework" src="/media/2011/06/ZendFramework-logo_small.png" title="Zend Framework"/&gt;&lt;/p&gt;
&lt;p&gt;В последнее время я все сильнее и сильнее убеждаюсь в универсальности
Zend Framework, как платформы для создания web-приложений. Сегодня я
расскажу о процессе создания каркаса сайта на Zend Framework, который
предоставит необходимую основу для реализации сайтов средней сложности:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть первая&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#auth"&gt;&lt;strong&gt;Аутентификация&lt;/strong&gt;&lt;/a&gt; - вход пользователей в систему&lt;/li&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-tretiazend_acl/"&gt;&lt;strong&gt;ACL&lt;/strong&gt;&lt;/a&gt; - распределение прав доступа&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть …&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Zend Framework" src="/media/2011/06/ZendFramework-logo_small.png" title="Zend Framework"/&gt;&lt;/p&gt;
&lt;p&gt;В последнее время я все сильнее и сильнее убеждаюсь в универсальности
Zend Framework, как платформы для создания web-приложений. Сегодня я
расскажу о процессе создания каркаса сайта на Zend Framework, который
предоставит необходимую основу для реализации сайтов средней сложности:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть первая&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#auth"&gt;&lt;strong&gt;Аутентификация&lt;/strong&gt;&lt;/a&gt; - вход пользователей в систему&lt;/li&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-tretiazend_acl/"&gt;&lt;strong&gt;ACL&lt;/strong&gt;&lt;/a&gt; - распределение прав доступа&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть вторая&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-vtoraia-route-i-registry/#route"&gt;&lt;strong&gt;Маршрутизация&lt;/strong&gt;&lt;/a&gt; - настройка url для различных компонентов
    системы&lt;/li&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-vtoraia-route-i-registry/#registry"&gt;&lt;strong&gt;Registry&lt;/strong&gt;&lt;/a&gt; - быстрый доступ к системным константам&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Часть третья&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/PHP/praktikum-zend-framework-chast-tretiazend_acl/"&gt;&lt;strong&gt;Acl&lt;/strong&gt;&lt;/a&gt; - расширенный пример&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="autentifikatsiia"&gt;Аутентификация&lt;/h2&gt;
&lt;p&gt;Аутентификация - неотъемлемая часть практически любого сайта. Как вам
известно для этих целей в Zend Framework используется специальный
компонент Zend_Auth. Данный компонент позволяет производить процесс
входа в систему путем проверки совпадения пары логин-пароль. Обычно
точкой входа является специальный action аутентификации, а также
возможно экшн регистрации (или подтверждения регистрации). Рассмотрим
простой пример аутентификации:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;authAction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nv"&gt;$form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Application_Form_Enter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$form&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getPost&lt;/span&gt;&lt;span class="p"&gt;())){&lt;/span&gt;
        &lt;span class="nv"&gt;$bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getInvokeArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bootstrap'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Auth&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getPluginResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'db'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getDbAdapter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$authAdapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Auth_Adapter_DbTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$adapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'login'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'MD5(?)'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$authAdapter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setIdentity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$form&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nv"&gt;$authAdapter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setCredential&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$form&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$authAdapter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// Если валидация прошла успешно сохраняем в storage инфу о пользователе&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="nv"&gt;$storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getStorage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$storage_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$authAdapter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getResultRowObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'activate'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'enabled'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="nv"&gt;$user_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Application_Model_DbTable_User&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$language_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Application_Model_DbTable_Language&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$storage_data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;$storage&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$storage_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Это типичный код аутентификации, который вы можете использовать. Для
полноценной работы вам понадобится соответствующая форма, которая
пересылает логин и пароль на данный action.&lt;/p&gt;
&lt;p&gt;После успешной аутентификации пользовательские данные сохраняются в
хранилище (storage) Zend_Auth. Далее, когда вам потребуется узнать
какую-нибудь информацию о текущем пользователе, вы можете обратится к
Zend_Auth (он доступен везде, т.к. является реализацией Singleton)
следующим образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Auth&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Если пользователь аутентифицирован&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hasIdentity&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
    &lt;span class="c1"&gt;// Считываем данные о пользователе&lt;/span&gt;
    &lt;span class="nv"&gt;$user_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getStorage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Также важным действием, которое нужно выполнить, является начальная
инициализация Zend_Auth при первом заходе пользователя на сайт. Для
этого добавим в bootstrap следующий метод:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;_initAuth&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nv"&gt;$auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Auth&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getStorage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
        &lt;span class="nv"&gt;$storage_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;stdClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$storage_data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getStorage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$storage_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="acl"&gt;Acl&lt;/h2&gt;
&lt;p&gt;В большинстве web-приложений есть несколько статусов доступа, каждый из
которых имеет определённые привилегии. Для большинства сайтов привилегии
и их распределение являются относительно постоянными, поэтому мы
реализуем Acl в виде правил записанных непосредственно в коде программы.
Если же вы разрабатываете систему, которая имеет часто меняющуюся
структуру статусов и прав (например CMS), то вам необходимо строить
более гибкую реализацию Acl, права в которой будут хранится, например, в
базе данных.&lt;/p&gt;
&lt;p&gt;Основными задачами, которые должна выполнять система контроля доступа,
является задание привилегий и собственно контроль за доступом. Для
реализации этих задач нам потребуется два компонента:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acl - списки прав доступа&lt;/li&gt;
&lt;li&gt;Плагин выполняющий проверку корректности доступа текущего
    пользователя к запрашиваемому ресурсу&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Рассмотрим самый простой случай, когда ресурсами являются части сайта,
т.е. в терминах MVC - действия. Каждый пользователь наследует права от
некого абстрактного статуса (гость, пользователь, администратор),
привилегии каждого статуса описываются в Acl. Для реализации Acl
расширим Zend_Acl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Acl&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Добавляем роли&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Добавляем ресурсы&lt;/span&gt;
        &lt;span class="c1"&gt;// РЕСУРСЫ ГОСТЯ !&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest_allow'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index/index'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'guest_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//...&lt;/span&gt;

        &lt;span class="c1"&gt;// РЕСУРСЫ ПОЛЬЗОВАТЕЛЯ !&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user_allow'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user/index'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'user_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;

        &lt;span class="c1"&gt;// РЕСУРСЫ АДМИНА !&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin_allow'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin/index'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'admin_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//...&lt;/span&gt;

        &lt;span class="c1"&gt;//Выставляем права, по-умолчанию всё запрещено&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'guest_allow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'user_allow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'admin_allow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;can&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$privilege&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;//Инициируем ресурс&lt;/span&gt;
        &lt;span class="nv"&gt;$request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Controller_Front&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getControllerName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getActionName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//Если ресурс не найден закрываем доступ&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$resource&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//Инициируем роль&lt;/span&gt;
        &lt;span class="nv"&gt;$storage_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Auth&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getStorage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$storage_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;$storage_data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isAllowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$privilege&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Разместите этот код в файле &lt;code&gt;application/classes/Acl.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Описываем списки прав в стандартной для ZF форме. Также здесь создается
метод, который проверяет права доступа текущего пользователя к текущему
действию. В качестве идентификаторов ресурсов используется формат
controller/action. Если вы проектируете систему таким образом что у вас
права действий внутри контроллера не меняются, то вы можете использовать
вместо идентификаторов ресурсов только имена контроллеров (не забудьте
изменить метод &lt;code&gt;can&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Для большей гибкость мы добавляем понятие "привилегия", которая позволит
контролировать определенные действия внутри экшена. Привилегия для
просмотра имеет название "show".&lt;/p&gt;
&lt;p&gt;Теперь когда у нас есть список прав доступа и мы умеем определять имеет
ли пользователь доступ к текущему действию, нужно внедрить проверку в
цикл обработки запросов Zend Framework. Для этого лучше всего подходит
создание front controller plugin. Плагины позволяют выполнять заданные
действия на различных этапах процесса диспатчинга:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CheckAccess&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Zend_Controller_Plugin_Abstract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt;     * Метод preDispatch выполняет проверку прав доступа на&lt;/span&gt;
&lt;span class="sd"&gt;     * данный controller/action в случае ошибки вызывает метод&lt;/span&gt;
&lt;span class="sd"&gt;     * generateAccessError&lt;/span&gt;
&lt;span class="sd"&gt;     * &lt;/span&gt;
&lt;span class="sd"&gt;     * @param Zend_Controller_Request_Abstract $request&lt;/span&gt;
&lt;span class="sd"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;span class="nf"&gt;preDispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Zend_Controller_Request_Abstract&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$acl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Controller_Front&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bootstrap'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Acl'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$acl&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;can&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;generateAccessError&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt;     * Метод генерации сообщения о ошибке прав доступа.&lt;/span&gt;
&lt;span class="sd"&gt;     * Выполняет перенаправление на контроллер error и выводит в нём&lt;/span&gt;
&lt;span class="sd"&gt;     * сообщение о ошибке передаваемое в метод.&lt;/span&gt;
&lt;span class="sd"&gt;     * &lt;/span&gt;
&lt;span class="sd"&gt;     * @param string $msg&lt;/span&gt;
&lt;span class="sd"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateAccessError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Доступ запрещён!'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setControllerName&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setActionName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Разместите этот код в файле &lt;code&gt;application/plugins/CheckAccess.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Этот плагин будет выполнять проверку доступа пользователя при каждом,
запросе поступающем на сайт. Для проверки доступа используется класс
Acl, рассмотренный выше. В случае ошибки запрос будет целенаправлен на
error/error. Для того, чтобы корректно выводилось сообщение об ошибке,
вам нужно добавить соответствующий код в ErrorController.php.&lt;/p&gt;
&lt;p&gt;Теперь нужно подключить плагин и создать ресурс Acl в bootstrap:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;_initAcl&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;Zend_Loader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;loadClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Acl'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Zend_Loader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;loadClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CheckAccess'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Zend_Controller_Front&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;registerPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CheckAccess&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Acl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для того чтобы Zend_Loader "знал" где искать наши файлы добавим в
application.ini:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;includePaths.plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;APPLICATION_PATH "/plugins"includePaths.classes = APPLICATION_PATH "/classes"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="acl"></category><category term="auth"></category><category term="i18n"></category><category term="layout"></category><category term="registry"></category><category term="route"></category><category term="zend framework"></category></entry><entry><title>Очистка проекта от служебных файлов subversion</title><link href="/ru/ochistka-proekta-ot-sluzhebnykh-failov-subversion/" rel="alternate"></link><published>2011-06-07T20:32:00+04:00</published><updated>2011-06-07T20:32:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-06-07:/ru/ochistka-proekta-ot-sluzhebnykh-failov-subversion/</id><summary type="html">&lt;p&gt;&lt;img alt="subversion" src="/media/2011/06/subversion_logo_hor-468x64.png" title="subversion"/&gt;&lt;/p&gt;
&lt;p&gt;Если вы используете svn, то при переносе проекта на хостинг вам
понадобится очистить дерево проекта от служебных файлов. SVN сохраняет
свои служебные файлы в директориях .svn по всему проекту. Для того чтобы
удалить все директории .svn нужно выполнить следующие команды:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /var/www/projectfind . -name .svn -exec rm -R &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; -print …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="subversion" src="/media/2011/06/subversion_logo_hor-468x64.png" title="subversion"/&gt;&lt;/p&gt;
&lt;p&gt;Если вы используете svn, то при переносе проекта на хостинг вам
понадобится очистить дерево проекта от служебных файлов. SVN сохраняет
свои служебные файлы в директориях .svn по всему проекту. Для того чтобы
удалить все директории .svn нужно выполнить следующие команды:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /var/www/projectfind . -name .svn -exec rm -R &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; -print
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Я рекомендую выполнять удаление служебных файлов из копии проекта, если
вы не уверены на 100% что не будете использовать svn в дальнейшем.&lt;/p&gt;</content><category term="Linux"></category><category term="svn"></category></entry><entry><title>PHP-класс для работы с typograf.ru</title><link href="/ru/php-klass-dlia-raboty-s-typografru/" rel="alternate"></link><published>2011-06-06T22:14:00+04:00</published><updated>2011-06-06T22:14:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-06-06:/ru/php-klass-dlia-raboty-s-typografru/</id><summary type="html">&lt;p&gt;С недавнего времени начал использовать сервис для подготовки текстов к
web-изданию - &lt;img alt="ТИПО - правильно!" src="http://www.typograf.ru/img/typograf.gif"/&gt;. Очень полезный и удобный
сервис, который позволяет проводить различного рода корректировки
символов и даже выполняет исправление орфографических ошибок.&lt;/p&gt;
&lt;p&gt;Также у данного сервиса есть свое api, которое позволяет внешним сайтам
выполнять запросы на обработку текстов. Для задания дополнительных
параметров обработки …&lt;/p&gt;</summary><content type="html">&lt;p&gt;С недавнего времени начал использовать сервис для подготовки текстов к
web-изданию - &lt;img alt="ТИПО - правильно!" src="http://www.typograf.ru/img/typograf.gif"/&gt;. Очень полезный и удобный
сервис, который позволяет проводить различного рода корректировки
символов и даже выполняет исправление орфографических ошибок.&lt;/p&gt;
&lt;p&gt;Также у данного сервиса есть свое api, которое позволяет внешним сайтам
выполнять запросы на обработку текстов. Для задания дополнительных
параметров обработки текстов используется передача xml-документа с
необходимыми параметрами. Я написал небольшой класс который берет на
себя рутинные операции по сборке xml-документа и отправке запроса
серверу typograf. Также свойства класса задокументированы комментариями
phpdoc для более удобного использования.&lt;/p&gt;
&lt;p&gt;Исходный код доступен здесь: &lt;a href="http://pastebin.com/biQqBrih"&gt;http://pastebin.com/biQqBrih&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Пример использования:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$typograf = new Typograf();&lt;/span&gt;
&lt;span class="x"&gt;// не использовать неразрывные конструкции вместо (неразрывного пробела)&lt;/span&gt;
&lt;span class="x"&gt;$typograf-&amp;gt;nowraped_insert = 0;&lt;/span&gt;
&lt;span class="x"&gt;$description = $typograf-&amp;gt;typograf($_POST['description']);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="php class"></category><category term="typograf"></category></entry><entry><title>Проблема с кэшем facebook и url</title><link href="/ru/problema-s-keshem-facebook-i-url/" rel="alternate"></link><published>2011-06-03T10:55:00+04:00</published><updated>2011-06-03T10:55:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-06-03:/ru/problema-s-keshem-facebook-i-url/</id><summary type="html">&lt;p&gt;&lt;img alt="facebook" src="/media/2011/06/n20531316728_2183540_7053-300x99.jpg" title="facebook"/&gt;&lt;/p&gt;
&lt;p&gt;Здравствуйте! Недавно столкнулся с проблемой при использовании кнопки
like от facebook. Проблема заключалась в том, что в open graph теге был
указан некорректный url. Заметив данную оплошность я сразу её устранил,
но это не повлекло за собой нужного эффекта. Как оказалось, дело в том
что facebook кэширует данные о страницах …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="facebook" src="/media/2011/06/n20531316728_2183540_7053-300x99.jpg" title="facebook"/&gt;&lt;/p&gt;
&lt;p&gt;Здравствуйте! Недавно столкнулся с проблемой при использовании кнопки
like от facebook. Проблема заключалась в том, что в open graph теге был
указан некорректный url. Заметив данную оплошность я сразу её устранил,
но это не повлекло за собой нужного эффекта. Как оказалось, дело в том
что facebook кэширует данные о страницах, которые были залайканы. В этом
нет ничего удивительного, если учесть под какими нагрузками он работает.
Для того, чтобы изменения вступили в силу, нужно подождать некоторое
время (где-то прочитал, что 24-32 часа).&lt;/p&gt;
&lt;p&gt;Как оказалось, есть способ ускорить этот процесс. У facebook есть
отличный инструмент, который анализирует сайт и позволяет производить
отладку open graph тегов, также он дает полезные советы по оптимизации
работы сайта с facebook. Но в контексте нашей проблемы интерес
составляет тот факт, что использование данного инструмента сбрасывает
кэш для анализируемой страницы. Если вы столкнулись с такой же
проблемой, то &lt;a href="http://developers.facebook.com/tools/lint/"&gt;Url Linker&lt;/a&gt; вам поможет.&lt;/p&gt;</content><category term="cache"></category><category term="facebook"></category><category term="url"></category></entry><entry><title>Быстрое добавление виртуальных хостов Apache в Ubuntu/Debian</title><link href="/ru/bystroe-dobavlenie-virtualnykh-khostov-apache-v-ubuntudebian/" rel="alternate"></link><published>2011-05-31T17:51:00+04:00</published><updated>2011-05-31T17:51:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-05-31:/ru/bystroe-dobavlenie-virtualnykh-khostov-apache-v-ubuntudebian/</id><summary type="html">&lt;p&gt;&lt;img alt="apache" src="/media/2011/05/feather.gif" title="apache"/&gt;&lt;/p&gt;
&lt;p&gt;Если вы web-разработчик, который работает сразу над несколькими
проектами, то вам может показаться не удобным использование localhost и
под-директорий для разграничения проектов. Кроме того такой подход
иногда не позволяет приблизится к боевому окружению, когда сайт висит на
отдельном хосте. Поэтому удобно было бы создавать отдельный виртуальный
хост для каждого разрабатываемого …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="apache" src="/media/2011/05/feather.gif" title="apache"/&gt;&lt;/p&gt;
&lt;p&gt;Если вы web-разработчик, который работает сразу над несколькими
проектами, то вам может показаться не удобным использование localhost и
под-директорий для разграничения проектов. Кроме того такой подход
иногда не позволяет приблизится к боевому окружению, когда сайт висит на
отдельном хосте. Поэтому удобно было бы создавать отдельный виртуальный
хост для каждого разрабатываемого проекта, который будет доступен по
удобному адресу. Сейчас мы рассмотрим как произвести быстрое добавление
виртуального хоста в ОС Linux. Я как всегда буду рассматривать настройку
на примере Debian Linux, но я думаю, что процесс не будет очень сильно
отличаться для других дистрибутивов.&lt;/p&gt;
&lt;h2 id="sozdanie-virtualnogo-khosta"&gt;Создание виртуального хоста&lt;/h2&gt;
&lt;p&gt;Для начала необходимо скопировать стандартный файл конфигурации хоста в
apache. Мы будем использовать его в качестве основы для настройки новых
хостов:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/apache2/sites-available/
cp default &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Откроем файл test в любом текстовом редакторе и уведем приблизительно
следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="s"&gt;*:80&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;ServerAdmin&lt;/span&gt; webmaster@localhost
    &lt;span class="nb"&gt;DocumentRoot&lt;/span&gt; &lt;span class="sx"&gt;/var/www&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;Options&lt;/span&gt; FollowSymLinks
        &lt;span class="nb"&gt;AllowOverride&lt;/span&gt; &lt;span class="k"&gt;All&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;/var/www/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;Options&lt;/span&gt; Indexes FollowSymLinks MultiViews
        &lt;span class="nb"&gt;AllowOverride&lt;/span&gt; &lt;span class="k"&gt;All&lt;/span&gt;
        &lt;span class="nb"&gt;Order&lt;/span&gt; allow,deny
        &lt;span class="nb"&gt;allow&lt;/span&gt; from &lt;span class="k"&gt;all&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;ErrorLog&lt;/span&gt; ${APACHE_LOG_DIR}/error.log
    &lt;span class="nb"&gt;LogLevel&lt;/span&gt; &lt;span class="k"&gt;warn&lt;/span&gt;
    &lt;span class="nb"&gt;CustomLog&lt;/span&gt; ${APACHE_LOG_DIR}/access.log combined
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Итак, допустим нам нужно настроить хост с корнем в директории
/var/www/test/ в таком случае изменим файл конфигураций следующим
образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="s"&gt;127.0.1.1:80&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;ServerAdmin&lt;/span&gt; webmaster@localhost
    &lt;span class="nb"&gt;DocumentRoot&lt;/span&gt; &lt;span class="sx"&gt;/var/www/test&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;Options&lt;/span&gt; FollowSymLinks
        &lt;span class="nb"&gt;AllowOverride&lt;/span&gt; &lt;span class="k"&gt;All&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;/var/www/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;Options&lt;/span&gt; Indexes FollowSymLinks MultiViews
        &lt;span class="nb"&gt;AllowOverride&lt;/span&gt; &lt;span class="k"&gt;All&lt;/span&gt;
        &lt;span class="nb"&gt;Order&lt;/span&gt; allow,deny
        &lt;span class="nb"&gt;allow&lt;/span&gt; from &lt;span class="k"&gt;all&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;ErrorLog&lt;/span&gt; ${APACHE_LOG_DIR}/error.log
    &lt;span class="nb"&gt;LogLevel&lt;/span&gt; &lt;span class="k"&gt;warn&lt;/span&gt;
    &lt;span class="nb"&gt;CustomLog&lt;/span&gt; ${APACHE_LOG_DIR}/access.log combined
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;С конфигурацией apache мы закончили, теперь нужно создать символическую
ссылку на наш файл конфигураций в директории /etc/apache2/sites-enabled/
для этого выполним следующую команду:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -s /etc/apache2/sites-available/test /etc/apache2/sites-enabled/test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;или&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a2ensite &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="sozdanie-simvolicheskogo-imeni"&gt;Создание символического имени&lt;/h2&gt;
&lt;p&gt;Т.к. в начале мы указали адрес 127.0.1.1 теперь необходимо связать его с
символическим именем добавив следующую строку в файл /etc/hosts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.1.1  test.loc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;На этом все настройки закончены, можно выполнить перезапуск apache:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь вы можете открыть в браузере http://test.loc или 127.0.1.1 и
увидеть то что находится в директории /var/www/test. Таким образом вы
можете настроить столько хостов, сколько вам нужно, главное выбирать для
каждого из них свой ip-адрес и символическое имя.&lt;/p&gt;
&lt;h2 id="bonus"&gt;Бонус&lt;/h2&gt;
&lt;p&gt;Для тех кто работает с Zend Framework полезным будет настройка хоста с
корнем в директории public. Для этого очевидно нужно просто изменить
путь после DocumentRoot на путь к проекту включающий /public.&lt;/p&gt;
&lt;h2 id="upd"&gt;UPD&lt;/h2&gt;
&lt;p&gt;Более простой способ:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="s"&gt;*:80&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nb"&gt;DocumentRoot&lt;/span&gt; &lt;span class="s2"&gt;"/var/www/skeleton/public"&lt;/span&gt;
   &lt;span class="nb"&gt;ServerName&lt;/span&gt; skeleton.local
   &lt;span class="c"&gt;# This should be omitted in the production environment&lt;/span&gt;
   &lt;span class="nb"&gt;SetEnv&lt;/span&gt; APPLICATION_ENV development
   &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;"/var/www/skeleton/public"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nb"&gt;Options&lt;/span&gt; Indexes MultiViews FollowSymLinks
       &lt;span class="nb"&gt;AllowOverride&lt;/span&gt; &lt;span class="k"&gt;All&lt;/span&gt;
       &lt;span class="nb"&gt;Order&lt;/span&gt; allow,deny
       &lt;span class="nb"&gt;Allow&lt;/span&gt; from &lt;span class="k"&gt;all&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После этого добавляем в /etc/hosts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1 skeleton.local
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Включаем хост и рестартим апач:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a2ensite skeleton# /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;</content><category term="apache"></category><category term="debian"></category><category term="hosts"></category><category term="Linux"></category><category term="администрирование"></category></entry><entry><title>Как НЕ надо разрабатывать на Zend Framework</title><link href="/ru/kak-ne-nado-razrabatyvat-na-zend-framework/" rel="alternate"></link><published>2011-05-22T17:23:00+04:00</published><updated>2011-05-22T17:23:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-05-22:/ru/kak-ne-nado-razrabatyvat-na-zend-framework/</id><summary type="html">&lt;p&gt;&lt;img alt="image" src="/media/2011/05/picresized_th_1306079147_th_5d32a8e917ad3422678efa27eabc46cc.png" title="Zend Framework"/&gt;&lt;br/&gt;
Здравствуйте! На днях подвернулась работа - дописать сайт на zend
framework. Программист, который начал разрабатывать этот проект не
успевал в сроки, не выполнял требования заказчика и в итоге его
заменили. Открыв первый раз исходный код я ужаснулся от того количества
ошибок, которые допускал разработчик и ведь он утверждал заказчику что
является …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="image" src="/media/2011/05/picresized_th_1306079147_th_5d32a8e917ad3422678efa27eabc46cc.png" title="Zend Framework"/&gt;&lt;br/&gt;
Здравствуйте! На днях подвернулась работа - дописать сайт на zend
framework. Программист, который начал разрабатывать этот проект не
успевал в сроки, не выполнял требования заказчика и в итоге его
заменили. Открыв первый раз исходный код я ужаснулся от того количества
ошибок, которые допускал разработчик и ведь он утверждал заказчику что
является опытным специалистом... Далее я попытаюсь рассказать про
некоторые ошибки, которые были им допущены. Данный материал будет
полезен начинающим ZF-программистам, в качестве инструкции того как
делать нельзя. Также я расскажу про некоторые моменты непосредственно не
связанные с фреймворком, но также являющиеся яркими примерами невежества
разработчиков.&lt;/p&gt;
&lt;h2 id="fail-list"&gt;Fail-list&lt;/h2&gt;
&lt;h3 id="ispolzovanie-vstroennykh-metodov-modeli-vmesto-napisaniia-svoikh"&gt;Использование встроенных методов модели, вместо написания своих&lt;/h3&gt;
&lt;p&gt;Первое, что сразу бросилось в глаза - выполнение запросов через объект
модели прямо в коде контроллера, что напрочь перечеркивает все
преимущества MVC. Чтобы было понятно о чем речь приведу пример исходного
кода:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$some_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fetchAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'field1 = ?'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'field2 = ?'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$all_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fetchAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Такой винегрет был в каждом файле контроллера, что очень мешало чтению
кода и исправлению ошибок, постоянно возникали какие-то не очевидные
зависимости, перезаписывались важные данные. Соответственно так делать
не в коем случае нельзя, даже если вы разрабатываете небольшой проект.&lt;/p&gt;
&lt;h3 id="obrashchenie-napriamuiu-k-globalnym-massivam-vmesto-obrashcheniia-k-obektu-request"&gt;Обращение напрямую к глобальным массивам вместо обращения к объекту Request&lt;/h3&gt;
&lt;p&gt;У ZF есть очень удобная оболочка над глобальными переменными в виде
объекта класса Zend_Controller_Request_Http. Данный класс
предоставляет нам массу возможностей по доступу к данным и используется
фреймворком в процессе диспатчинга. Поэтому не стоит пренебрегать
использованием объекта запроса.&lt;/p&gt;
&lt;h3 id="otsutstvie-context-switching-kogda-eto-neobkhodimo"&gt;Отсутствие context-switching когда это необходимо&lt;/h3&gt;
&lt;p&gt;Для реализации обработки ajax-запросов можно воспользоваться, т.н.
context-switch что представляет собой удобный способ изменения формата
ответа. Если вы используете json то в методе init контроллера задать
что-то вроде следующего:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_helper&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;AjaxContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addActionContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ajax-handler'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;initContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь все данные переданные во view в экшене ajax-handler будут
перекодированы в формат json. Этот способ является более
предпочтительным по сравнению с отключением view и ручным
конвертированием данных в json.&lt;/p&gt;
&lt;h3 id="prenebrezhenie-ispolzovaniem-zend_form-i-zend_validate"&gt;Пренебрежение использованием Zend_Form и Zend_Validate&lt;/h3&gt;
&lt;p&gt;Не стоит использовать функции php для валидации данных, т.к. в ZF есть
очень удобные валидаторы, которые можно объединять в группы и ставить на
обработку определенных полей формы. Используя ZF-валидаторы вы
уменьшаете шанс, того вы что-нибудь упустите и тем самым делаете ваши
приложения более устойчивыми.&lt;/p&gt;
&lt;h3 id="otsutstvie-proverki-korrektnosti-dannykh"&gt;Отсутствие проверки корректности данных&lt;/h3&gt;
&lt;p&gt;Вы должны проверять все данные полученные вами от пользователя, причем
вы должны проверять их в контексте прав доступа данного пользователя,
например, если вы пишите добавление/удаление материалов из списка
избранного и у вас есть js-функции вроде приведенных ниже, то вам стоит
очень хорошо задуматься:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/realestate/favorite/oid/'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;object_id&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'/uid/'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;            
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#addfavorite"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;object_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;removeObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/profile/removefavorite/oid/'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;object_id&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'/uid/'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#removefavorite"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;object_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Как выяснилось потом на сервер-сайд user_id не проверялся на равенство
идентификатору текущего пользователя и это печально...&lt;/p&gt;
&lt;h3 id="ispolzovanie-vmesto-acl-ierarkhii-klassov-kontrollerov"&gt;Использование вместо ACL, иерархии классов контроллеров&lt;/h3&gt;
&lt;p&gt;Практически в каждом сайте есть несколько уровней доступа: гости,
пользователи, администраторы и т.д. Для того чтобы контролировать права
доступа статусов к определенным частям сайта были использованы иерархии
контроллеров. Т.е. создавался класс-родитель для контроллеров админки,
класс для остальных контроллеров и в этом родительском классе
выполнялось что-то вроде этого:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;preDispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// А вот пример глобальных переменных *fail*&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'session'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nb"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'session'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Auth&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hasIdentity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'backoffice/auth/login'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Чем плох такой подход? Во-первых, очень сложным является
перераспределение прав доступа. Во-вторых, тяжело поддерживать несколько
ролей. Я могу долго продолжать :)&lt;/p&gt;
&lt;p&gt;Для данных целей в ZF, есть прекрасный инструмент формирования списков
прав доступа или ACL. Лично я использую небольшой плагин, который
проверяет права доступа данного пользователя на запрашиваемый
экшн/контроллере в процессе диспатчинга. Данный способ позволяет
формировать права доступа в простом, легко изменяемом списке, вроде
этого:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="c1"&gt;//Добавляем роли&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'manager'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Добавляем ресурсы&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest_allow'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index/index'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'guest_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index/registration'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'guest_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error/error'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'guest_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user_allow'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index/logout'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'user_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'project/index'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'user_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task/index'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'user_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task/complete'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'user_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task/assigned'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'user_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'manager_allow'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'project/add'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'manager_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task/add'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'manager_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index/add-user'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'manager_allow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Выставляем права, по-умолчанию всё запрещено&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'guest_allow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'user_allow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'manager'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'manager_allow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="filtratsiia-dannykh-v-poliakh-formy-otvechaiushchikh-za-vvod-parolia"&gt;Фильтрация данных в полях формы отвечающих за ввод пароля&lt;/h3&gt;
&lt;p&gt;Никогда, никогда не фильтруйте данные которые поступают из поля ввода
пароля! Это чревато долгими попытками найти причину, по которой
пользователи не могут залогинится. В моем случае причиной было
следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="nv"&gt;$f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Filter_StripTags&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$pwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'pwd'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Учитывая что пароли должны хранится в зашифрованном виде и никогда не
должны выводится, наличие в них тегов, или пробелов, никаким образом не
может привести к уязвимостям, соответственно и фильтрация ни к чему&lt;/p&gt;
&lt;h3 id="predusmatrivat-lokalizatsiiu-nuzhno-za-ranee"&gt;Предусматривать локализацию нужно за ранее&lt;/h3&gt;
&lt;p&gt;Часто почему-то локализацию проекта выносят на второй план, т.е. сначала
все запилим, а потом уже прикрутим локализацию. Это большая ошибка, т.к.
потом прикрутить её будет очень трудно. Нужно будет отыскать все не
локализованные строки, а это очень длительный процесс. Намного проще
сразу корректным образом обработать строки, которые требуют
мультиязычности.&lt;/p&gt;
&lt;h3 id="ispolzovanie-tekstovykh-konstant-vmesto-logicheskikh-peremennykh"&gt;Использование текстовых констант вместо логических переменных&lt;/h3&gt;
&lt;p&gt;В завершении хочу рассказать про интересный способ замены логических
переменных строками. В коде я нашел что-то вроде этого:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;view&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ok'&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;view&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'fail'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Здесь никакого дополнительного пояснения не требуется, я думаю последняя
строка очень красноречиво делает это за меня :D&lt;/p&gt;
&lt;h2 id="zakliuchenie_1"&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Это далеко не полный список ошибок, которые были найдены в процессе
доработки проекта, но основные я описал. Надеюсь, кто-то прочитав данный
материал станет писать лучше. Спасибо за внимание!&lt;/p&gt;</content><category term="code rules"></category><category term="fail"></category><category term="zend framework"></category></entry><entry><title>Web-чат polling на Node.JS</title><link href="/ru/web-chat-polling-na-nodejs/" rel="alternate"></link><published>2011-04-10T21:49:00+04:00</published><updated>2011-04-10T21:49:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-04-10:/ru/web-chat-polling-na-nodejs/</id><summary type="html">&lt;p&gt;&lt;img alt="чат" src="/media/2011/04/conversacion-150x150.png" title="чат"/&gt;&lt;/p&gt;
&lt;p&gt;Продолжим тему создания чата на Node.JS. На этот раз напишем чат,
который будет в качестве клиентов использовать браузеры.&lt;/p&gt;
&lt;h2 id="problema"&gt;Проблема&lt;/h2&gt;
&lt;p&gt;Т.к. протокол HTTP не позволяет устанавливать постоянное соединение
сервера с клиентом, то нам необходимо самостоятельно инициировать
соединение для считывания новых сообщений. Для этого существует
множество способов, но мы для …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="чат" src="/media/2011/04/conversacion-150x150.png" title="чат"/&gt;&lt;/p&gt;
&lt;p&gt;Продолжим тему создания чата на Node.JS. На этот раз напишем чат,
который будет в качестве клиентов использовать браузеры.&lt;/p&gt;
&lt;h2 id="problema"&gt;Проблема&lt;/h2&gt;
&lt;p&gt;Т.к. протокол HTTP не позволяет устанавливать постоянное соединение
сервера с клиентом, то нам необходимо самостоятельно инициировать
соединение для считывания новых сообщений. Для этого существует
множество способов, но мы для начала воспользуемся самым примитивным -
polling. Данный способ представляет собой постоянное опрашивание сервера
через определённые интервалы времени. Сразу хочу уточнить, что данный
способ ОЧЕНЬ не оптимален с точки зрения использования ресурсов сервера
и сетевого канала, но для обучающих целей он вполне пригоден. В реальных
приложениях стоит использовать более продвинутые средства, которые я
постараюсь в скором времени рассмотреть в этом блоге. Итак, поехали!&lt;/p&gt;
&lt;h2 id="struktura"&gt;Структура&lt;/h2&gt;
&lt;p&gt;Сначала рассмотрим структуру нашего приложения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Клиент&lt;/strong&gt; - скрипт на jquery, который выполняет следующие функции:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Отправка сообщения серверу&lt;/li&gt;
&lt;li&gt;Запрос у сервера данных о новых сообщениях и их отображение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Сервер&lt;/strong&gt; - скрипт на Node.js. Выполняет следующие функции:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Добавляет присланные клиентами сообщения в массив сообщений&lt;/li&gt;
&lt;li&gt;Отдает клиентам новые сообщения&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="realizatsiia"&gt;Реализация&lt;/h2&gt;
&lt;h3 id="klientskaia-chast"&gt;Клиентская часть&lt;/h3&gt;
&lt;p&gt;Для реализации клиентской части напишем небольшую страницу, которая
будет отвечать за визуализацию сообщений и их отправку. Весь код
приводить не буду, только интересные части:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".message-row"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".message-row:last"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://127.0.0.1:8124/?id='&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;amp;callback=?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#mess"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="message-row" id="mess'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'"&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#chat-body"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".message-row:last"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#chat-body"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#chat-body"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"scrollHeight"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Данная функция будет отвечать за получение новых сообщений от сервера и
их визуализацию. Каждое сообщение будет идентифицироваться уникальным id
которое равно порядковому номеру сообщения. При визуализации каждое
сообщение помещается в div и к нему прикрепляется id при помощи
&lt;a href="http://jqapi.com/#p=data"&gt;.data()&lt;/a&gt;. Затем перед тем как запросить новые сообщения мы получаем
id последнего сообщения и помещаем его в запрос. В случае если сообщений
до запроса не было - передаем магическое число -1.&lt;/p&gt;
&lt;p&gt;Т.к. наш сервер весит на специфическом порту, то для взаимодействия с
ним необходимо использовать cross domain ajax. Данный метод
подразумевает передачу последним параметром названия некой callback
функции. Генерацию этой функции берёт на себя jquery. Всё что нужно от
нас - это передать последним параметром в запросе ключ callback со
значением "?". Далее jquery заменит знак вопроса на название нашей
функции, которое он генерирует случайным образом. Всё что от нас
требовалось для реализации меж доменного ajax на стороне клиента мы
выполнили, особенности реализации на стороне сервера рассмотрим чуть
позже.&lt;/p&gt;
&lt;p&gt;Рассмотрим остальной код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Запускаем предварительную инициализацию списка сообщений и ставим
обработчик по таймеру, который будет вызываться каждые 2,5 секунды.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ....&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#send-button"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".message-row"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".message-row:last"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://127.0.0.1:8124/?message='&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input[name=message]"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;amp;username='&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input[name=nick]"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;amp;id='&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;amp;callback=?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="message-row" id="mess'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'"&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#chat-body"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".message-row:last"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#chat-body"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#chat-body"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"scrollHeight"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input[name=message]"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// ....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ставим обработчик нажатия кнопки отправки сообщения. Здесь ничего
нового, просто такой же запрос как и в функции load за исключением того
что мы передаём дополнительные параметры - текст сообщения и псевдоним
пользователя.&lt;/p&gt;
&lt;h3 id="servernaia-chast"&gt;Серверная часть&lt;/h3&gt;
&lt;p&gt;Тут начинается самое интересное :) Для реализации обмена по протоколу
HTTP в node.js есть одноименный модуль. Также мы будем использовать
модуль url для получения переданных нам параметров. Теперь рассмотрим
код, постараюсь как можно подробнее прокомментировать:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Подключение модулей&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Массив сообщений&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// Создаем сервер и ставим обработчик запроса&lt;/span&gt;
&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="c1"&gt;// Получаем url&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Извлекаем параметры&lt;/span&gt;
  &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Если получено сообщение, то добавляем его в массив&lt;/span&gt;
  &lt;span class="c1"&gt;// предварительно объединив его с псевдонимом пользователя&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
      &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;': '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Извлекаем идентификатор сообщения&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Получаем количество сообщений в массиве&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Если пользователь только подключился,&lt;/span&gt;
  &lt;span class="c1"&gt;// то отдаём ему 10 последних сообщений&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Иначе отдаем те сообщения которые были получены после &lt;/span&gt;
  &lt;span class="c1"&gt;// сообщения с переданным идентификатором&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Формируем результирующий массив сообщений&lt;/span&gt;
  &lt;span class="nx"&gt;ret_messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;ret_messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Кодируем массив в json&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ret_messages&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Устанавливаем заголовки ответа&lt;/span&gt;
  &lt;span class="c1"&gt;// Второй заголовок необходим для&lt;/span&gt;
  &lt;span class="c1"&gt;// cross domain ajax&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Access-Control-Allow-Origin"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="c1"&gt;// Устанавливаем тело ответа и закрываем соединение&lt;/span&gt;
  &lt;span class="c1"&gt;// имитируем вызов метода&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'(\''&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'\')'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// Вешаем сервер слушать 8124 порт на 127.0.0.1&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"127.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Server running at http://127.0.0.1:8124/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Всё достаточно прозрачно, кроме небольших заклинаний необходимых для
корректной работы cross domain ajax. Для того чтобы использовать чат в
сети поменяйте ip-адрес в 63 строке на свой внешний ip. Также не
забудьте поменять ip-адрес в клиенте.&lt;/p&gt;
&lt;p&gt;Здесь можете найти архив с полным кодом приложения - &lt;a href="stuff/web-chat-polling.zip"&gt;код&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Спасибо за внимание, подписывайтесь на RSS, все вопросы в комментарии
ниже!&lt;/p&gt;</content><category term="cross domain ajax"></category><category term="java script"></category><category term="jquery"></category><category term="node.js"></category><category term="polling"></category></entry><entry><title>Node.JS + MySQL</title><link href="/ru/nodejs-mysql/" rel="alternate"></link><published>2011-03-28T18:47:00+04:00</published><updated>2011-03-28T18:47:00+04:00</updated><author><name>Admin</name></author><id>tag:None,2011-03-28:/ru/nodejs-mysql/</id><summary type="html">&lt;p&gt;&lt;img alt="Mysql + Node.js" src="/media/2011/03/Mysql-300x76.png" title="Mysql + Node.js"/&gt;&lt;/p&gt;
&lt;p&gt;В последнем проекте появилась необходимость
организации работы Node.JS с MySQL. Для создания данного взаимодействия
существует несколько модулей, я решил использовать &lt;strong&gt;node-mysql&lt;/strong&gt;, т.к.
он предоставляет все необходимые мне функции.&lt;/p&gt;
&lt;h2 id="ustanovka-node-mysql"&gt;Установка node-mysql&lt;/h2&gt;
&lt;p&gt;Для установки воспользуемся git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.node_libraries
git clone git://github.com/felixge/node-mysql.git mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После этого вы …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Mysql + Node.js" src="/media/2011/03/Mysql-300x76.png" title="Mysql + Node.js"/&gt;&lt;/p&gt;
&lt;p&gt;В последнем проекте появилась необходимость
организации работы Node.JS с MySQL. Для создания данного взаимодействия
существует несколько модулей, я решил использовать &lt;strong&gt;node-mysql&lt;/strong&gt;, т.к.
он предоставляет все необходимые мне функции.&lt;/p&gt;
&lt;h2 id="ustanovka-node-mysql"&gt;Установка node-mysql&lt;/h2&gt;
&lt;p&gt;Для установки воспользуемся git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.node_libraries
git clone git://github.com/felixge/node-mysql.git mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После этого вы можете без проблем использовать данный модуль в вашей
работе.&lt;/p&gt;
&lt;h2 id="ustanovka-soedineniia"&gt;Установка соединения&lt;/h2&gt;
&lt;p&gt;Перед началом выполнения запросов к БД необходимо выполнить подключение
к серверу MySQL. Рассмотрим как сделать это при помощи модуля node-mysql
в node.js:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mysql'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Первые две строки отвечают за подключение модуля и создания
объекта-клиента. Далее задаются параметры аутентификации и вызывается
метод connect. После этого если вы корректно указали пару логин-пароль,
то будет установлено соединение. Последняя строка соответственно
завершает соединение с сервером.&lt;/p&gt;
&lt;h3 id="otstuplenie"&gt;Отступление&lt;/h3&gt;
&lt;p&gt;Для того что-бы наш MySQL клиент мог передать данные аутентификации
необходимо чтобы node.js был скомпилирован с поддержкой ssl, иначе при
попытке установления соединения он будет жутко ругатся из-за то что не
сможет зашифровать пароль. Для корректной компиляции node.js с
поддержкой ssl в Debian вам потребуется пакет libssl-dev&lt;/p&gt;
&lt;h2 id="vypolnenie-zaprosov_1"&gt;Выполнение запросов&lt;/h2&gt;
&lt;p&gt;Сначала создадим тестовую базу данных и таблицу в ней:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt;  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;test_nodejs&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="nb"&gt;CHARACTER&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;utf8&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;utf8_general_ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;USE&lt;/span&gt; &lt;span class="n"&gt;test_nodejs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt;  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;test_nodejs&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;BIGINT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;some_text_data&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;some_date&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;DATE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MYISAM&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь приступим непосредственно к выполнению запросов.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mysql'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Устанавливаем логин&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Устанавливаем пароль&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Устанавливаем соединение&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'USE test_nodejs'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Выполняем запрос на выбор БД&lt;/span&gt;
&lt;span class="c1"&gt;//  Запрос на вставку&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'INSERT INTO test VALUES (NULL, \'Test\', \'03-28-2011\')'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
    &lt;span class="c1"&gt;// Запрос на выборку&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SELECT * FROM test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Если возникла ошибка выбрасываем исключение&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// выводим результат&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// Завершаем соединение&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для тех кто уже достаточно освоился в асинхронном программировании
данный код не вызовет трудностей. Для выполнения запросов используется
метод клиента query, который кроме самого запроса принимает
callback-функцию с параметрами error (ошибка, если возникла), result
(массив объектов результата запроса), fields (описание полей из
множества полей результата). В результате выполнения вышеприведённого
кода получим:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;node test.js 
{ id: 
   { length: 45,
     received: 45,
     number: 2,
     type: 4,
     catalog: 'def',
     db: 'test_nodejs',
     table: 'test',
     originalTable: 'test',
     name: 'id',
     originalName: 'id',
     charsetNumber: 63,
     fieldLength: 20,
     fieldType: 8,
     flags: 16899,
     decimals: 0 },
  some_text_data: 
   { length: 69,
     received: 69,
     number: 3,
     type: 4,
     catalog: 'def',
     db: 'test_nodejs',
     table: 'test',
     originalTable: 'test',
     name: 'some_text_data',
     originalName: 'some_text_data',
     charsetNumber: 192,
     fieldLength: 765,
     fieldType: 253,
     flags: 4097,
     decimals: 0 },
  some_date: 
   { length: 59,
     received: 59,
     number: 4,
     type: 4,
     catalog: 'def',
     db: 'test_nodejs',
     table: 'test',
     originalTable: 'test',
     name: 'some_date',
     originalName: 'some_date',
     charsetNumber: 63,
     fieldLength: 10,
     fieldType: 10,
     flags: 4225,
     decimals: 0 } }
[ { id: 1,
    some_text_data: 'Test',
    some_date: Invalid Date } ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;На этом всё. Если есть какие-либо вопросы по данной теме, задавайте их в
комментариях ниже, постараюсь ответить.&lt;/p&gt;</content><category term="MySQL"></category><category term="node-mysql"></category><category term="node.js"></category></entry><entry><title>Тестируем производительность конструкций языка PHP</title><link href="/ru/testiruem-proizvoditelnost-konstruktsii-iazyka-php/" rel="alternate"></link><published>2011-03-13T14:18:00+03:00</published><updated>2011-03-13T14:18:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-03-13:/ru/testiruem-proizvoditelnost-konstruktsii-iazyka-php/</id><summary type="html">&lt;p&gt;Здравствуйте! Часто в повседневной практике программирования мы
используем те или иные конструкции php не задумываясь о их
производительности. А учитывая, что VDS сейчас стоят не дёшево, нужно
стараться уменьшить нагрузку наших приложений всеми доступными
средствами. Сегодня я проведу сравнительный тест разных конструкций
языка php выполняющих сходные функции. Выбрав оптимальные, по …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Здравствуйте! Часто в повседневной практике программирования мы
используем те или иные конструкции php не задумываясь о их
производительности. А учитывая, что VDS сейчас стоят не дёшево, нужно
стараться уменьшить нагрузку наших приложений всеми доступными
средствами. Сегодня я проведу сравнительный тест разных конструкций
языка php выполняющих сходные функции. Выбрав оптимальные, по
результатам теста, конструкции вы сможете не только отложить покупку
более дорого серверного оборудования, но и просто ускорить работу ваших
сайтов, что уж точно оценят пользователи. Итак, поехали!&lt;/p&gt;
&lt;h2 id="testirovanie-proizvoditelnosti"&gt;Тестирование производительности&lt;/h2&gt;
&lt;h3 id="konkatenatsiia-strok-vs-dvoinye-kavychki"&gt;"Конкатенация строк" vs "Двойные кавычки"&lt;/h3&gt;
&lt;p&gt;Данная конструкция используется в каждом приложении и очень часто,
поэтому стоит оценить различные варианты конкатенации строк:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="c1"&gt;// Двойные кавычки&lt;/span&gt;
&lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"count - &lt;/span&gt;&lt;span class="si"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Конкатенация&lt;/span&gt;
&lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'count - '&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Тип конструкции&lt;/th&gt;
&lt;th align="left"&gt;Время выполнения&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Двойные кавычки&lt;/td&gt;
&lt;td align="left"&gt;0.505 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Конкатенация&lt;/td&gt;
&lt;td align="left"&gt;0.424 с&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Конкатенация работает быстрее приблизительно на 16%.&lt;/p&gt;
&lt;h3 id="obkhod-massivov"&gt;Обход массивов&lt;/h3&gt;
&lt;p&gt;Теперь проверим производительность различных способов перебора элементов
массива. В качестве примера будем считать сумму элементов массива,
обходя его различными способами&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="c1"&gt;// Способ №1. Простой foreach без ключа&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Способ №2. Foreach с выборкой ключа&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Способ №3. Foreach с получением значения по ссылке&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Способ №4. Цикл For и функция next()&lt;/span&gt;
&lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;current&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Способ №5. While и функция each()&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Способ №6. Обычный For&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Тип конструкции&lt;/th&gt;
&lt;th align="left"&gt;Время выполнения&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Способ №1. Простой foreach без ключа&lt;/td&gt;
&lt;td align="left"&gt;0.112 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Способ №2. Foreach с выборкой ключа&lt;/td&gt;
&lt;td align="left"&gt;0.131 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Способ №3. Foreach с получением значения по ссылке&lt;/td&gt;
&lt;td align="left"&gt;0.144 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Способ №4. Цикл For и функция next()&lt;/td&gt;
&lt;td align="left"&gt;0.383 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Способ №5. While и функция each()&lt;/td&gt;
&lt;td align="left"&gt;1.180 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Способ №6. Обычный For&lt;/td&gt;
&lt;td align="left"&gt;0.120 с&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Как выяснилось наиболее быстрым способом обхода массива является foreach
без выборки ключа. Также на мой взгляд данный способ является наиболее
удобным, а если совершать выборку ключа и/или значения по ссылке, то он
становится наиболее универсальным. Также неплохой результат показал
классический цикл for с перебором элементов используя числовые индексы в
естественном порядке, но очевидно данный способ нельзя использовать для
перебора ассоциативных массивов, что является огромным минусом. Самым
"прожорливым" оказался while с использованием функции each, т.к. он не
дает никаких особых преимуществ и по сути повторяет функционал foreach,
то использовать его нет смысла.&lt;/p&gt;
&lt;h3 id="dobavlenie-elementov-v-konets-massiva"&gt;Добавление элементов в конец массива&lt;/h3&gt;
&lt;p&gt;Тоже довольно часто используемой операцией является добавление новых
элементов в конец массива. Протестируем наиболее часто используемые
способы:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="c1"&gt;//Способ №1. &lt;/span&gt;
&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Способ №2&lt;/span&gt;
&lt;span class="nb"&gt;array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Тип конструкции&lt;/th&gt;
&lt;th align="left"&gt;Время выполнения&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Способ №1&lt;/td&gt;
&lt;td align="left"&gt;0.503 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Способ №2&lt;/td&gt;
&lt;td align="left"&gt;0.998 с&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Как вы видите первый способ работает в 2 раза быстрее и при этом менее
громоздок. Поэтому я рекомендую использовать именно его.&lt;/p&gt;
&lt;h3 id="operator-vetvleniia-vs-ternarnyi-operator"&gt;"Оператор ветвления" vs "Тернарный оператор"&lt;/h3&gt;
&lt;p&gt;Теперь сравним производительность стандартной операции ветвления на
примере if-else и тернарного оператора:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="c1"&gt;// if-else&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Тернарный оператор&lt;/span&gt;
&lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Тип конструкции&lt;/th&gt;
&lt;th align="left"&gt;Время выполнения&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;if-else&lt;/td&gt;
&lt;td align="left"&gt;0.126 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Тернарный оператор&lt;/td&gt;
&lt;td align="left"&gt;0.176 с&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Тернарный оператор не на много, но всё же отстает от классического
if-else, но т.к. тернарный оператор менее громоздок, то его можно
использовать, если конечно это происходит не в цикле на миллион итераций
;)&lt;/p&gt;
&lt;h3 id="proverka-sushchestvovaniiane-ravenstvo-null-peremennoi"&gt;Проверка существования/не-равенство-null переменной&lt;/h3&gt;
&lt;p&gt;Часто бывает необходимо проверить существует ли переменная и/или равна
null. Для этого можно воспользоваться несколькими методами, например
одной из стандартных функций php (is_null, isset, empty) или просто
сравнивать переменную с null. Протестируем каждый из этих способов:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="c1"&gt;// Сравнение с null&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Эквивалентно null&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// isset&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// is_null&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_null&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//empty&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="nv"&gt;$summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Тип конструкции&lt;/th&gt;
&lt;th align="left"&gt;Время выполнения&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Сравнение с null "=="&lt;/td&gt;
&lt;td align="left"&gt;0.652 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Эквивалентное сравнение с nul "==="&lt;/td&gt;
&lt;td align="left"&gt;0.709 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;isset&lt;/td&gt;
&lt;td align="left"&gt;0.080 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;is_null&lt;/td&gt;
&lt;td align="left"&gt;1.021 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;empty&lt;/td&gt;
&lt;td align="left"&gt;0.105 с&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Как вы видите isset оставил всех конкурентов далеко позади глотать пыль.
Рекомендую использовать именно isset, т.к. он кроме того что работает
намного быстрее всех остальных способов, ещё и не генерирует notice'ов,
так что если вы не уверены установлена ли переменная, лучше проверить её
при помощи isset и быть спокойным, т.к. никаких нотисов не будет
выводится. Также стоит отметить первый способ, т.к. он не совсем
подходит под данную категорию и он будет возвращать true, при любом
значении переменной являющемся ложным, будь-то null, не установленная
переменная или пустая строка.&lt;/p&gt;
&lt;h2 id="otstuplenie-proizvoditelnost-i-soobshcheniia-ob-oshibkakh-php_1"&gt;Отступление: производительность и сообщения об ошибках php&lt;/h2&gt;
&lt;p&gt;Интерпретатор php генерирует множество разных сообщений: ошибки,
предупреждения, уведомления и тд. При разработке эти сообщения
безусловно помогают в поиске ошибок и их устранении, но также они имеют
и негативное влияние, а именно - жуткое снижение производительности.
Проведём простой тест:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nb"&gt;error_reporting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$timer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_null&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$timer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Вроде бы простой участок кода, не должен вызывать никаких осложнений. И
действительно результат выполнения данного теста показывает 0.110 с. А
теперь мы попробуем убрать первую строку отвечающую за подавление ошибок
и получим следующий результат: 1.11 c. Т.е. время выполнения увеличилось
в 10 раз! А всё из-за чего? Из-за того, что переменная $b не была
определена и соответственно php сгенерировал notice. Из этого стоит
сделать вывод - сообщения об ошибках только при разработке, но никак не
на продакшене.&lt;/p&gt;
&lt;h2 id="zakliuchenie"&gt;Заключение&lt;/h2&gt;
&lt;p&gt;На этом всё, в заключении хочу представить конфигурацию системы на
которой проводил тесты: Intel Core 2 Duo E8200 (2.6 Ггц), 2 Гб ОП,
Debian 6.0, PHP 5.3.3-7 with Suhosin-Patch, Apache 2.2.16. Возможно в
скором времени я протестирую производительность других конструкций php,
поэтому подписывайтесь на RSS-ленту, чтобы быть в теме :) Спасибо за
внимание!&lt;/p&gt;</content><category term="benchmark"></category><category term="PHP"></category></entry><entry><title>Special Case (особый случай)</title><link href="/ru/special-case-osobyi-sluchai/" rel="alternate"></link><published>2011-03-07T12:56:00+03:00</published><updated>2011-03-07T12:56:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-03-07:/ru/special-case-osobyi-sluchai/</id><summary type="html">&lt;p&gt;Сегодня мы обсудим паттерн Special Case. Данный паттерн представляет
собой гибкий способ обхода ограничений возникающих при появлении, т.н.
специальных случаев.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;При проектировании объектно-ориентированной системы часто возникают
ситуации, когда нужно обработать какой-либо особый случай, который
выбивается из обычного цикла работы. При этом возникает необходимость
проверять возникновение такой ситуации по …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Сегодня мы обсудим паттерн Special Case. Данный паттерн представляет
собой гибкий способ обхода ограничений возникающих при появлении, т.н.
специальных случаев.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;При проектировании объектно-ориентированной системы часто возникают
ситуации, когда нужно обработать какой-либо особый случай, который
выбивается из обычного цикла работы. При этом возникает необходимость
проверять возникновение такой ситуации по всей системе, что само-собой
приводит к неприятным последствиям. Примером такого случая может быть
возвращение null вместо объекта при отсутствии или некорректности
каких-либо данных. При этом приходится после получения ссылки на такой
объект проверять равенство его нулю и отдельным образом обрабатывать
каждый такой случай. Это очевидно приводит к жуткому дублированию кода,
что неминуемо будет приводить к копи-пасту и соответственно множеству
ошибок и ограничений.&lt;/p&gt;
&lt;p&gt;Как вы наверное уже догадались справится с данной проблемой нам поможет
паттерн Special Case. Суть данного паттерна заключается в замене таких
особых случаев на специальный объект, имеющий тот же тип и возврат его
вызывающему коду. Полученный объект будет иметь точно такой же
интерфейс, как и у обычного класса и соответственно нам не потребуется
выполнять никаких скучных проверок. Заменив возврат особых случаев на
специализированный объект мы значительно улучшаем архитектуру
приложения, т.к. вызывающий код не будет заботится о том каким образом
создаётся объект и от чего зависит его нормальная инициализация.&lt;/p&gt;
&lt;h2 id="primer"&gt;Пример&lt;/h2&gt;
&lt;p&gt;Самый очевидным примером данного шаблона проектирования может служить
иерархия классов пользователей. В данном случае особым случаем будет
пользователь гость, т.к. он не представлен в БД, т.к. другие
пользователи. Рассмотрим следующий упрощенный пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$user_info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id_user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Вытягиваем информацию о пользователе из БД&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getEmail&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getStatus&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt;     * Проверка прав доступа пользователя&lt;/span&gt;
&lt;span class="sd"&gt;     * @param string $action&lt;/span&gt;
&lt;span class="sd"&gt;     * @return bool &lt;/span&gt;
&lt;span class="sd"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;checkAccessRights&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$action&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'access_rights'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'access_rights'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nv"&gt;$action&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Guest_User&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Стандартные значения для гостя&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Uknown user'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt;     * Гость может только читать&lt;/span&gt;
&lt;span class="sd"&gt;     * @param string $action&lt;/span&gt;
&lt;span class="sd"&gt;     * @return bool &lt;/span&gt;
&lt;span class="sd"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;checkAccessRights&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'read'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;У нас есть два класса: User и Guest_User. Класс Guest_User является
реализацией шаблона особый случай. Если нет возможности идентифицировать
пользователя, то мы просто возвращаем экземпляр класса Guest_User,
который имеет такой же интерфейс, как и класс User. Вызывающий код
спокойно продолжает работать не замечая подмены объекта. Далее приведу
пример использования данных классов:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;get_user_object&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Guest_User&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Эта простая функция проверяет наличие объекта в сессии и если он не
найден или не корректен, то создает нашу реализацию Special Case, иначе
- значение из сессии.&lt;/p&gt;
&lt;p&gt;На этом всё. Не забывайте подписываться на rss и оставлять свои
комментарии!&lt;/p&gt;</content><category term="ООП"></category><category term="Паттерны проектирования"></category></entry><entry><title>Registry (реестр)</title><link href="/ru/registry-reestr/" rel="alternate"></link><published>2011-02-28T21:38:00+03:00</published><updated>2011-02-28T21:38:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-02-28:/ru/registry-reestr/</id><summary type="html">&lt;p&gt;&lt;img alt="registry" src="/media/2011/02/Windows-7-Registry-Tricks-150x150.jpg" title="registry"/&gt;&lt;/p&gt;
&lt;p&gt;Рассмотрим паттерн проектирования - реестр. Данный паттерн является
чем-то вроде безопасной замены глобальных переменных. При помощи данного
шаблона вы сможете обмениваться данными в многоуровневом приложении.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Наверное все сложные системы являются многоуровневыми, иначе мы бы
просто не смогли уследить за всеми зависимостями и связями внутри
системы. Разбивая систему на независимые уровни …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="registry" src="/media/2011/02/Windows-7-Registry-Tricks-150x150.jpg" title="registry"/&gt;&lt;/p&gt;
&lt;p&gt;Рассмотрим паттерн проектирования - реестр. Данный паттерн является
чем-то вроде безопасной замены глобальных переменных. При помощи данного
шаблона вы сможете обмениваться данными в многоуровневом приложении.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Наверное все сложные системы являются многоуровневыми, иначе мы бы
просто не смогли уследить за всеми зависимостями и связями внутри
системы. Разбивая систему на независимые уровни обменивающиеся данными
только через строго определённый интерфейс мы получаем возможность
менять реализацию отдельных уровней не опасаясь потерять
работоспособность системы. Но при этом мы получаем ряд ограничений,
главным из которых является сложность реализации обмена данными между не
смежными уровнями. Вот тут-то мы и вспоминаем о том, как хорошо было
использовать глобальные переменные и не заботится о том, что-бы данные
были доступны в определённом месте приложения. Но т.к. причины отказа от
использования глобальных переменных были более чем серьёзными нам нужно
искать другое решение проблемы.&lt;/p&gt;
&lt;p&gt;К счастью мы не первые, кто столкнулся с подобной проблемой. Решение уже
было найдено и им является - паттерн Registry. Данный паттерн
представляет собой класс, который хранит в себе некоторые данные (часто
объекты, но не обязательно) и предоставляет к ним доступ через
статические методы или как шаблон &lt;a href="/PHP/singleton-odinochka/"&gt;одиночка&lt;/a&gt;. Т.к. получить доступ к
такому классу можно из любой точки приложения, то мы получаем все
преимущества глобальных переменных без некоторых их недостатков. Теперь,
например, вы не сможете случайно затереть важные данные, т.к. это может
произойти с глобальными переменными.&lt;/p&gt;
&lt;h2 id="realizatsiia"&gt;Реализация&lt;/h2&gt;
&lt;p&gt;Типичным примером паттерна реестр является объект хранящий параметры
системы в виде древовидной структуры. Т.к. доступ к конфигурациям
системы может потребоваться на любом уровне приложения, то мы можем
воспользоваться паттерном реестр. Обеспечив единою точку для доступа к
параметрам мы получаем дополнительные преимущества, например, мы
перестаем зависеть от способа хранения конфигураций и можем легко
перейти от хранения параметров в ini-файле к хранению в БД или в
memcache. Итак, реализуем такой класс на языке php:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt; * Интерфейс загрузчиков ресурсов, отвечает за загрузку ресурсов из хранилища, &lt;/span&gt;
&lt;span class="sd"&gt; * должен возвращать массив параметров&lt;/span&gt;
&lt;span class="sd"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Loader&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt; * Класс загрузчик параметров из файла содержащего сериализованные данные&lt;/span&gt;
&lt;span class="sd"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Serialize_File_Loader&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Loader&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Должен быть указан путь к файлу с параметрами в формате сериализавонного массива php'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;file_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_readable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Файл не существует или его невозможно считать'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;unserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Некорректный формат файла'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt; * Класс загрузчик параметров из файла содержащего данные в формате JSON&lt;/span&gt;
&lt;span class="sd"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSON_File_Loader&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Loader&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Должен быть указан путь к файлу с параметрами в формате JSON'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;file_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_readable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Файл не существует или его невозможно считать'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Некорректный формат файла'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parameters_Registry&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Countable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt;     * Собственно данные&lt;/span&gt;
&lt;span class="sd"&gt;     * @var array&lt;/span&gt;
&lt;span class="sd"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt;     * Статическая переменная - ссылается на экземпляр данного класса&lt;/span&gt;
&lt;span class="sd"&gt;     * @var type &lt;/span&gt;
&lt;span class="sd"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt;     * Метод инициализации, необходимо запускать перед началом работы&lt;/span&gt;
&lt;span class="sd"&gt;     * @param Loader $loader - загрузчик параметров&lt;/span&gt;
&lt;span class="sd"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Loader&lt;/span&gt; &lt;span class="nv"&gt;$loader&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Parameters_Registry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$loader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt;     * Реализуем паттерн Singleton&lt;/span&gt;
&lt;span class="sd"&gt;     * @return type &lt;/span&gt;
&lt;span class="sd"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_null&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$instance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Реест должен быть инициализирован перед использованием!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt;     * Закрытый конструктор, необходим для реализации Singleton&lt;/span&gt;
&lt;span class="sd"&gt;     * @param array $data &lt;/span&gt;
&lt;span class="sd"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Array&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt;     * Магические методы и реализация интерфейсов&lt;/span&gt;
&lt;span class="sd"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
            &lt;span class="nb"&gt;trigger_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Неизвестный параметр: '&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;E_USER_NOTICE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;// Если массив, то создаём ещё один экземпляр класса параметров, инициализируем&lt;/span&gt;
        &lt;span class="c1"&gt;// его данными этого массива, ставим на его место в массиве данных&lt;/span&gt;
        &lt;span class="c1"&gt;// и возвращаем.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Parameters_Registry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// %)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;isset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__unset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="nb"&gt;unset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;rewind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;current&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;__get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;key&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;__get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Вот собственно полная иерархия классов необходимых для того, что-бы раз
и на всегда решить ваши проблемы с доступом к конфигурациям ;). А если
серьезно, то у нас есть иерархия классов наследующих Loader, они
отвечают за загрузку данных из внешних источников и должны возвращать
массив. Также у нас есть класс Parameters_Registry, который отвечает за
предоставление глобального доступа к параметрам. На первый взгляд он
является реализацией шаблона Одиночка, но это не совсем так, для
реализации "цепочек" запросов к иерархии я создаю ещё экземпляры данного
класса, но только для внутреннего использования. В глобальной области
видимости осуществляется доступ только к одному объекту, который
создается при вызове статического метода init. Я добавил в этот класс
несколько полезных функций:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Интерфейс Iterator - позволяет перебирать объект, как массив при
    помощи foreach и функций для работы с массивами&lt;/li&gt;
&lt;li&gt;Интерфейс Countable - позволяет вычислять количество параметров при
    помощи функции count&lt;/li&gt;
&lt;li&gt;Chaining - для доступа к определённым элементам иерархии, как к
    свойствам объекта&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Я уверен, что Вы без проблем придумаете новый, нужный вам функционал.
Например вы можете добавить другие типы Loader'ов или расширите
функционал реестра.&lt;/p&gt;
&lt;p&gt;Теперь давайте протестируем полученные классы и разберемся с тем как же
можно их использовать. Генерируем тесты:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// Готовим данные для тестирования&lt;/span&gt;
&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'db'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'db_name'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'test_db'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'db_host'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'db_port'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'3301'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'db_type'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'MySQL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'db_pass'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'ololo'&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'test2'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;'test3'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'last_one'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'Фааааак йеееех ;['&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test.ser'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Первый тест:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;Parameters_Registry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;JSON_File_Loader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test.json'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$registry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Parameters_Registry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$registry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$registry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;db&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Здесь я демонстрирую Countable и Iterator. В результате выполнения
предыдущего теста получим следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;5
db_name:test_db
db_host:localhost
db_port:3301
db_type:MySQL
db_pass:ololo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Второй тест:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;Parameters_Registry::init(new Serialize_File_Loader('test.ser'));&lt;/span&gt;
&lt;span class="x"&gt;$registry = Parameters_Registry::getInstance();&lt;/span&gt;
&lt;span class="x"&gt;echo $registry-&amp;gt;test-&amp;gt;test2-&amp;gt;test3-&amp;gt;last_one;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Здесь вы можете увидеть, как работает chaining. Результат:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Фааааак йеееех ;[
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zakliuchenie"&gt;Заключение&lt;/h2&gt;
&lt;p&gt;В заключении подведем итог всему вышеизложенному. Паттерн Registry
позволяет нам получать доступ к необходим данным на различных уровнях
приложения, предоставляя единую точку доступа для всех уровней. Таким
образом мы используем более корректный вариант глобальных переменных,
который НЕ будет случайно перезаписан, НЕ засоряет глобальную область
видимости, НЕ будет иметь риск слишком поздней инициализации и тд. Но
т.к. этот паттерн все таки имеет глобальную точку доступа, он добавляет
некоторую степень связанности, поэтому его следует использовать только
тогда, когда без него не обойтись. В общем если вы не будете им
злоупотреблять, то он сделает ваше приложение более прозрачным и более
простым в расширении за счёт отсутствия необходимости в постоянной
передачи глобальных параметров от объекта к объекту. Спасибо всем, кто
дочитал, подписывайтесь на RSS, оставляйте свои комментарии!&lt;/p&gt;</content><category term="global variables"></category><category term="interfaces"></category><category term="json"></category><category term="magic methods"></category><category term="PHP"></category><category term="registry"></category><category term="serialize"></category><category term="singleton"></category><category term="ООП"></category><category term="Паттерны проектирования"></category></entry><entry><title>Gateway (шлюз)</title><link href="/ru/gateway-shliuz/" rel="alternate"></link><published>2011-02-24T18:47:00+03:00</published><updated>2011-02-24T18:47:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-02-24:/ru/gateway-shliuz/</id><summary type="html">&lt;p&gt;Сегодня мы поговорим о базовом паттерне проектирования - шлюзе. Данный
паттерн поможет нам избежать всех издержек, которые мы получаем при
использовании внешних, не объектных ресурсов.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Почти всегда при написании программ нам приходится учитывать внешние
ресурсы без которых нам не обойтись. Примером таких ресурсов может быть
реляционная база данных или API …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Сегодня мы поговорим о базовом паттерне проектирования - шлюзе. Данный
паттерн поможет нам избежать всех издержек, которые мы получаем при
использовании внешних, не объектных ресурсов.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Почти всегда при написании программ нам приходится учитывать внешние
ресурсы без которых нам не обойтись. Примером таких ресурсов может быть
реляционная база данных или API какого-либо интернет-сервиса. Т.к. мы
зачастую не контролируем программный код используемый для доступа к
данным ресурсам мы не можем быть уверены в том, что он будет оставаться
неизменным. Также часто API данных ресурсов не является
объектно-ориентированным и соответственно такое смешивание не добавляет
"чистоты" архитектуре приложения.&lt;/p&gt;
&lt;p&gt;Также серьёзной проблемой, является то что код становится не очевидным.
Тесная связанность, создаваемая при использовании API внешних ресурсов,
делает любые изменения сложными и порождает скрытые ошибки.&lt;/p&gt;
&lt;p&gt;Так как одной из главных проблем является именно не
объектно-ориентированная структура интерфейса этих ресурсов, то
очевидным решением является создание объектной обёртки для доступа к
этим ресурсам. При этом нужно создавать объекты структура которых будет
такой же как у любого другого объекта вашей системы, т.е. она должна
максимально естественно отображать внешний ресурс. Каждый запрос к таким
объектам приводит к вызову методов внешнего API. Такая инкапсуляция
приводит к значительным улучшениям, теперь доступ к внешним ресурсам
во-первых сосредоточено в одном месте, во-вторых скрывает изменчивый не
объектный интерфейс. Адаптеры должны значительно улучшить архитектуру
системы и сделать её более приспособленной к поддержке, расширению и
рефакторингу.&lt;/p&gt;
&lt;h2 id="realizatsiia"&gt;Реализация&lt;/h2&gt;
&lt;p&gt;И по традиции рассмотрим пример на php:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DBSimpleGateway&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$db_host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$db_user_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$db_password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$db_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Устанавливаем соединение с сервером MySQL&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;//Выполняем запрос&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;reConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$db_host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$db_user_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$db_password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$db_name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;//Выполняем пересоединение&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;//Разрываем соединение&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getError&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;//Возвращаем ошибку&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getLastInsertId&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;//ID последней вставленной записи&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Этот простой пример показывает, как можно создать шлюз для реляционной
базы данных. Я не стал приводить реализацию методов, т.к. пример
довольно тривиальный да и реализация в данном контексте нас не очень
волнует. Главное преимущество такого рода абстракций над API ресурсов в
более прозрачном интерфейсе, теперь при необходимости мы можем
передавать объект класса DBSimpleGateway методам и функциям, которые
работают с базой данных и при этом не боятся сильного связывания. При
каких-либо изменениях API или при необходимости оптимизировать код
доступа к БД (например при добавлении кэширования) мы можем без проблем
переписать реализацию класса при этом сохранив интерфейс и
соответственно работоспособность системы.&lt;/p&gt;
&lt;p&gt;На этом всё, спасибо за внимание! Подписывайтесь на RSS-канал и не
забывайте оставлять свои комментарии ;)&lt;/p&gt;</content><category term="gateway"></category><category term="PHP"></category><category term="ООП"></category><category term="Паттерны проектирования"></category></entry><entry><title>Настройка сети и интернета в Debian/Ubuntu – часть 2 – DHCP, DNS, маршрутизация</title><link href="/ru/nastroika-seti-i-interneta-v-debianubuntu-chast-2-dhcp-dns-marshrutizatsiia/" rel="alternate"></link><published>2011-02-23T17:50:00+03:00</published><updated>2011-02-23T17:50:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-02-23:/ru/nastroika-seti-i-interneta-v-debianubuntu-chast-2-dhcp-dns-marshrutizatsiia/</id><summary type="html">&lt;p&gt;&lt;img alt="tux internet" src="/media/2011/02/cde9051620f78865f6b159fe03aefa9b_0_500_01-291x300.jpg" title="linux internet"/&gt;Приветствую вас, товарищи линуксоиды! Сегодня мы
продолжим рассмотрение настройки сети и интернета в linux. В данной
части статьи я постараюсь раскрыть темы DHCP, DNS и маршрутизация. Перед
прочтением данной статьи прочитайте &lt;a href="/Linux/nastroika-seti-i-interneta-v-debianubuntu-chast-1-nastroika-setevykh-interfeisov/"&gt;первую часть&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="avtomaticheskaia-nastroika-seti-cherez-dhcp"&gt;Автоматическая настройка сети через DHCP&lt;/h2&gt;
&lt;p&gt;Часто для настройки компьютеров в сети используется протокол DHCP
(dynamic host configuration …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="tux internet" src="/media/2011/02/cde9051620f78865f6b159fe03aefa9b_0_500_01-291x300.jpg" title="linux internet"/&gt;Приветствую вас, товарищи линуксоиды! Сегодня мы
продолжим рассмотрение настройки сети и интернета в linux. В данной
части статьи я постараюсь раскрыть темы DHCP, DNS и маршрутизация. Перед
прочтением данной статьи прочитайте &lt;a href="/Linux/nastroika-seti-i-interneta-v-debianubuntu-chast-1-nastroika-setevykh-interfeisov/"&gt;первую часть&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="avtomaticheskaia-nastroika-seti-cherez-dhcp"&gt;Автоматическая настройка сети через DHCP&lt;/h2&gt;
&lt;p&gt;Часто для настройки компьютеров в сети используется протокол DHCP
(dynamic host configuration protocol). Данный протокол позволяет быстро
настраивать параметры сети автоматически при помощи запроса к
DHCP-серверу. Получив запрос DHCP-сервер назначает клиенту ip-адрес из
числа свободных и клиент может использовать его для работы в сети до
следующей реконфигурации. Также сервер может выдавать клиентам другие
параметры сети, такие как маска подсети, dns-сервера и шлюзы, но о них
мы поговорим позже. Перед тем, как выполнять запрос на получение
параметров от сети, необходимо правильно настроить сетевой интерфейс,
для этого необходимо отредактировать уже знакомый вам файл
/etc/network/interfaces. В данном файле необходимо добавить строку на
подобии следующей:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;iface eth0 inet dhcp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Итак, для того что-бы вручную осуществить запрос к dhcp серверу на
получение настроек необходимо выполнить следующую команду:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dhclient eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Параметром команде dhclient мы передаем название сетевого интерфейса.
После этого будет выполнена автоматическая настройка параметров.
Зачастую параметры сети будут настраиваться автоматически при включении
компьютера или активации сетевого подключения. Но иногда может
понадобится выполнить этот запрос вручную, например в случае
необходимости смены адреса или при недоступности DHCP-сервера в момент
активации интерфейса.&lt;/p&gt;
&lt;p&gt;Иногда вам может потребоваться освободить занятый вашим компьютером
адрес, для этого выполните следующую команду:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dhclient -r eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="nastroika-dns"&gt;Настройка DNS&lt;/h2&gt;
&lt;p&gt;DNS (domain name system) - распределенная система отвечающая за
установление соответствия между символьными и цифровыми адресами
компьютеров в сети. Т.е. данная система позволяет нам обращаться к
компьютерам в сети по простому символическому имени, которое намного
проще запомнить чем ip-адрес. Для того что-бы узнать ip-адрес машины по
её доменному имени необходимо воспользоваться командой host:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;host www.google.com
www.google.com is an &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; www.l.google.com.
www.l.google.com has address &lt;span class="m"&gt;74&lt;/span&gt;.125.87.99
www.l.google.com has address &lt;span class="m"&gt;74&lt;/span&gt;.125.87.104
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Как вы видите 74.125.87.104 ip-адрес всеми известной поисковой системы.
И если вы наберете его в адресной строке своего браузера, то вы увидите
что это google. Часто в локальных сетях есть свои dns-сервера, например
если вы подключены к городской сети и получаете через неё доступ к
Интернет, то в вашей сети должен быть свой сервер имён. Для того что-бы
ваша система могла корректно обращаться к нему, вам необходимо настроить
параметры dns, добавив ip-адрес dns-сервера в конфигурационный файл.
Итак, отредактируйте от пользователя root файл /etc/resolve.conf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nameserver &lt;span class="m"&gt;10&lt;/span&gt;.32.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь ваша машина будет знать, что 10.32.0.1 - это сервер имён.&lt;/p&gt;
&lt;h2 id="nastroika-parametrov-marshrutizatsii-shliuza"&gt;Настройка параметров маршрутизации (шлюза)&lt;/h2&gt;
&lt;p&gt;Для настройки маршрутизации воспользуемся утилитой route. Стандартной
задачей является установка шлюза по-умолчанию, часто это бывает
необходимо для настройки доступа к интернет. Для того чтобы установить
стандартный шлюз (gateway) воспользуйтесь следующей командой:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;route add default gw &lt;span class="m"&gt;10&lt;/span&gt;.32.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Данной командой мы устанавливаем стандартный шлюз (10.32.0.1), который
будет принимать пакеты из сети при отсутствии других доступных
маршрутов. После настройки всех маршрутов можно проверить правильность
роутинга при помощи следующей команды:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;route
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
localnet        *               &lt;span class="m"&gt;255&lt;/span&gt;.255.252.0   U     &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt; eth0
default         &lt;span class="m"&gt;10&lt;/span&gt;.32.0.1     &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0         UG    &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt; eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Если вам нужно более детальная настройка маршрутизации, то я рекомендую
вам прочитать справочное руководство к команде route.&lt;/p&gt;
&lt;p&gt;Эти настройки действительны только до следующей перезагрузки системы,
для того, чтобы настройки устанавливались автоматически необходимо
добавить в файл /etc/network/interface следующие строки(от пользователя
root):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gateway 10.32.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="proverka-soedineniia"&gt;Проверка соединения&lt;/h2&gt;
&lt;p&gt;После настройки сети полезно поверить работоспособность всех внесенных
изменений. Для начала лучше перезагрузить сетевые параметры для этого
выполните от root:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/networking restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь можно проверить доступность какого-либо узла сети, для этого
воспользуемся утилитой ping:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ping -c &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;.32.0.1
PING &lt;span class="m"&gt;10&lt;/span&gt;.32.0.1 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.32.0.1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;84&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; bytes of data.
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;10&lt;/span&gt;.32.0.1: &lt;span class="nv"&gt;icmp_req&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.11 ms
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;10&lt;/span&gt;.32.0.1: &lt;span class="nv"&gt;icmp_req&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.86 ms
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;10&lt;/span&gt;.32.0.1: &lt;span class="nv"&gt;icmp_req&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.25 ms
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;10&lt;/span&gt;.32.0.1: &lt;span class="nv"&gt;icmp_req&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.00 ms

--- &lt;span class="m"&gt;10&lt;/span&gt;.32.0.1 ping statistics ---
&lt;span class="m"&gt;4&lt;/span&gt; packets transmitted, &lt;span class="m"&gt;4&lt;/span&gt; received, &lt;span class="m"&gt;0&lt;/span&gt;% packet loss, &lt;span class="nb"&gt;time&lt;/span&gt; 3003ms
rtt min/avg/max/mdev &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.255/1.809/2.110/0.334 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Данной командой я отправляю 4 эхо-пакета на узел 10.32.0.1. Сервер
обязан ответить мне обратно, что он и делает. Команда выводит информацию
по каждому пакету и в конце статистику по всем пакетам указывая время
передачи, процент потерянных пакетов и тд.&lt;/p&gt;
&lt;p&gt;Для проверки параметров маршрутизации пакетов часто бывает удобно
воспользоваться утилитой traceroute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;traceroute www.google.com
traceroute to www.google.com &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;74&lt;/span&gt;.125.87.99&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;30&lt;/span&gt; hops max, &lt;span class="m"&gt;60&lt;/span&gt; byte packets
 &lt;span class="m"&gt;1&lt;/span&gt;  ti.holl.net &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.32.0.1&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;.595 ms * *
 &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;192&lt;/span&gt;.168.1.1 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.1.1&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;7&lt;/span&gt;.374 ms  &lt;span class="m"&gt;7&lt;/span&gt;.370 ms  &lt;span class="m"&gt;7&lt;/span&gt;.842 ms
 &lt;span class="m"&gt;3&lt;/span&gt;  * * *
 &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt;.50.19.34 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.50.19.34&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;83&lt;/span&gt;.307 ms  &lt;span class="m"&gt;87&lt;/span&gt;.352 ms  &lt;span class="m"&gt;87&lt;/span&gt;.350 ms
 &lt;span class="m"&gt;5&lt;/span&gt;  &lt;span class="m"&gt;82&lt;/span&gt;.207.106.42 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;82&lt;/span&gt;.207.106.42&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;136&lt;/span&gt;.875 ms  &lt;span class="m"&gt;139&lt;/span&gt;.480 ms  &lt;span class="m"&gt;139&lt;/span&gt;.478 ms
 &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="m"&gt;209&lt;/span&gt;.85.241.54 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;.85.241.54&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;135&lt;/span&gt;.527 ms  &lt;span class="m"&gt;129&lt;/span&gt;.398 ms  &lt;span class="m"&gt;131&lt;/span&gt;.854 ms
 &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="m"&gt;72&lt;/span&gt;.14.239.14 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72&lt;/span&gt;.14.239.14&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;136&lt;/span&gt;.508 ms  &lt;span class="m"&gt;136&lt;/span&gt;.780 ms  &lt;span class="m"&gt;136&lt;/span&gt;.592 ms
 &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;209&lt;/span&gt;.85.248.39 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;.85.248.39&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;131&lt;/span&gt;.577 ms &lt;span class="m"&gt;209&lt;/span&gt;.85.248.41 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;.85.248.41&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;138&lt;/span&gt;.317 ms  &lt;span class="m"&gt;102&lt;/span&gt;.821 ms
 &lt;span class="m"&gt;9&lt;/span&gt;  &lt;span class="m"&gt;72&lt;/span&gt;.14.232.221 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72&lt;/span&gt;.14.232.221&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;100&lt;/span&gt;.853 ms  &lt;span class="m"&gt;102&lt;/span&gt;.081 ms &lt;span class="m"&gt;72&lt;/span&gt;.14.238.101 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72&lt;/span&gt;.14.238.101&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;106&lt;/span&gt;.566 ms
&lt;span class="m"&gt;10&lt;/span&gt;  hb-in-f99.1e100.net &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;74&lt;/span&gt;.125.87.99&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;107&lt;/span&gt;.843 ms  &lt;span class="m"&gt;114&lt;/span&gt;.659 ms  &lt;span class="m"&gt;110&lt;/span&gt;.048 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Данная команда подробно показывает маршрут прохождения пакета, отображая
каждый узел через который проходит пакет и временные характеристики.
Изучая отчёты данной команды можно выявлять ошибки маршрутизации,
которые могут состоять в не оптимальном прохождении пакета по сети.&lt;/p&gt;
&lt;h2 id="zakliuchenie"&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Этот топик завершает тему настройки сети/интернета в linux. Если есть,
какие-то вопросы по данной теме, которые я не рассмотрел, отписывайтесь
в комментариях. Спасибо за внимание!&lt;/p&gt;</content><category term="debian"></category><category term="dhcp"></category><category term="dns"></category><category term="network"></category><category term="route"></category><category term="ubuntu"></category><category term="администрирование"></category></entry><entry><title>Настройка сети и интернета в Debian/Ubuntu - часть 1 - Настройка сетевых интерфейсов</title><link href="/ru/nastroika-seti-i-interneta-v-debianubuntu-chast-1-nastroika-setevykh-interfeisov/" rel="alternate"></link><published>2011-02-22T13:17:00+03:00</published><updated>2011-02-22T13:17:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-02-22:/ru/nastroika-seti-i-interneta-v-debianubuntu-chast-1-nastroika-setevykh-interfeisov/</id><summary type="html">&lt;p&gt;Здравствуйте, товарищи линуксоиды ;[&lt;/p&gt;
&lt;p&gt;&lt;img alt="network" src="/media/2011/02/network-300x225.jpg" title="network"/&gt;В данном топике я хочу рассказать всё что может
потребоваться для настройки сети и подключения к интернету в linux. Я
буду рассматривать на примере своего любимого дистрибутива - Debian, но
я думаю это будет действительно и для других дистрибутивов, особенно для
Ubuntu, т.к. эти дистрибутивы близкие родственники …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Здравствуйте, товарищи линуксоиды ;[&lt;/p&gt;
&lt;p&gt;&lt;img alt="network" src="/media/2011/02/network-300x225.jpg" title="network"/&gt;В данном топике я хочу рассказать всё что может
потребоваться для настройки сети и подключения к интернету в linux. Я
буду рассматривать на примере своего любимого дистрибутива - Debian, но
я думаю это будет действительно и для других дистрибутивов, особенно для
Ubuntu, т.к. эти дистрибутивы близкие родственники. Итак, приступим...&lt;/p&gt;
&lt;h2 id="nastroika-setevykh-interfeisov"&gt;Настройка сетевых интерфейсов&lt;/h2&gt;
&lt;p&gt;Первым делом мы рассмотрим конфигурирование самих сетевых интерфейсов.
Для этих целей в ОС Linux используется команда ifconfig.&lt;/p&gt;
&lt;h3 id="prosmotr-informatsii-o-setevykh-interfeisakh"&gt;Просмотр информации о сетевых интерфейсах&lt;/h3&gt;
&lt;p&gt;Для того что-бы просмотреть информацию о сетевых интерфейсах выполните
команду ifconfig -a. В результате вы получите полный перечень всех
сетевых интерфейсов вашего компьютера в не зависимости от того активны
они или нет:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig -a
eth0      Link encap:Ethernet  HWaddr &lt;span class="m"&gt;00&lt;/span&gt;:b3:65:78:12:a2  
          inet addr:10.32.1.40  Bcast:10.32.3.255  Mask:255.255.252.0
          inet6 addr: fe80::2b3:65ff:fe78:12a2/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:108514 errors:0 dropped:0 overruns:0 frame:0
          TX packets:52791 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:53877045 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;51&lt;/span&gt;.3 MiB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:7714438 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.3 MiB&lt;span class="o"&gt;)&lt;/span&gt;
          Interrupt:17

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:1567 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1567 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:49660 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;.4 KiB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:49660 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;.4 KiB&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Как вы видите данная команда выводит такую информацию, как ip-адрес
(inet addr), mac-адрес (HWaddr), маска подсети (Mask), статистика по
переданным/принятым пакетам (RX packets - полученные пакеты, TX packets
- переданные пакеты). В моём случае команда вывела информацию о двух
сетевых интерфейсах: eth0 и lo. Рассмотрим каждый из них в отдельности.
Первый - это сетевая карта ethernet имеет ip-адрес 10.32.1.40, маску
подсети - 255.255.252.0 и mac-адрес - 00:b3:65:78:12:a2. Второй - lo или
local loopback (локальная петля) используется для того, что-бы компьютер
мог обращаться к самому себе и имеет по-умолчанию ip-адрес 127.0.0.1 на
всех компьютерах. Оба интерфейса запущены, это можно определить по
четвёртой строке, как вы видите она начинается со слова "UP".&lt;/p&gt;
&lt;p&gt;Команда ifconfig с параметром -a выводит информацию о всех сетевых
интерфейсах, если же этот параметр опустить, то будет выведена
информация только о активных (запущенных) сетевых интерфейсах.&lt;/p&gt;
&lt;h3 id="aktivatsiiadezaktivatsiia-interfeisa"&gt;Активация/дезактивация интерфейса&lt;/h3&gt;
&lt;p&gt;Для того что-бы активировать/дезактивировать сетевой интерфейс
необходимо воспользоваться уже знакомой нам командой ifconfig передав
первым параметром название, а вторым одно из ключевых слов up или down.
Также вы можете воспользоваться командами ifup и ifdown которым нужно
передать название интерфейса. Пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig
lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:1567 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1567 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:49660 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;.4 KiB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:49660 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;.4 KiB&lt;span class="o"&gt;)&lt;/span&gt;
ifconfig eth0 up
ifconfig
eth0      Link encap:Ethernet  HWaddr &lt;span class="m"&gt;00&lt;/span&gt;:b3:65:78:12:a2  
          inet addr:10.32.1.40  Bcast:10.32.3.255  Mask:255.255.252.0
          inet6 addr: fe80::2b3:65ff:fe78:12a2/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:108514 errors:0 dropped:0 overruns:0 frame:0
          TX packets:52791 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:53877045 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;51&lt;/span&gt;.3 MiB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:7714438 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.3 MiB&lt;span class="o"&gt;)&lt;/span&gt;
          Interrupt:17

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:1567 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1567 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:49660 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;.4 KiB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:49660 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;.4 KiB&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="nastroika-parametrov-setevogo-interfeisa"&gt;Настройка параметров сетевого интерфейса&lt;/h3&gt;
&lt;p&gt;Перейдем непосредственно к настройке параметров интерфейсов. Разберем на
примере. Сначала настроим ip-адрес интерфейса eth0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig eth0 &lt;span class="m"&gt;10&lt;/span&gt;.32.1.40
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Просто указываем название интерфейса и адрес в стандартном формате.
Далее настроим маску подсети:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig eth0 netmask &lt;span class="m"&gt;255&lt;/span&gt;.255.252.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Здесь тоже всё просто, указали название интерфейса, ключевое слово
netmask и собственно саму маску подсети. Иногда может понадобится
сменить mac-адрес интерфейса, особенно с этим часто встречаются при
смене оборудования к адресу которого привязана авторизация у
интернет-провайдера. В этом нам тоже может помочь утилита ifconfig:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig eth0 hw ether 00b3657812a2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sokhranenie-parametrov-posle-perezagruzki"&gt;Сохранение параметров после перезагрузки&lt;/h3&gt;
&lt;p&gt;С настройкой интерфейсов вроде разобрались. Но при перезагрузке системы
вы увидите, что параметры не сохраняются. Для того что-бы интерфейс
автоматически конфигурировался при каждом старте системы нам нужно
прописать все параметры в файле /etc/network/interfaces. Ниже я приведу
пример своего файла interfaces и мы сможем на нём разобраться в
структуре описания параметров интерфейсов.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auto lo
iface lo inet loopback

allow-hotplug eth0
iface eth0 inet static
    address 10.32.1.40
    netmask 255.255.252.0
    network 10.32.0.0
    broadcast 10.32.3.255
    gateway 10.32.0.1
    dns-nameservers 10.32.0.1
    dns-search dizballanze
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;На данном этапе нас не интересуют параметры маршрутизации и серверов
имён, об этом мы поговорим в следующем топике, поэтому последние 3
строки мы не рассматриваем. Итак, у нас есть секции iface каждая из
которых описывает один сетевой интерфейс. Также у нас секции allow-*
которые описывают правила по которым должны активироваться интерфейсы.
Теперь рассмотрим подробнее вторую секцию iface файла. Первая строка
секции содержит директиву address, которая задаёт ip-адрес интерфейса.
Директива netmask задаёт маску подсети, network - адрес подсети,
broadcast - широковещательный адрес. Основные параметры мы настроили,
осталось только установить mac-адрес. Здесь всё немного сложнее, нам
необходимо написать простой bash-скрипт, который будет запускаться перед
активацией интерфейса. Для этого создадим от пользователя root файл в
директории /etc/network/if-pre-up.d и назовем его например init. В файле
будет содержаться уже знакомая нам команда:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /bin/sh&lt;/span&gt;
ifconfig eth0 hw ether 00b3657812a2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь перед активацией интерфейсов будет запущена программа ifconfig,
которая выставит нужный нам аппаратный адрес. На этом первая часть
статьи окончена. В следующих частях я планирую рассказать про настройку
маршрутизации и dns. Спасибо за внимание, вопросы в комментах!&lt;/p&gt;
&lt;p&gt;Настройка сети и интернета в Debian/Ubuntu &amp;ndash; часть 2 &amp;ndash; DHCP, DNS,
маршрутизация&lt;/p&gt;</content><category term="debian"></category><category term="ifconfig"></category><category term="ifdown"></category><category term="ifup"></category><category term="interfaces"></category><category term="network"></category><category term="ubuntu"></category><category term="администрирование"></category></entry><entry><title>Lazy Initialization (отложенная инициализация)</title><link href="/ru/lazy-initialization-otlozhennaia-initsializatsiia/" rel="alternate"></link><published>2011-02-21T21:22:00+03:00</published><updated>2011-02-21T21:22:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-02-21:/ru/lazy-initialization-otlozhennaia-initsializatsiia/</id><summary type="html">&lt;p&gt;&lt;img alt="lazy initialization" src="/media/2011/02/i-can-but-i-won-t-garfield-262532_800_600-300x225.jpg" title="lazy initialization"/&gt;Здравствуйте, сегодня речь пойдёт об очередном
паттерне - lazy initialization (отложенная инициализация). Освоив этот
паттерн вы научитесь инициализировать ресурсы только, тогда когда они
действительно нужны и тем самым увеличите скорость работы ваших
приложений.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;При проектировании вашего приложения вы можете столкнутся с
необходимостью создать классы, которые будут выполнять какие-либо
ресурсоемкие вычисления …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="lazy initialization" src="/media/2011/02/i-can-but-i-won-t-garfield-262532_800_600-300x225.jpg" title="lazy initialization"/&gt;Здравствуйте, сегодня речь пойдёт об очередном
паттерне - lazy initialization (отложенная инициализация). Освоив этот
паттерн вы научитесь инициализировать ресурсы только, тогда когда они
действительно нужны и тем самым увеличите скорость работы ваших
приложений.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;При проектировании вашего приложения вы можете столкнутся с
необходимостью создать классы, которые будут выполнять какие-либо
ресурсоемкие вычисления. Обычно первым приходящим на ум решением
является инициализация объекта и выполнение всех расчётов в момент
создания объекта(например в конструкторе), что-бы объект был полностью
готовым к использованию. Однако это решение хоть и является очевидным,
но уж точно не является оптимальным, т.к. вы не всегда можете быть
уверены в том, что результаты работы вашего объекта будут запрошёны тем
более вы не можете быть уверены что они будут востребованы полностью.
Существует вероятность того, что будут использоваться только 10% из тех
данных, которые вы инициализируете при создании объекта, соответственно
остальные 90% данных будут ненужны и потраченное на их подготовку время
будет безполезным. А представьте если таких объектов инициализируется
100...А если 1000? Вот тут то к нам на помощь приходит паттерн lazy
initialization. Суть данного паттерна в том, что данные обрабатываются
непосредственно в тот момент в который они запрашиваются. Т.е. когда
пользовательский код запрашивает какие-то данные у нашего объекта, мы
сначала проверяем не вычесленны ли эти данные ранее, если нет, то
вычисляем их сохраняем внутри объекта и возвращаем запрашиваемому коду.
Таким образом необходимые данные будут вычислинны тогда и только тогда,
когда они будут необходимы. Это позволит значительным образом
съекономить время и память, тем более что аренда серверов сейчас стоит
совсем не дёшево ;)&lt;/p&gt;
&lt;h2 id="realizatsiia"&gt;Реализация&lt;/h2&gt;
&lt;p&gt;Давайте рассмотрим реализацию данного шаблона на примере класса, который
"лениво" вычисляет факториал:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LazyFactorial&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;addFactorials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Add '&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'!'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addFactorials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;printFactorials&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В данном примере у нас есть класс, который вычисляет факториал. Как вы
видите данный класс никаким образом не инициализируется (что для этого
примера очевидно), затем для того что-бы пользователь смог запросить
вычисление факториала мы реализуем метод getFactorial, который сначала
проверяет небыл ли нужный факториал вычеслен ранее, если нет, то
запускает вычисления. Метод отвечающий за вычисления (addFactorials)
расширяет массив факториалов до необходимого нам количества. Очевидно,
что при работе с данным классом мы во-первых будем вычислять факториал
определённого числа только тогда, когда он нам понадобится, во-вторых мы
не будем вычислять одно и то же значение дважды. Пример использования
класса:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$factorial = new LazyFactorial();&lt;/span&gt;
&lt;span class="x"&gt;$factorial-&amp;gt;printFactorials();&lt;/span&gt;
&lt;span class="x"&gt;echo $factorial-&amp;gt;getFactorial(2) . "\n";&lt;/span&gt;
&lt;span class="x"&gt;$factorial-&amp;gt;printFactorials();&lt;/span&gt;
&lt;span class="x"&gt;echo $factorial-&amp;gt;getFactorial(6) . "\n";&lt;/span&gt;
&lt;span class="x"&gt;$factorial-&amp;gt;printFactorials();&lt;/span&gt;
&lt;span class="x"&gt;echo $factorial-&amp;gt;getFactorial(3) . "\n";&lt;/span&gt;
&lt;span class="x"&gt;$factorial-&amp;gt;printFactorials();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В результате получаем следующий вывод:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Array
(
    [0] =&amp;gt; 1
)
Add 2!
2
Array
(
    [0] =&amp;gt; 1
    [1] =&amp;gt; 1
    [2] =&amp;gt; 2
)
Add 6!
720
Array
(
    [0] =&amp;gt; 1
    [1] =&amp;gt; 1
    [2] =&amp;gt; 2
    [3] =&amp;gt; 6
    [4] =&amp;gt; 24
    [5] =&amp;gt; 120
    [6] =&amp;gt; 720
)
6
Array
(
    [0] =&amp;gt; 1
    [1] =&amp;gt; 1
    [2] =&amp;gt; 2
    [3] =&amp;gt; 6
    [4] =&amp;gt; 24
    [5] =&amp;gt; 120
    [6] =&amp;gt; 720
)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Как вы видите наши ожидания подтвердились. Возможно данный пример не
полностью отражает суть паттерна lazy initialization, но основная мысль
передаётся точно. Если есть какие-либо вопросы задавайте их в
комментариях. Спасибо за внимание!&lt;/p&gt;</content><category term="ООП"></category><category term="Паттерны проектирования"></category></entry><entry><title>Builder (строитель)</title><link href="/ru/builder-stroitel/" rel="alternate"></link><published>2011-02-20T18:27:00+03:00</published><updated>2011-02-20T18:27:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-02-20:/ru/builder-stroitel/</id><summary type="html">&lt;p&gt;&lt;img alt="builder pattern" src="/media/2011/02/images.jpg" title="builder"/&gt;&lt;/p&gt;
&lt;p&gt;И снова рассуждение на тему порождающих шаблонов. На этот раз будем
говорить о паттерне строитель. Данный паттерн позволяет скрыть
инициализацию сложного объекта и создает простой интерфейс для
инстанциирования сложных объектов с различным внутренним состоянием.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Если при проектировании вы столкнулись с тем что необходимо создавать
сложные объекты, инициализация которых состоит …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="builder pattern" src="/media/2011/02/images.jpg" title="builder"/&gt;&lt;/p&gt;
&lt;p&gt;И снова рассуждение на тему порождающих шаблонов. На этот раз будем
говорить о паттерне строитель. Данный паттерн позволяет скрыть
инициализацию сложного объекта и создает простой интерфейс для
инстанциирования сложных объектов с различным внутренним состоянием.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Если при проектировании вы столкнулись с тем что необходимо создавать
сложные объекты, инициализация которых состоит из нескольких этапов и
при этом вы не уверены в том что в дальнейшем инициализация данного
объекта не изменится, то стоит задуматься над использованием паттерна
строитель. Данный паттерн изолирует код отвечающий за настройку сложных
объектов и предоставляет единую точку входа для создания и получения
доступа к этим объектам.&lt;/p&gt;
&lt;p&gt;Для реализации функций создания и настройки объектов создаётся иерархия
строителей, каждый класс данной иерархии "умеет" определённым образом
настраивать порождаемый объект и по запросу возвращает уже готовый к
работе, настроенный объект. При этом вызывающий код может не знать каким
именно образом настраивается экземпляр класса-продукта, т.к. эти
обязанности принимает на себя строитель. Кроме классов строителей также
создается, т.н. директор - класс который работает со строителем,
инициирует создание объекта-продукта и его настройки, при этом не имея
представления о процессе настройки объекта, используя только интерфейс
класса строителя. Преимущество данного шаблона заключается не только в
инкапсуляции инициализации сложного объекта, но и в выборе определённого
типа настройки объекта во время выполнения программы.&lt;/p&gt;
&lt;h2 id="realizatsiia"&gt;Реализация&lt;/h2&gt;
&lt;p&gt;Теперь, как всегда, рассмотрим реализацию данного шаблона на нашем
любимом языке - PHP. Допустим нам нужно спроектировать иерархию классов
отвечающих за воспроизведение видео-роликов в различных форматах:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$video_codec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$audio_codec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$volume&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setVideoCodec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$codec&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;video_codec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$codec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setAudioCodec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$codec&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;audio_codec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$codec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$width&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$height&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setVolume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$volume&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$volume&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$some_data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Let's rock!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;abstract&lt;/span&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlayerBuilder&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$player&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;createPlayer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getPlayer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setVideoCodec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setAudioCodec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setWidth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setVolume&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HDPlayerBuilder&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;PlayerBuilder&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setVideoCodec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setVideoCodec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'some greate codec'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;span class="nf"&gt;setAudioCodec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setAudioCodec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'some cool codec'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;960&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setVolume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setVolume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimplePlayerBuilder&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;PlayerBuilder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setVideoCodec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setVideoCodec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'some bad codec'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;span class="nf"&gt;setAudioCodec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setAudioCodec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'some default codec'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;320&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setVolume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setVolume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Media&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$_builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PlayerBuilder&lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;createPlayer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setAudioCodec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setVideoCodec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setWidth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setVolume&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getPlayer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getPlayer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Как вы наверное уже догадались продуктом в данном случае у нас будут
объекты класса Player, строителями - объекты наследующие PlayerBuilder,
а директором - Media. Каких-то дополнительных пояснений на мой взгляд
данный код не требует, перейдем к примеру использования:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$media&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HDPlayerBuilder&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nv"&gt;$player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$media&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getPlayer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$player&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Some_Cool_Video_File.mkv'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Таким образом можно использовать вышеописанные классы. Как вы видите
здесь всё довольно просто и очевидно, создаем экземпляр директора
(Media), передаем ему нужного строителя, вызываем нужный метод и вуаля -
плеер создан :).&lt;/p&gt;
&lt;p&gt;Спасибо всем, кто дочитал, не забывайте комментировать, т.к. ваши
комментарии = стимул написания новых статей.&lt;/p&gt;</content><category term="builder"></category><category term="PHP"></category><category term="ООП"></category><category term="Паттерны проектирования"></category></entry><entry><title>Prototype (прототип)</title><link href="/ru/prototype-prototip/" rel="alternate"></link><published>2011-02-19T23:47:00+03:00</published><updated>2011-02-19T23:47:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-02-19:/ru/prototype-prototip/</id><summary type="html">&lt;p&gt;Следующий порождающий объекты шаблон, который мы рассмотрим - прототип.
Данный шаблон является более гибкой версией шаблона Abstract Factory.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Часто приходится отказываться от затеи использовать шаблон &lt;a href="/PHP/abstract-factory-abstraktnaia-fabrika/"&gt;абстрактная
фабрика&lt;/a&gt; из-за необходимости поддерживать дополнительные иерархии
классов. С этой проблемой нам может помочь шаблон prototype, который
основан на использовании средства clone языка php для …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Следующий порождающий объекты шаблон, который мы рассмотрим - прототип.
Данный шаблон является более гибкой версией шаблона Abstract Factory.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Часто приходится отказываться от затеи использовать шаблон &lt;a href="/PHP/abstract-factory-abstraktnaia-fabrika/"&gt;абстрактная
фабрика&lt;/a&gt; из-за необходимости поддерживать дополнительные иерархии
классов. С этой проблемой нам может помочь шаблон prototype, который
основан на использовании средства clone языка php для создания копий
объектов.&lt;/p&gt;
&lt;p&gt;&lt;img alt="prototype pattern" src="/media/2011/02/clone-wars-9.jpg" title="prototype pattern"/&gt;&lt;/p&gt;
&lt;p&gt;Данный шаблон подразумевает наличие класса,
объекты которого хранят внутри себя, как свойство некоторые эталонные
экземпляры порождаемых классов. При этом условием начала работы с
объектом-прототипом есть инициализация его этими эталонными объектами,
как правило они передаются в конструктор, но могут быть установлены и
при помощи других методов прототипа. После инициализации прототипа к
нему можно обращаться непосредственно для генерации объектов, что
приведет к созданию полностью идентичной копии эталонного объекта и
возврату его вызывающему коду. Так как мы используем готовые объекты для
инициализации прототипа, то нам больше не нужно создавать параллельные
иерархии классов. Но это не единственно преимущество данного шаблона.
Если копнуть глубже, то можно найти много новых возможностей, например
из-за того что мы получаем точную копию эталонного объекта, а не новый
объект, как в шаблоне абстрактная фабрика, мы получаем дополнительные
возможности в виде настройки эталонного объекта (изменение значения
свойств). Также гибкость достигается и в не обязательном соответствии
комбинаций взаимосвязанных классов, так как это было в шаблоне
абстрактная фабрика.&lt;/p&gt;
&lt;h2 id="realizatsiia"&gt;Реализация&lt;/h2&gt;
&lt;p&gt;Давайте разберем простой пример реализации данного шаблона. Представим,
что нам нужно спроектировать иерархию классов которая буде отвечать за
стиль отображения страницы документа. Ограничимся настройкой стилей
параграфов, заголовков и списков. Для каждого из элементов у нас будет
своя иерархия классов которая позволит выводить данный элемент скажем на
принтер и браузер. Теперь собственно пример такой иерархии (без
реализации, т.к. нас интересует только логические понятия, а не сам
функционал):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Paragraph&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;header_big&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;header_small&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lists&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PrintedParagraph&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Paragraph&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Some operations&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PrintedHeader&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;header_big&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Some operations&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;header_small&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Some operations&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PrintedLists&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Lists&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Some operations&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Some operations&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BrowsedParagraph&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Paragraph&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Some operations&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BrowsedHeader&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;header_big&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Some operations&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;header_small&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Some operations&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BrowsedLists&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Lists&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Some operations&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Some operations&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentPrototype&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$_paragraph&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$_header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$_list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Paragraph&lt;/span&gt; &lt;span class="nv"&gt;$paragraph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="nv"&gt;$header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Lists&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_paragraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$paragraph&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getParagraph&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;clone&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_paragraph&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getHeader&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;clone&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getList&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;clone&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Итак, что мы тут видим. У нас имеется 3 иерархии классов, которые
позволяют форматировать различные элементы документа и нам необходимо
создавать экземпляры этих классов в процессе работы программы,
экземпляры каких именно классов нам нужно создавать заранее не известно.
По-этому мы реализовываем ещё один класс - DocumentPrototype, который
как вы уже наверное догадались, представляет собой паттерн прототип. Как
вы видите данный класс принимает в конструкторе эталонные экземпляры
классов-элементов документа и потом умеет создавать их копии при помощи
соответствующих методов. Рассмотрим пример использования данного класса:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DocumentPrototype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowsedParagraph&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowsedHeader&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowsedLists&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nv"&gt;$list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$document&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'first'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'second'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'third'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$document&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getHeader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$header&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;header_big&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Test'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Мы получаем возможность создавать объекты без поддержки дополнительных
иерархий классов. Теперь давайте представим, что нам нужно создать
документ у которого бы параграфы выводились так, как если бы они
выводились на печать, а заголовки и списки, так, как на web-странице:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DocumentPrototype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrintedParagraph&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowsedHeader&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowsedLists&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Всё довольно просто, мы всего лишь заменили один аргумент конструктора
на другой и получили такой отличный результат. К примеру каждый из этих
классов может принимать массив параметров в котором указываются какие-то
настройки стиля отображения элементов, теперь нам для того что-бы скажем
увеличить размер шрифта заголовка нужно всего лишь изменить эталонный
объект следующим образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nv"&gt;$header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowsedHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'font-size'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'200%'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DocumentPrototype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrintedParagraph&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nv"&gt;$header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowsedLists&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Вот таким простым способом мы увеличили размер шрифта всех заголовков
документа.&lt;/p&gt;
&lt;p&gt;В подведении итогов перечислим преимущества паттерна Prototype:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Нет необходимости сопровождать дополнительные иерархии классов&lt;/li&gt;
&lt;li&gt;Гибкость настройки эталонных объектов&lt;/li&gt;
&lt;li&gt;Гибкость композиции&lt;/li&gt;
&lt;li&gt;Простое масштабирование порождаемой иерархии&lt;/li&gt;
&lt;li&gt;Гибкость во времени выполнения программы&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Спасибо за внимание, до встречи в мире ООП ;)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Comments - welcome!&lt;/em&gt;&lt;/p&gt;</content><category term="ООП"></category><category term="Паттерны проектирования"></category></entry><entry><title>Abstract Factory (абстрактная фабрика)</title><link href="/ru/abstract-factory-abstraktnaia-fabrika/" rel="alternate"></link><published>2011-01-30T01:34:00+03:00</published><updated>2011-01-30T01:34:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-01-30:/ru/abstract-factory-abstraktnaia-fabrika/</id><summary type="html">&lt;p&gt;Рассмотрим ещё один порождающий шаблон - абстрактная фабрика. Перед
прочтением рекомендую ознакомится с шаблоном Factory Method &lt;a href="/PHP/factory-method-fabrichnyi-metod/"&gt;здесь&lt;/a&gt;,
т.к. в данном топике я буду расширять рассмотренный там пример.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Во время проектирования может возникнуть необходимость создавать
взаимосвязанные объекты из различных иерархии при этом решение о том
какие именно объекты создавать должно …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Рассмотрим ещё один порождающий шаблон - абстрактная фабрика. Перед
прочтением рекомендую ознакомится с шаблоном Factory Method &lt;a href="/PHP/factory-method-fabrichnyi-metod/"&gt;здесь&lt;/a&gt;,
т.к. в данном топике я буду расширять рассмотренный там пример.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Во время проектирования может возникнуть необходимость создавать
взаимосвязанные объекты из различных иерархии при этом решение о том
какие именно объекты создавать должно приниматься в процессе работы
программы. Например, если взять за основу пример с формами, нам может
понадобится кроме формы также создавать экземпляр класса валидатора,
который умеет проверять корректность данных в форме. Т.е. у нас есть
следующие иерархии:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="c1"&gt;//Иерархия классов форм&lt;/span&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate registration form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate authentication form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate posting form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Иерархия классов валидаторов&lt;/span&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegValidator&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Validate RegForm'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthValidator&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Validate AuthForm'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostValidator&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Validate PostForm'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;У нас есть две иерархии классов и в зависимости от каких-то заранее
неизвестных параметров нам нужно уметь создавать связанные экземпляры
классов из этой иерархии. Т.е. для класса RegForm нам нужно создавать
RegValidator и тд. Для решения этой проблемы необходимо воспользоваться
шаблоном абстрактной фабрики.&lt;/p&gt;
&lt;p&gt;Данный шаблон подразумевает наличие абстрактного класса фабрики, который
предоставляет интерфейс для создания взаимосвязанных объектов. Дочерние
классы фабрики реализуют функционал для создания экземпляров какого-то
одного набора компонентов.&lt;/p&gt;
&lt;h2 id="realizatsiia"&gt;Реализация&lt;/h2&gt;
&lt;p&gt;Применим шаблон абстрактная фабрика к нашему примеру для создания
связанных объектов: форм и валидаторов к ним:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;//Иерархия фабрик&lt;/span&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FormFactory&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getValidator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegFormFactory&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;FormFactory&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RegForm&lt;/span&gt;&lt;span class="p"&gt;();;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getValidator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RegValidator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthFormFactory&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;FormFactory&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AuthForm&lt;/span&gt;&lt;span class="p"&gt;();;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getValidator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AuthValidator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostFormFactory&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;FormFactory&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;();;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getValidator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PostValidator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Иерархия классов форм&lt;/span&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate registration form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate authentication form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate posting form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Иерархия классов валидаторов&lt;/span&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegValidator&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Validate RegForm'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthValidator&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Validate AuthForm'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostValidator&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Validate PostForm'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Реализовав иерархию фабрик - FormFactory мы добились нескольких важных
улучшений:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Гарантия того, что мы будем использовать именно нужную комбинацию
    функционально связанных классов (т.е. к форме регистрации не будет
    применяться валидатор формы авторизации).&lt;/li&gt;
&lt;li&gt;Простой способ добавления новых типов компонентов.&lt;/li&gt;
&lt;li&gt;Упрощенная замену классов, т.к. их инициализация вынесена в одну
    общую точку.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Но есть и явный недостаток - добавления новых компонентов в систему
требует переработки всех классов фабрик, в том числе и абстрактного.
Если вы планируете часто расширяться в сторону увеличения компонентов,
то вам стоит задуматься о другом решении.&lt;/p&gt;</content><category term="abstract factory"></category><category term="PHP"></category><category term="ООП"></category><category term="Паттерны проектирования"></category></entry><entry><title>MySQL - обзор типов таблиц</title><link href="/ru/mysql-obzor-tipov-tablits/" rel="alternate"></link><published>2011-01-29T18:42:00+03:00</published><updated>2011-01-29T18:42:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-01-29:/ru/mysql-obzor-tipov-tablits/</id><summary type="html">&lt;p&gt;&lt;img alt="mysql" src="/media/2011/01/mysql-125x125.png" title="MySQL logo"/&gt;&lt;/p&gt;
&lt;p&gt;Здравствуйте, сегодня мы поговорим о типах таблиц в MySQL. Архитектура
MySQL позволяет подключать разные движки таблиц. На данный момент MySQL
поддерживает множество различных типов таблиц, каждый из которых имеет
свои преимущества и недостатки. Я перечислю и коротко опишу основные
типы таблиц, а затем проведу небольшой тест производительности наиболее
часто используемых …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="mysql" src="/media/2011/01/mysql-125x125.png" title="MySQL logo"/&gt;&lt;/p&gt;
&lt;p&gt;Здравствуйте, сегодня мы поговорим о типах таблиц в MySQL. Архитектура
MySQL позволяет подключать разные движки таблиц. На данный момент MySQL
поддерживает множество различных типов таблиц, каждый из которых имеет
свои преимущества и недостатки. Я перечислю и коротко опишу основные
типы таблиц, а затем проведу небольшой тест производительности наиболее
часто используемых типов - myisam и innodb.&lt;/p&gt;
&lt;p&gt;Для того что-бы посмотреть какие типы поддерживает ваша инсталляция
MySQL необходимо выполнить следующий SQL запрос:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;ENGINES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В результате вы получаете таблицу содержащую информацию о том какие типы
таблиц установлены в вашей системе и краткое описание их возможностей.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Engine&lt;/th&gt;
&lt;th align="left"&gt;Support&lt;/th&gt;
&lt;th align="left"&gt;Comment&lt;/th&gt;
&lt;th align="left"&gt;Transactions&lt;/th&gt;
&lt;th align="left"&gt;XA&lt;/th&gt;
&lt;th align="left"&gt;Savepoints&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;FEDERATED&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;Federated MySQL storage engine&lt;/td&gt;
&lt;td align="left"&gt;NULL&lt;/td&gt;
&lt;td align="left"&gt;NULL&lt;/td&gt;
&lt;td align="left"&gt;NULL CSV&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MyISAM&lt;/td&gt;
&lt;td align="left"&gt;YES&lt;/td&gt;
&lt;td align="left"&gt;MyISAM storage engine&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;BLACKHOLE&lt;/td&gt;
&lt;td align="left"&gt;YES&lt;/td&gt;
&lt;td align="left"&gt;/dev/null storage engine (anything you write to it disappears)&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MRG_MYISAM&lt;/td&gt;
&lt;td align="left"&gt;YES&lt;/td&gt;
&lt;td align="left"&gt;Collection of identical MyISAM tables&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MEMORY&lt;/td&gt;
&lt;td align="left"&gt;YES&lt;/td&gt;
&lt;td align="left"&gt;Hash based, stored in memory, useful for temporary tables&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;ARCHIVE&lt;/td&gt;
&lt;td align="left"&gt;YES&lt;/td&gt;
&lt;td align="left"&gt;Archive storage engine&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;InnoDB&lt;/td&gt;
&lt;td align="left"&gt;DEFAULT&lt;/td&gt;
&lt;td align="left"&gt;Supports transactions, row-level locking, and foreign keys&lt;/td&gt;
&lt;td align="left"&gt;YES&lt;/td&gt;
&lt;td align="left"&gt;YES&lt;/td&gt;
&lt;td align="left"&gt;YES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;PERFORMANCE_SCHEMA&lt;/td&gt;
&lt;td align="left"&gt;YES&lt;/td&gt;
&lt;td align="left"&gt;Performance Schema&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;td align="left"&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Нас в основном будет интересовать столбец support, который содержит
информацию о поддержке типа таблицы и может принимать значения: NO - не
поддерживается, YES - поддерживается, DEFAULT -используется
по-умолчанию. Начиная с версии 5.5.5 по-умолчанию выбран тип innodb,
ранее стандартным типом был myisam.&lt;/p&gt;
&lt;p&gt;В версии MySQL 5.5 поддерживается 9 различных типов таблиц.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;InnoDB&lt;/strong&gt; - движок с поддержкой транзакций, откатов и защитой от
    потери данных. В данном типе таблиц используются блокировки на
    уровне записи и не блокирующее чтение, что позволило улучшить
    производительность при многопользовательском режиме работы. InnoDB
    сохраняет пользовательские данные в кластерных индексах, что
    позволяет компенсировать в/в для простых запросов основанных на
    первичных ключах.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MyISAM&lt;/strong&gt; - движок таблиц MySQL используемый в основном в
    Web-приложениях, хранилищах данных и других программных средах.
    Данный тип таблиц поддерживается всеми инсталляциями MySQL.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt; - хранит данные в оперативной памяти для очень быстрого
    доступа. Также известен как HEAP (куча).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Merge&lt;/strong&gt; - используется для логического объединения одинаковых
    MyISAM таблиц и обращение к ним, как к единому объекту. Хорошо
    подойдет для очень больших хранилищ данных.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Archive&lt;/strong&gt; - идеальное решение для хранения больших объёмов
    информации, к которой не требуется частый доступ.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Federated&lt;/strong&gt; - предоставляет возможность объединять различные MySQL
    сервера для создания одной логической базы данных из нескольких
    физических машин. Идеально подойдет для архитектур, которые
    поддерживают распределенное хранение данных.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSV&lt;/strong&gt; - хранит пользовательские данные в текстовых файлах разделяя
    значения запятыми. Используется если необходим простой обмен с
    приложениями, которые умеют экспортировать/импортировать данные из
    CSV формата.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blackhole&lt;/strong&gt; - принимает, но не возвращает никаких данных.
    Результатами любых запросов из таких хранилищ будут пустые выборки.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt; - тестовый движок, не выполняет никаких функций, будет
    полезен только разработчикам, которые собираются писать свой движок,
    в качестве примера.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Сравнительная таблица основных типов таблиц&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Функция&lt;/th&gt;
&lt;th align="left"&gt;MyISAM&lt;/th&gt;
&lt;th align="left"&gt;Memory&lt;/th&gt;
&lt;th align="left"&gt;InnoDB&lt;/th&gt;
&lt;th align="left"&gt;Archive&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Максимальный объём хранимых данных&lt;/td&gt;
&lt;td align="left"&gt;256TB&lt;/td&gt;
&lt;td align="left"&gt;RAM&lt;/td&gt;
&lt;td align="left"&gt;64TB&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Транзакции&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Блокировки&lt;/td&gt;
&lt;td align="left"&gt;Таблица&lt;/td&gt;
&lt;td align="left"&gt;Таблица&lt;/td&gt;
&lt;td align="left"&gt;Запись&lt;/td&gt;
&lt;td align="left"&gt;Запись&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MVCC&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;B-деревья&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Хэш индексы&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Индексы полнотекстового поиска&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Кластерные индексы&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Кэширование данных&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Н/д&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Кэширование индексов&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Н/д&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Сжатие данных&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Шифрование данных&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Поддержка кластерных БД&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Репликация&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Внешние ключи&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Нет&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Бэкап&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Кэширование запросов&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;td align="left"&gt;Да&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="testirovanie-proizvoditelnost-innodb-i-myiasm"&gt;Тестирование производительность InnoDB и MyIASM&lt;/h2&gt;
&lt;p&gt;Наибольший интерес для web-разработчика составляют innodb и myisam.
Сейчас мы проведем сравнительный тест производительности этих типов
таблиц. Для этого сначала создадим две одинаковые по структуре таблицы,
но с разным типом движка хранения:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;inno&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;BIGINT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;InnoDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;myisam&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;BIGINT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MyISAM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Напишем небольшой скрипт который будет выполнять 3 теста: запись данных
(insert), выборка по ключу, выборка по не ключевому полю.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nb"&gt;mysql_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;mysql_select_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$select_query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'SELECT data FROM myisam WHERE id = :val:'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mysql_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;':val:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$select_query&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nv"&gt;$tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mysql_fetch_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br/&amp;gt;MyISAM select&amp;lt;br/&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$select_query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'SELECT * FROM myisam WHERE data = :val:'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$timer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$one&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;mysql_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;':val:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$select_query&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$timer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' s&amp;lt;br/&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br/&amp;gt;InnoDB select&amp;lt;br/&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$select_query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'SELECT * FROM inno WHERE data = :val:'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$timer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$one&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;mysql_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;':val:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$select_query&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$timer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' s&amp;lt;br/&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;

&lt;span class="cm"&gt;$data = array();&lt;/span&gt;
&lt;span class="cm"&gt;for ($i = 0; $i &amp;lt;= 10000; $i++){&lt;/span&gt;
&lt;span class="cm"&gt;    $data[] = mt_rand(0, 100500);&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;echo '&amp;lt;br/&amp;gt;MyISAM select by key&amp;lt;br/&amp;gt;';&lt;/span&gt;
&lt;span class="cm"&gt;$select_query = 'SELECT * FROM myisam WHERE id = :val:';&lt;/span&gt;
&lt;span class="cm"&gt;$timer-&amp;gt;start();&lt;/span&gt;
&lt;span class="cm"&gt;for ($i = 0; $i &amp;lt;= 10000; $i++){&lt;/span&gt;
&lt;span class="cm"&gt;    mysql_query(str_replace(':val:', $i, $select_query));&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;echo $timer-&amp;gt;end() . ' s&amp;lt;br/&amp;gt;';&lt;/span&gt;

&lt;span class="cm"&gt;echo '&amp;lt;br/&amp;gt;InnoDB select by key&amp;lt;br/&amp;gt;';&lt;/span&gt;
&lt;span class="cm"&gt;$select_query = 'SELECT * FROM inno WHERE id = :val:';&lt;/span&gt;
&lt;span class="cm"&gt;$timer-&amp;gt;start();&lt;/span&gt;
&lt;span class="cm"&gt;for ($i = 0; $i &amp;lt;= 10000; $i++){&lt;/span&gt;
&lt;span class="cm"&gt;    mysql_query(str_replace(':val:', $i, $select_query));&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;echo $timer-&amp;gt;end() . ' s&amp;lt;br/&amp;gt;';&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;

&lt;span class="cm"&gt;$data = array();&lt;/span&gt;
&lt;span class="cm"&gt;for ($i = 0; $i &amp;lt;= 10000; $i++){&lt;/span&gt;
&lt;span class="cm"&gt;    $data[] = mt_rand(0, 100500);&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;echo '&amp;lt;br/&amp;gt;MyISAM insert&amp;lt;br/&amp;gt;';&lt;/span&gt;
&lt;span class="cm"&gt;$insert_query = 'INSERT INTO myisam VALUES (NULL,\':val:\')';&lt;/span&gt;
&lt;span class="cm"&gt;$timer-&amp;gt;start();&lt;/span&gt;
&lt;span class="cm"&gt;foreach ($data as $one){&lt;/span&gt;
&lt;span class="cm"&gt;    mysql_query(str_replace(':val:', $one, $insert_query));&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;echo $timer-&amp;gt;end() . ' s&amp;lt;br/&amp;gt;';&lt;/span&gt;

&lt;span class="cm"&gt;echo 'InnoDB insert&amp;lt;br/&amp;gt;';&lt;/span&gt;
&lt;span class="cm"&gt;$insert_query = 'INSERT INTO inno VALUES (NULL,\':val:\')';&lt;/span&gt;
&lt;span class="cm"&gt;$timer-&amp;gt;start();&lt;/span&gt;
&lt;span class="cm"&gt;foreach ($data as $one){&lt;/span&gt;
&lt;span class="cm"&gt;    mysql_query(str_replace(':val:', $one, $insert_query));&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;echo $timer-&amp;gt;end() . ' s&amp;lt;br/&amp;gt;';&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для того что-бы выполнить тест, нужно раскоментить один соответствующий
блок кода. И собственно, то что у меня получилось в результате
тестирования:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Тест&lt;/th&gt;
&lt;th align="left"&gt;InnoDB&lt;/th&gt;
&lt;th align="left"&gt;MyISAM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Вставка данных(insert)&lt;/td&gt;
&lt;td align="left"&gt;15.697 с&lt;/td&gt;
&lt;td align="left"&gt;1.591 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Выборка по ключу&lt;/td&gt;
&lt;td align="left"&gt;1.678 с&lt;/td&gt;
&lt;td align="left"&gt;1.603 с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Выборка по не ключевому полю&lt;/td&gt;
&lt;td align="left"&gt;149.961 c&lt;/td&gt;
&lt;td align="left"&gt;95.984 c&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Как мы видим myisam работает значительно быстрее, особенно это заметно
при вставке данных. Хотя innodb и дает ряд новых возможностей и
преимуществ, такая медлительность не позволяет ему конкурировать с
myisam, особенно в web-приложениях.&lt;/p&gt;</content><category term="benchmark"></category><category term="innodb"></category><category term="myisam"></category><category term="MySQL"></category><category term="БД"></category></entry><entry><title>Factory Method (фабричный метод)</title><link href="/ru/factory-method-fabrichnyi-metod/" rel="alternate"></link><published>2011-01-19T18:39:00+03:00</published><updated>2011-01-19T18:39:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-01-19:/ru/factory-method-fabrichnyi-metod/</id><summary type="html">&lt;p&gt;Данный топик продолжает тему шаблонов проектирования для генерации
объектов. Рассмотрим паттерн Factory Method или на великом и могучем (на
русском, а не php :)) - фабричный метод.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Часто при проектировании классов возникает необходимость создавать
экземпляры одних классов внутри других. При этом могут возникнуть
требования создавать экземпляры не одного, а нескольких классов …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Данный топик продолжает тему шаблонов проектирования для генерации
объектов. Рассмотрим паттерн Factory Method или на великом и могучем (на
русском, а не php :)) - фабричный метод.&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Часто при проектировании классов возникает необходимость создавать
экземпляры одних классов внутри других. При этом могут возникнуть
требования создавать экземпляры не одного, а нескольких классов одной
иерархии. Это вполне логично и сразу же напрашивается одно решение -
использовать условия или switch к параметрам передаваемым в метод
порождающего класса и в зависимости от параметра создавать нужный
экземпляр иерархии. Если мы знаем что в порождаемой иерархии классов
всего несколько подклассов и расширение их не предвидится, то такое
решение вполне приемлемо, но часто бывает так что иерархии растут и
очень быстро и вместе с ними растет и условная конструкция. Как мы видим
сразу появляется ряд недостатков:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Копипаст. Может возникнуть необходимость выполнять различные
    действия в зависимости от типа порождаемого класса, что приводит к
    копированию условной конструкции в различных методах порождающего
    класса.&lt;/li&gt;
&lt;li&gt;Поддержка. С ростом количества кода неизбежно усложняется его
    поддержка что приводит к усложнению нахождения ошибок. Также этот
    недостаток будет особенно сильно проявляться при совместной
    разработке, когда кто-нибудь добавит новый класс в порождающую
    иерархию изменит соответственным образом класс, который генерирует
    объекты и затрет недавно сделанные изменения своего коллеги, который
    тоже добавил новый case в N-методов класса, за что получит в лучшем
    случае гневное письмо, а в худшем черепно-мозговую травму :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Рассмотрим упрощенный пример такого кода:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'RegForm'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'AuthForm'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PostForm'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Менеджер форм&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FormManager&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getForm&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;RegForm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RegForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AuthForm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AuthForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;PostForm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Иерархия классов форм&lt;/span&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate registration form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate authentication form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate posting form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В данном упрощенном примере рассматривается реализация менеджера форм,
который в зависимости от переданного в конструктор параметра создает
нужный класс формы. Как мы видим использование switch-конструкции здесь
не очень удобно, т.к. требует модификации кода класса при добавлении
нового класса в иерархию форм. А представьте себе ситуацию, что менеджер
форм должен иметь ещё какой-либо функционал, который также зависит от
типа формы, в результате мы получим большое количество методов с
одинаковыми switch-конструкциями. Вообщем на лицо проблема и решить её
можно воспользовавшись шаблоном Factory Method.&lt;/p&gt;
&lt;p&gt;Суть данного шаблона заключается в создании иерархии порождающих
классов, каждый дочерний класс иерархии "знает" какой именно класс из
порождаемого дерева классов ему нужно инстанциировать. Т.е. мы создаем
параллельную иерархию порождающих классов, которая в точности
соответствует иерархии порождаемых классов.&lt;/p&gt;
&lt;h2 id="realizatsiia"&gt;Реализация&lt;/h2&gt;
&lt;p&gt;Рассмотрим предыдущий пример улучшенный путём использования шаблона
Factory Method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;//Иерархия генерирующих классов&lt;/span&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FormManager&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegFormManager&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;FormManager&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RegForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthFormManager&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;FormManager&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AuthForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostFormManager&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;FormManager&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PostForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Иерархия генерируемых классов&lt;/span&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate registration form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate authentication form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostForm&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generateForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generate posting form!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Здесь мы видим, что создается ещё одна иерархия классов, дочерних
FormManager. Каждый класс в иерархии FormManager создает экземпляр
определённого класса иерархии Form. Воспользовавшись рассматриваемым
шаблоном мы значительно улучшили ситуацию. Теперь для добавления новой
формы не нужно редактировать код классов, всё сводится к добавлению
нового класса в иерархию FormManager. Это дает нам ряд преимуществ,
например более удобную поддержку кода и отсутствие жутких условных или
switch конструкций. Но мы получили и недостаток - растущую иерархию
классов, так что если у вас нет серьёзных причин в использовании данного
шаблона, то следует подумать о каком-либо другом решении.&lt;/p&gt;</content><category term="Factory Method"></category><category term="PHP"></category><category term="ООП"></category><category term="Паттерны проектирования"></category></entry><entry><title>Singleton (одиночка)</title><link href="/ru/singleton-odinochka/" rel="alternate"></link><published>2011-01-16T13:20:00+03:00</published><updated>2011-01-16T13:20:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-01-16:/ru/singleton-odinochka/</id><summary type="html">&lt;p&gt;Приветствую Вас, читатель моего блога! Первая статья из цикла паттерны
проектирования посвящена очень полезному шаблону - singleton. Почему я
решил начать именно с него? Всё очень просто, этот шаблон является
первым шаблоном который я начал использовать в практической разработке и
сразу же ощутил всю его мощь. Относится данный шаблон к шаблонам …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Приветствую Вас, читатель моего блога! Первая статья из цикла паттерны
проектирования посвящена очень полезному шаблону - singleton. Почему я
решил начать именно с него? Всё очень просто, этот шаблон является
первым шаблоном который я начал использовать в практической разработке и
сразу же ощутил всю его мощь. Относится данный шаблон к шаблонам
порождающим объекты или к шаблонам генерации объектов. Итак, перейдём к
делу...&lt;/p&gt;
&lt;h2 id="opisanie"&gt;Описание&lt;/h2&gt;
&lt;p&gt;Шаблон singleton позволяет создавать лишь один экземпляр класса в
течении работы приложения. Это даёт ряд преимуществ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Глобальный доступ к объекту&lt;/li&gt;
&lt;li&gt;Уверенность в том что есть только один экземпляр класса&lt;/li&gt;
&lt;li&gt;Контроль доступа к данным&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Я думаю каждый понимает, что использование глобальных переменных вредит
качеству кода. Глобальные переменные создают ряд проблем:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Засоряют область видимости&lt;/li&gt;
&lt;li&gt;Их можно случайно затереть&lt;/li&gt;
&lt;li&gt;Не инкапсулируют доступ к данным&lt;/li&gt;
&lt;li&gt;Тяжело отслеживать их доступность на разных уровнях приложения&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;При использовании рассматриваемого шаблона вместо глобальных переменных
мы избавляемся от всех вышеописанных проблем. Таким образом одиночка
является улучшенной версией глобальных переменных. Но здесь тоже не всё
так просто, злоупотреблять использованием данного шаблона нельзя, т.к.
это приводит к сильной зависимости других классов и может привести к
появлению непонятных, скрытых каналов данных.&lt;/p&gt;
&lt;h2 id="realizatsiia"&gt;Реализация&lt;/h2&gt;
&lt;p&gt;Реализация данного шаблона очень простая и сводится к созданию закрытого
конструктора, хранения экземпляра класса в статической переменной класса
и организации доступа к объекту через статический метод класса. Пример
шаблона одиночка:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Экземпляр объекта Singleton&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//Метод предоставляет доступ к объекту&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_null&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$instance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//Закрытый конструктор&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'New instance!'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__clone&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;someAction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Some action!'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Как Вы видите здесь всё очень просто, конструктор объявлен как private
метод, для того чтобы создавать экземпляр можно было только из методов
класса. Экземпляр класса хранится в приватной статической переменной
$instance и доступ к нему осуществляется через открытый статический
метод getInstance. Теперь рассмотрим, как применять данный класс:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;someAction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;someAction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В результате получаем следующий вывод:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;New instance!
Some action!
Some action!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Как Вы видите конструктор вызывается только 1 раз для 2х вызовов метода
getInstance.&lt;/p&gt;
&lt;h2 id="primenenie"&gt;Применение&lt;/h2&gt;
&lt;p&gt;Применять данный шаблон можно для многих задач. Наиболее часто он
применяется для следующих целей:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Осуществление доступа к данным или функционалу на различных уровнях
    приложения. Например абстракция над http запросом и осуществление
    доступа к нему из контроллеров и видов приложения (для MVC
    архитектуры)&lt;/li&gt;
&lt;li&gt;Абстракция над доступом к ресурсам. Например, контроль за тем чтобы
    в приложении создавался всего одно соединение с базой данных, ресурс
    которого сохраняется в объекте-одиночке.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Это только некоторые способы применения данного шаблона. На этом всё.
Буду рад ответить на ваши вопросы по данной теме.&lt;/p&gt;</content><category term="ООП"></category><category term="Паттерны проектирования"></category></entry><entry><title>Ставим FTP-сервер в Debian</title><link href="/ru/stavim-ftp-server-v-debian/" rel="alternate"></link><published>2011-01-03T00:42:00+03:00</published><updated>2011-01-03T00:42:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-01-03:/ru/stavim-ftp-server-v-debian/</id><summary type="html">&lt;p&gt;&lt;img alt="image" src="/media/2011/01/ftp_client.png" title="ftp_client"/&gt;&lt;/p&gt;
&lt;p&gt;По просьбе моего друга рассматриваю установку ftp-сервера в Linux.&lt;/p&gt;
&lt;p&gt;Начнем с того что установим демон ftpd. Т.к. я использую Debian, то
устанавливать будем при помощи apt-get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install ftpd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Итак, поставили, теперь проверяем запущен или нет:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep ftp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В моём случае не запущен, значит запускаем:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="image" src="/media/2011/01/ftp_client.png" title="ftp_client"/&gt;&lt;/p&gt;
&lt;p&gt;По просьбе моего друга рассматриваю установку ftp-сервера в Linux.&lt;/p&gt;
&lt;p&gt;Начнем с того что установим демон ftpd. Т.к. я использую Debian, то
устанавливать будем при помощи apt-get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install ftpd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Итак, поставили, теперь проверяем запущен или нет:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep ftp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В моём случае не запущен, значит запускаем:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/ftpd start
bash: /etc/init.d/ftpd: Нет такого файла или каталога
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Хмм...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;whereis ftpd
ftpd:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Так, что-то непонятное. При всём этом man ftpd выдаёт страницу
руководства. Пробуем перезагрузится...После перезагрузки ps не выдаёт
никакого результата при поиске слова ftpd также и whereis. Но проверив
свой хост nmap'ом я увидел следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1

Starting Nmap &lt;span class="m"&gt;4&lt;/span&gt;.62 &lt;span class="o"&gt;(&lt;/span&gt; http://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at &lt;span class="m"&gt;2011&lt;/span&gt;-01-02 &lt;span class="m"&gt;23&lt;/span&gt;:37 EET
Interesting ports on localhost &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;:
Not shown: &lt;span class="m"&gt;1708&lt;/span&gt; closed ports
PORT     STATE SERVICE
&lt;span class="m"&gt;21&lt;/span&gt;/tcp   open  ftp
&lt;span class="m"&gt;25&lt;/span&gt;/tcp   open  smtp
&lt;span class="m"&gt;80&lt;/span&gt;/tcp   open  http
&lt;span class="m"&gt;111&lt;/span&gt;/tcp  open  rpcbind
&lt;span class="m"&gt;631&lt;/span&gt;/tcp  open  ipp
&lt;span class="m"&gt;2049&lt;/span&gt;/tcp open  nfs
&lt;span class="m"&gt;3306&lt;/span&gt;/tcp open  mysql

Nmap &lt;span class="k"&gt;done&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt; IP address &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; host up&lt;span class="o"&gt;)&lt;/span&gt; scanned in &lt;span class="m"&gt;0&lt;/span&gt;.098 seconds
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Как мы видим 21 порт открыт и на нём висит ftp-сервер. Бегло просмотрев
man ftpd разобрался с файлами конфигураций. Итак, смотрим что к чему:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/ftpusers&lt;/code&gt; - список пользователей которым запрещён доступ к ftp.
    Формат файла прост, как рубанок - каждая новая строка имя
    пользователя, которому нужно обрезать доступ к питательному вымени
    file transfer protocol :)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ftpchroot&lt;/code&gt; - список пользователей для которых текущая директория
    должна быть установлена в "искусственный" корень при помощи "chroot"
    перед началом работы.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ftpwelcome&lt;/code&gt; - приветственное сообщение&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/motd&lt;/code&gt; - сообщение после авторизации&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Оказалось всё довольно просто. Пробуем залогинится:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ftp &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
Connected to &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1.
&lt;span class="m"&gt;220&lt;/span&gt; dizballanze-laptop FTP server &lt;span class="o"&gt;(&lt;/span&gt;Version &lt;span class="m"&gt;6&lt;/span&gt;.4/OpenBSD/Linux-ftpd-0.17&lt;span class="o"&gt;)&lt;/span&gt; ready.
Name &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:root&lt;span class="o"&gt;)&lt;/span&gt;: dizballanze
&lt;span class="m"&gt;331&lt;/span&gt; Password required &lt;span class="k"&gt;for&lt;/span&gt; dizballanze.
Password:
&lt;span class="m"&gt;230&lt;/span&gt;- Linux dizballanze-laptop &lt;span class="m"&gt;2&lt;/span&gt;.6.26-2-686 &lt;span class="c1"&gt;#1 SMP Sat Dec 26 09:01:51 UTC 2009 i686&lt;/span&gt;
&lt;span class="m"&gt;230&lt;/span&gt;- 
&lt;span class="m"&gt;230&lt;/span&gt;- The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="m"&gt;230&lt;/span&gt;- the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
&lt;span class="m"&gt;230&lt;/span&gt;- individual files in /usr/share/doc/*/copyright.
&lt;span class="m"&gt;230&lt;/span&gt;- 
&lt;span class="m"&gt;230&lt;/span&gt;- Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
&lt;span class="m"&gt;230&lt;/span&gt;- permitted by applicable law.
&lt;span class="m"&gt;230&lt;/span&gt; User dizballanze logged in.
Remote system &lt;span class="nb"&gt;type&lt;/span&gt; is UNIX.
Using binary mode to transfer files.
ftp&amp;gt; &lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;span class="m"&gt;257&lt;/span&gt; &lt;span class="s2"&gt;"/home/dizballanze"&lt;/span&gt; is current directory.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Авторизация прошла успешно и я сразу получил доступ к файловой системе
от пользователя dizballanze без каких-либо дополнительных настроек.
Единственная проблема - это некорректное отображения русских надписей в
терминальном клиенте, но в gFTP всё отображается отлично. Советую
использовать именно его в качестве клиента. Подводя итоги перечислим 5
правил аутентификации ftpd:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Логин должен находится в базе паролей системы - &lt;code&gt;/etc/passwd&lt;/code&gt; и не
    должен быть равен null.&lt;/li&gt;
&lt;li&gt;Логин не должен встречаться в &lt;code&gt;/etc/ftpusers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Пользователь должен иметь стандартный интерпретатор команд
    возвращаемый &lt;code&gt;getusershell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Если имя пользователя встречается в &lt;code&gt;/etc/ftpchroot&lt;/code&gt; сессионный корень
    будет изменён на директорию входа при помощи chroot, как для
    "anonymous" или "ftp" аккаунта. Но тем не менее всёравно требуется
    пароль. Данная функция - это промежуточный этап между полностью
    анонимным и полностью привилегированным аккаунтом.&lt;/li&gt;
&lt;li&gt;Если имя пользователя "anonymous" или "ftp", то анонимный
    ftp-аккаунт должен быть представлен в файле паролей (пользователь
    "ftp"). В таком случае пользователь получает возможность
    авторизироваться используя любой пароль (по соглашению принято
    использовать email в качестве пароля).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;FTPd предоставляет простой способ удалённого доступа к системе без траты
времени на конфигурирование системы. Очень удобно использовать свои
данные для удалённой авторизации. Но при этом стоит учитывать опасность,
которая возникает, т.к. теперь любой пользователь сможет получить доступ
к файлам узнав ваши логин и пароль, к тому же зачастую пароли для
пользователей на локальных машинах далеки от безопасных (по себе знаю).
Так что если вы планируете использовать FTPd советую изменить пароли на
безопасные или заблокировать аккаунты путём добавления их в
/etc/ftpusers. Спасибо за внимание! Да прибудет с вами сила :) !&lt;/p&gt;</content><category term="debian"></category><category term="ftp"></category><category term="ftpd"></category><category term="администрирование"></category></entry><entry><title>Паттерны проектирования в PHP</title><link href="/ru/patterny-proektirovaniia-v-php/" rel="alternate"></link><published>2011-01-02T16:43:00+03:00</published><updated>2011-01-02T16:43:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2011-01-02:/ru/patterny-proektirovaniia-v-php/</id><summary type="html">&lt;p&gt;Здравствуйте, товарищи программисты!&lt;/p&gt;
&lt;p&gt;Данным топиком я открываю цикл статей про паттерны(шаблоны)
проектирования в общем и их реализацию на php в частном. Каждый
программист, который разрабатывает действительно масштабные проекты со
временем начинает замечать, что сталкивается с одними и теми же
проблемами. Здесь речь идет не о использовании библиотек и фреймворков …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Здравствуйте, товарищи программисты!&lt;/p&gt;
&lt;p&gt;Данным топиком я открываю цикл статей про паттерны(шаблоны)
проектирования в общем и их реализацию на php в частном. Каждый
программист, который разрабатывает действительно масштабные проекты со
временем начинает замечать, что сталкивается с одними и теми же
проблемами. Здесь речь идет не о использовании библиотек и фреймворков,
а о проблемах, которые возникают при проектировании совершенно различных
программных продуктов. К таким проблемам можно отнести организацию
правильных иерархий классов, которая позволила бы масштабировать
систему, как горизонтально так и вертикально или например замену
глобальных переменных объектом, который инкапсулирует доступ к данным.
Каждый раз приходится придумывать решения этих проблем, что приводит к
трате драгоценного времени, которое можно посвятить более приятным
занятиям. Наверняка вы не первый сталкиваетесь с данными проблемами,
соответственно кто-то уже придумал оптимальное решения и почему бы им не
воспользоваться. Паттерны проектирования - это как раз таки решения этих
часто возникающих проблем проектирования. Шаблон проектирование не
подразумевает конкретную реализацию кода, т.к. они являются по своей
природе универсальными и могут быть реализованы практически в любом
современном объектно-ориентированном языке программирования. Но в
зависимости от используемого языка программирования могут быть свои
особенности, поэтому я буду реализовывать небольшие примеры на php.
Кроме того на примере всегда проще разбираться.&lt;/p&gt;
&lt;p&gt;Архитекторы первыми додумались использовать паттерны для своих
архитектурных целей. Программисты же начали использовать шаблоны с
развитием ООП и соответственно с появлением возможности более удобного
повторного использования написанного кода. Наиболее авторитетными
авторами являются так называемая банда четырех -&lt;/p&gt;
&lt;p&gt;это группа, которая написала книгу "Design Patterns" и описала в ней
основные шаблоны проектирования.&lt;/p&gt;
&lt;h2 id="shablony-proektirovaniia-v-php"&gt;Шаблоны проектирования в PHP&lt;/h2&gt;
&lt;p&gt;PHP начал своё развитие с небольшой библиотеки написанной на perl,
основной функцией которой являлась обработка форм. Но с тех времён
многое изменилось и сейчас php является очень мощным инструментом для
написания приложений любого масштаба. Пусть для некоторых он так и
останется надстройкой над html, но эти люди сами себя ограничивают, т.к.
отрицать несомненного лидера в области web-разработки по крайней мере
нерозумно.&lt;/p&gt;
&lt;p&gt;Начиная с 4 версии php приобрел объектно-ориентированные возможности.
Конечно тогда были свои недостатки, например передача объектов по
значению, является мягко говоря спорным решением, но тем не менее писать
ООП приложения уже было возможно. Именно тогда программисты своей
активностью в данном направлении положили путь развития PHP, как
объектно-ориентированного языка программирования. В пятой версии были
добавлены новые функции:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;контроль типа&lt;/li&gt;
&lt;li&gt;передача объектов по ссылке&lt;/li&gt;
&lt;li&gt;ключевое слово static&lt;/li&gt;
&lt;li&gt;Ключевое слово final&lt;/li&gt;
&lt;li&gt;Автоматическая загрузка объектов&lt;/li&gt;
&lt;li&gt;Константы в объектах&lt;/li&gt;
&lt;li&gt;Абстрактные классы&lt;/li&gt;
&lt;li&gt;Интерфейсы&lt;/li&gt;
&lt;li&gt;Магические методы&lt;/li&gt;
&lt;li&gt;Клонирование объектов&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Всё это благодаря использованию движка Zend Engine 2.&lt;/p&gt;
&lt;p&gt;Как вы видите в PHP 5 есть все необходимые средства для написания
объектно-ориентированных программ и соответственно использования
шаблонов проектирования. В следующих топиках данного цикла я постараюсь
рассмотреть основные шаблоны проектирования и их реализацию.&lt;/p&gt;</content><category term="PHP"></category><category term="ООП"></category><category term="Паттерны проектирования"></category></entry><entry><title>Простой сервер чата на Node.JS</title><link href="/ru/prostoi-server-chata-na-nodejs/" rel="alternate"></link><published>2010-12-30T18:20:00+03:00</published><updated>2010-12-30T18:20:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2010-12-30:/ru/prostoi-server-chata-na-nodejs/</id><summary type="html">&lt;p&gt;Здравствуйте! В продолжении темы Node.JS хочу рассмотреть пример
создания простого сервера чата на базе данной библиотеки.&lt;/p&gt;
&lt;p&gt;Во-первых нужно определится с функционалом. Наш сервер должен принимать
подключения от клиентов по протоколу tcp, открывать потоки и рассылать
всем клиентам полученные от каждого данные. Т.е. при получении данных от
одного из …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Здравствуйте! В продолжении темы Node.JS хочу рассмотреть пример
создания простого сервера чата на базе данной библиотеки.&lt;/p&gt;
&lt;p&gt;Во-первых нужно определится с функционалом. Наш сервер должен принимать
подключения от клиентов по протоколу tcp, открывать потоки и рассылать
всем клиентам полученные от каждого данные. Т.е. при получении данных от
одного из клиентов нужно записать их в каждый из поток остальных
клиентов.&lt;/p&gt;
&lt;p&gt;Для того что-бы реализовать сервер в ноде нам понадобится стандартный
модуль net. Подключим его добавив строку &lt;code&gt;var net = require('net');&lt;/code&gt; в
начало кода программы. Теперь мы можем обращаться ко всему функционалу
модуля через переменную net. В данном случае мы будем использовать метод
createServer который создает tcp сервер. В качестве параметров
передается функция, которая будет обрабатывать подключения к серверу.
При вызове в эту функцию передается один параметр - поток net.Stream,
созданного соединения. Данный поток является потоком ввода/вывода и
будет использоваться для непосредственного обмена данными с клиентом.
Итак, создаем сервер:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Обрабатываем новое соединение&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Сервер мы создали, но соединения он принимать не будет, т.к. мы не
назначили его на определённый ip:port или сокет. Для этого необходимо
воспользоваться методом &lt;code&gt;server.listen(port, [host], [callback])&lt;/code&gt;, если
хотим назначить сервер "слушать" порт или
&lt;code&gt;server.listen(path, [callback])&lt;/code&gt; для сокета. Назначим сервер "слушать"
10.32.3.23:8124:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'10.32.3.23'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Дальше для корректной работы нашего сервера необходимо описать
обработчики некоторых событий. Т.к. &lt;code&gt;net.Server&lt;/code&gt; и &lt;code&gt;net.Stream&lt;/code&gt; являются
EventEmitter, то они могут вызывать события. Рассмотрим нужные нам
события сервера:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;'connection'&lt;/em&gt; - &lt;code&gt;function (stream) {}&lt;/code&gt; - вызывается при подключении
нового клиента. Мы в данном примере будем использовать следующий
обработчик:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEncoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Устанавливаем кодировку&lt;/span&gt;
    &lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;//Добавляем поток в массив&lt;/span&gt;
    &lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;//Обходим все сохраненные потоки&lt;/span&gt;
        &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remoteAddress&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' - is connected\n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Выводим сообщение о новом клиенте&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onStreamData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Добавляем обработчик события 'data' нового потока&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;net.Stream.remote Address - ip адрес клиента подключенного к данному
потоку.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;'close'&lt;/em&gt; - &lt;code&gt;function () {}&lt;/code&gt; - вызывается при закрытии сервера. Наш
обработчик:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;//Обходим все сохраненные потоки&lt;/span&gt;
        &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Server is going down! Bye-bye!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Выводим сообщение&lt;/span&gt;
        &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Уничтожаем поток&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Хочу обратить внимание, что в данном участке кода нет непосредственного
завершения процесса, но он приводит к этому. Связанно это с тем что
программы на node работают пока есть активные обработчики, а после
выполнения этого кода все обработчики назначенные потокам будут
отключены и это приведет к завершению процесса.&lt;/p&gt;
&lt;p&gt;Теперь рассмотрим события потока:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;'data'&lt;/em&gt; - &lt;code&gt;function (data) {}&lt;/code&gt; - вызывается при получении данных от
клиента. data - буфер, но если до этого вызван метод setEncoding, то
data - строка в заданной кодировке. Рассмотрим наш обработчик:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onStreamData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// Обработка команды завершения работы сервера&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.down'&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
        &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Приводит к тому, что сервер больше не принимает соединения, а также вызывает событие 'close'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Заносим в переменную текущий поток&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;current_stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;current_stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Если поток не является текущим потоком, то выводим полученные данные&lt;/span&gt;
            &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remoteAddress&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь полный код программы:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;net&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'net'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;streams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onStreamData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.down'&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
        &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;current_stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;current_stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remoteAddress&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEncoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remoteAddress&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' - is connected\n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onStreamData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'close'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Server is going down! Bye-bye!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxConnections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Максимальное кол-во подключений&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'10.32.3.23'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Задайте свой внешний ip или localhost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Сохраните код в файле, например server.js. Теперь можно запустить сервер
и проверить его в действии. Для запуска выполните:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;node server.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для того что-бы подключится воспользуемся telnet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;telnet &lt;span class="m"&gt;10&lt;/span&gt;.32.3.23 &lt;span class="m"&gt;8124&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Не забудьте поменять ip и порт на тот, который вы использовали при
вызове метода listen.&lt;/p&gt;
&lt;p&gt;При желании можете расширить пример, дописать назначение псевдонимов
клиентам или добавить специальные команды(такие как .down) для бана или
выкидывания пользователей из чата.&lt;/p&gt;
&lt;p&gt;Как вы смогли убедится Node.JS предоставляет весь необходимый функционал
для создания сетевых приложений. В скором времени постараюсь продолжить
тему разработки приложений на Node.JS новыми и интересными примерами.
Спасибо за внимание :)&lt;/p&gt;</content><category term="java script"></category><category term="node.js"></category></entry><entry><title>Node.JS - введение</title><link href="/ru/nodejs-vvedenie/" rel="alternate"></link><published>2010-12-22T11:33:00+03:00</published><updated>2010-12-22T11:33:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2010-12-22:/ru/nodejs-vvedenie/</id><summary type="html">&lt;p&gt;&lt;img alt="image" src="/media/2010/12/media_httpnodeblogfil_occie.png.scaled500.png" title="nodejs"/&gt;&lt;/p&gt;
&lt;p&gt;Сегодня я хочу рассмотреть библиотеку для асинхронного программирования
server-side приложений на Java Script - Node.JS.&lt;/p&gt;
&lt;p&gt;Работает библиотека на Java Script движке V8 от самого гугла и
предоставляет базовые возможности для создания масштабируемых сетевых
приложений. Изначально Node заточен под высокие нагрузки, так что если
вы разрабатываете очередной facebook, то задумайтесь об …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="image" src="/media/2010/12/media_httpnodeblogfil_occie.png.scaled500.png" title="nodejs"/&gt;&lt;/p&gt;
&lt;p&gt;Сегодня я хочу рассмотреть библиотеку для асинхронного программирования
server-side приложений на Java Script - Node.JS.&lt;/p&gt;
&lt;p&gt;Работает библиотека на Java Script движке V8 от самого гугла и
предоставляет базовые возможности для создания масштабируемых сетевых
приложений. Изначально Node заточен под высокие нагрузки, так что если
вы разрабатываете очередной facebook, то задумайтесь об использовании
server-side JS в своем приложении. Основная фишка библиотеки в работе с
HTTP протоколом, т.е. для нас web-разработчиков, то что доктор прописал.&lt;/p&gt;
&lt;h2 id="ustanovka"&gt;Установка&lt;/h2&gt;
&lt;p&gt;Я рассмотрю процесс установки в ОС Linux (Debian 5.0). Сначала скачиваем
архив с исходниками &lt;a href="http://nodejs.org/#download"&gt;здесь&lt;/a&gt;. Т.к. всё необходимое для работы
библиотеки включено в дистрибутив, то установка очень простая и знакома
всем линуксоидам, которые когда-либо собирали что-нибудь из исходников.
Итак, распаковываем архив, затем переходим в директорию с исходниками и
выполняем:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure#make#make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;После этого можно проверить корректность установки, для этого
выполните:&lt;code&gt;make test&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="hello-world"&gt;Hello world&lt;/h2&gt;
&lt;p&gt;Теперь напишем простой пример web-сервера, который отвечает "Hello
World" на каждый запрос:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Подключаем модуль http&lt;/span&gt;
&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Создаем сервер и устанавливаем обработчик на подключение&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'text/plain'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;//Устанавливаем заголовок&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World\n'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Вывод сообщения и завершение вывода&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"127.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Заставляем сервер "слушать" 127.0.0.1:8124&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Server running at http://127.0.0.1:8124/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Выводим сообщение в консоль&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для запуска нашего сервера выполняем:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;node example.jsServer running at http://127.0.0.1:8124/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Что-бы проверить, что всё работает открываем в браузере
http://127.0.0.1:8124 и получаем "Hello World" в ответ.&lt;/p&gt;
&lt;p&gt;Таким способом мы получаем работающий web-сервер в несколько строк кода.
В скором времени будут ещё топики на тему Node.JS, в которых мы
подробнее рассмотрим процесс написания server-side JS приложений.&lt;/p&gt;
&lt;h2 id="ssylki"&gt;Ссылки&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://nodejs.org/"&gt;nodejs.org&lt;/a&gt; - оф.сайт. Документация, новости проекта, примеры
приложений.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nodejs.ru"&gt;nodejs.ru&lt;/a&gt; - русскоязычный блог о Node.js&lt;/p&gt;</content><category term="java script"></category><category term="node.js"></category></entry><entry><title>Подключение нового жесткого диска в Linux</title><link href="/ru/podkliuchenie-novogo-zhestkogo-diska-v-linux/" rel="alternate"></link><published>2010-11-26T21:14:00+03:00</published><updated>2010-11-26T21:14:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2010-11-26:/ru/podkliuchenie-novogo-zhestkogo-diska-v-linux/</id><summary type="html">&lt;p&gt;Доброго времени суток, товарищи линуксоиды!!&lt;/p&gt;
&lt;p&gt;В этой статье я хочу рассказать о процессе подключения нового жёсткого
диска в ОС Linux.&lt;/p&gt;
&lt;p&gt;Подключив жёсткий диск убедитесь, что система распознаёт его. Для этого
можно обратиться к программе конфигурации BIOS. Убедившись в том что
жёсткий диск успешно подключён можно приступать к загрузке системы.&lt;/p&gt;
&lt;p&gt;Сразу …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Доброго времени суток, товарищи линуксоиды!!&lt;/p&gt;
&lt;p&gt;В этой статье я хочу рассказать о процессе подключения нового жёсткого
диска в ОС Linux.&lt;/p&gt;
&lt;p&gt;Подключив жёсткий диск убедитесь, что система распознаёт его. Для этого
можно обратиться к программе конфигурации BIOS. Убедившись в том что
жёсткий диск успешно подключён можно приступать к загрузке системы.&lt;/p&gt;
&lt;p&gt;Сразу после загрузки необходимо проверить существует ли файл устройств
для нового диска. В Linux жёсткие диски обозначаются в формате
/dev/sdXN, где X &amp;mdash; буква латинского алфавита, означает диск, а N номер
раздела на жёстком диске.&lt;/p&gt;
&lt;p&gt;Убедившись в том что файл устройства существует можно приступать к
разбивке диска на разделы. В моём случае файл устройства называется
/dev/sdb, т.к. это второй диск в системе (первый как вы наверное
догадались /dev/sda).&lt;/p&gt;
&lt;p&gt;Итак для создания разделам будем использовать утилиту fdisk.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fdisk /dev/sdb

:::text
Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel
Building a new DOS disklabel with disk identifier 0x07611c35.
Changes will remain in memory only, &lt;span class="k"&gt;until&lt;/span&gt; you decide to write them.
After that, of course, the previous content won&lt;span class="err"&gt;'&lt;/span&gt;t be recoverable.
The number of cylinders &lt;span class="k"&gt;for&lt;/span&gt; this disk is &lt;span class="nb"&gt;set&lt;/span&gt; to &lt;span class="m"&gt;60801&lt;/span&gt;.
There is nothing wrong with that, but this is larger than &lt;span class="m"&gt;1024&lt;/span&gt;,
and could in certain setups cause problems with:
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; software that runs at boot &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;e.g., old versions of LILO&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; booting and partitioning software from other OSs
&lt;span class="o"&gt;(&lt;/span&gt;e.g., DOS FDISK, OS/2 FDISK&lt;span class="o"&gt;)&lt;/span&gt;
Warning: invalid flag 0x0000 of partition table &lt;span class="m"&gt;4&lt;/span&gt; will be corrected by w&lt;span class="o"&gt;(&lt;/span&gt;rite&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Утилита выводит информацию о жёстком диске: идентификатор диска,
количество цилиндров. Потом она ожидает ввода команды, для вывода
справочной информации о всех доступных командах введите m. Мы будем
использовать три инструкции:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n (new)&lt;/code&gt; - создать новый раздел.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p (print)&lt;/code&gt; - вывести информацию о разделах&lt;/p&gt;
&lt;p&gt;&lt;code&gt;w (write)&lt;/code&gt; &amp;mdash; записать таблицу разделов на диск&lt;/p&gt;
&lt;p&gt;Я создам только один раздел, который будет занимать весь доступный объём
диска. Для этого я ввожу команду new, номер раздела 1, первый цилиндр 1
и последний цилиндр 60801 (значение по умолчанию). Если вы хотите
создать большее количество разделов, то просто аналогичным образом
добавьте необходимое количество разделов. Размер раздела можно задавать
в цилиндрах, как в показанном примере, или более простым способом, в
байтах (мегабайтах или гигабайтах) .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Command (m for help): new
Command action
e extended
p primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-60801, default 1): 1
Last cylinder or +size or +sizeM or +sizeK (1-60801, default 60801):
Using default value 60801
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Выводим информацию о разделах при помощи команды print.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Command (m for help): print

Disk /dev/sdb: 500.1 GB, 500107862016 bytes
255 heads, 63 sectors/track, 60801 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Disk identifier: 0x07611c35

Device Boot Start End Blocks Id System
/dev/sdb1 1 60801 488384001 83 Linux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Убедившись что разделы созданы так как вы рассчитывали записываем
таблицу разделов на диск при помощи команды &lt;code&gt;write&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Command (m for help): write
The partition table has been altered!
Calling ioctl() to re-read partition table.
Syncing disks.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь можно приступить к форматировании разделов.&lt;/p&gt;
&lt;p&gt;Для этого мы будем использовать команду &lt;code&gt;mke2fs -j&lt;/code&gt;, указав в качестве
аргумента имя раздела.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mke2fs -j /dev/sdb1
mke2fs &lt;span class="m"&gt;1&lt;/span&gt;.41.3 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;-Oct-2008&lt;span class="o"&gt;)&lt;/span&gt;
Filesystem &lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
OS type: Linux
Block &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;log&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Fragment &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;log&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;30531584&lt;/span&gt; inodes, &lt;span class="m"&gt;122096000&lt;/span&gt; blocks
&lt;span class="m"&gt;6104800&lt;/span&gt; blocks &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.00%&lt;span class="o"&gt;)&lt;/span&gt; reserved &lt;span class="k"&gt;for&lt;/span&gt; the super user
First data &lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
Maximum filesystem &lt;span class="nv"&gt;blocks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;3727&lt;/span&gt; block groups
&lt;span class="m"&gt;32768&lt;/span&gt; blocks per group, &lt;span class="m"&gt;32768&lt;/span&gt; fragments per group
&lt;span class="m"&gt;8192&lt;/span&gt; inodes per group
Superblock backups stored on blocks:
&lt;span class="m"&gt;32768&lt;/span&gt;, &lt;span class="m"&gt;98304&lt;/span&gt;, &lt;span class="m"&gt;163840&lt;/span&gt;, &lt;span class="m"&gt;229376&lt;/span&gt;, &lt;span class="m"&gt;294912&lt;/span&gt;, &lt;span class="m"&gt;819200&lt;/span&gt;, &lt;span class="m"&gt;884736&lt;/span&gt;, &lt;span class="m"&gt;1605632&lt;/span&gt;, &lt;span class="m"&gt;2654208&lt;/span&gt;,
&lt;span class="m"&gt;4096000&lt;/span&gt;, &lt;span class="m"&gt;7962624&lt;/span&gt;, &lt;span class="m"&gt;11239424&lt;/span&gt;, &lt;span class="m"&gt;20480000&lt;/span&gt;, &lt;span class="m"&gt;23887872&lt;/span&gt;, &lt;span class="m"&gt;71663616&lt;/span&gt;, &lt;span class="m"&gt;78675968&lt;/span&gt;,
&lt;span class="m"&gt;102400000&lt;/span&gt;

Writing inode tables: &lt;span class="k"&gt;done&lt;/span&gt;
Creating journal &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32768&lt;/span&gt; blocks&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="k"&gt;done&lt;/span&gt;
Writing superblocks and filesystem accounting information: &lt;span class="k"&gt;done&lt;/span&gt;

This filesystem will be automatically checked every &lt;span class="m"&gt;34&lt;/span&gt; mounts or
&lt;span class="m"&gt;180&lt;/span&gt; days, whichever comes first. Use tune2fs -c or -i to override.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь необходимо настроить монтирование новых разделов. Сначала
создадим каталог, который мы будем использовать как точку монтирования.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /media/mediahdd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Пробуем монтировать раздел.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount /dev/sdb1 /media/mediahdd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь необходимо добавить информацию о новом разделе в файл &lt;code&gt;/etc/fstab&lt;/code&gt;
для, того чтобы раздел автоматически монтировался при каждой загрузке
системы. Для этого открываем этот файл в любом текстовом редакторе.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nano /etc/fstab
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Добавляем строку формата: &lt;code&gt;имя_раздела&lt;/code&gt; &lt;code&gt;точка_монтирования&lt;/code&gt;
&lt;code&gt;файловая_система&lt;/code&gt; &lt;code&gt;частота_создания_резервных_копий&lt;/code&gt;
&lt;code&gt;кол-во_запусков_fsck&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/dev/sdb1 /media/mediahdd ext3 defaults 0 0
&lt;/pre&gt;&lt;/div&gt;</content><category term="Linux"></category><category term="администрирование"></category></entry><entry><title>Как настроить подключение к интернет через мобильный телефон в Debian</title><link href="/ru/kak-nastroit-podkliuchenie-k-internet-cherez-mobilnyi-telefon-v-debian/" rel="alternate"></link><published>2010-11-26T20:02:00+03:00</published><updated>2010-11-26T20:02:00+03:00</updated><author><name>Admin</name></author><id>tag:None,2010-11-26:/ru/kak-nastroit-podkliuchenie-k-internet-cherez-mobilnyi-telefon-v-debian/</id><summary type="html">&lt;p&gt;В этой статье я расскажу как использовать ваш мобильный телефон в
качестве 3G/GPRS/EDGE модема в ОС Linux.&lt;/p&gt;
&lt;p&gt;В качестве тестового примера использовались ПК с установленной Debian
5.0 &amp;laquo;Lenny&amp;raquo; и мобильный телефон Nokia N96 соединённые между собой usb
кабелем.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Устанавливаем соединение компьютера с телефоном.Подключаем телефон к
    компьютеру …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;В этой статье я расскажу как использовать ваш мобильный телефон в
качестве 3G/GPRS/EDGE модема в ОС Linux.&lt;/p&gt;
&lt;p&gt;В качестве тестового примера использовались ПК с установленной Debian
5.0 &amp;laquo;Lenny&amp;raquo; и мобильный телефон Nokia N96 соединённые между собой usb
кабелем.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Устанавливаем соединение компьютера с телефоном.Подключаем телефон к
    компьютеру через usb кабель. В появившемся на экране телефона меню
    выбираем режим PC Suite.&lt;/p&gt;
&lt;p&gt;Посмотрим как на это отреагировала ОС. Для этого введём в консоль:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /var/log/messages
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Видим следующий вывод:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Aug  1 08:30:43 DizballanzePC kernel: [  200.535814] usb 8-1: new high speed USB device using ehci_hcd and address 3
Aug  1 08:30:43 DizballanzePC kernel: [  200.673679] usb 8-1: configuration #1 chosen from 1 choice
Aug  1 08:30:43 DizballanzePC kernel: [  200.678985] usb 8-1: New USB device found, idVendor=0421, idProduct=003a
Aug  1 08:30:43 DizballanzePC kernel: [  200.678989] usb 8-1: New USB device strings: Mfr=1, Product=2, SerialNumber=3
Aug  1 08:30:43 DizballanzePC kernel: [  200.678991] usb 8-1: Product: Nokia N96
Aug  1 08:30:43 DizballanzePC kernel: [  200.678993] usb 8-1: Manufacturer: Nokia
Aug  1 08:30:43 DizballanzePC kernel: [  200.678995] usb 8-1: SerialNumber: 356406026032671
Aug  1 08:30:43 DizballanzePC kernel: [  200.860753] cdc_acm 8-1:1.1: ttyACM0: USB ACM device
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Как вы видите новое устройство определено ОС и доступно по адресу
&lt;code&gt;/dev/ttyACM0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Теперь мы знаем что соединение успешно установлено.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Настраиваем параметры модема. Для дозвона мы будем использовать
    программу wvdial. Нужно убедится что она установлена в вашей
    системе. Для этого выполните следующую команду в консоль:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;whereis wvdial
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Если команда сообщит вам месторасположение файлов программы, значит
она уже установлена в вашей системе. Вот что выводит команда whereis
на моём компьютере:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wvdial: /usr/bin/wvdial /etc/wvdial.conf /etc/wvdial.conf~ /usr/share/man/man1/wvdial.1.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В случае если программа не установлена в вашей системе необходимо
установить её самостоятельно. Для этого введите в консоль следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install wvdial
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;И программа установщик выполнит все необходимые действия.&lt;/p&gt;
&lt;p&gt;Теперь переходим непосредственно к настройке модема.&lt;/p&gt;
&lt;p&gt;Для этого открываем файл &lt;code&gt;/etc/wvdial.conf&lt;/code&gt; в любом текстовом
редакторе, предварительно войдя в систему как пользователь root.&lt;/p&gt;
&lt;p&gt;Вам необходимо удалить следующие строки кода:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Modem Type = USB ModemModem = /dev/ttyACM0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;А также вам необходимо добавить следующие строки в конец файла:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;New PPPD = yes
Phone = *99***1#
Username = MOVISTAR
Password = MOVISTAR
Init6= AT+CGDCONT=1,"IP","acces.point"

[Dialer usb-scb]
Modem Type = USB Modem
Modem = /dev/ttyACM0

[Dialer blz-scb]
Modem = /dev/rfcomm0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Вместо acces.point введите имя точки доступа вашего оператора
сотовой связи.&lt;/p&gt;
&lt;p&gt;Все необходимые настройки выполнены, теперь можно приступать
непосредственно к соединению.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Подключение к Интернет. Для того чтобы подключится к Интернет вам
    необходимо просто соединить кабелем компьютер и телефон, а потом
    написать от пользователя root:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wvdial usb-scb&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;﻿
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="debian"></category><category term="Linux"></category><category term="wvdial"></category></entry></feed>